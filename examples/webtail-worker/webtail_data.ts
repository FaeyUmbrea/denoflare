

export const WEBTAIL_APP_HASH = '25c7f9773d9982545929b873a3358f0077a699c3';
export const WEBTAIL_APP_B64 = 'Y29uc3QgZGlyZWN0aXZlcyA9IG5ldyBXZWFrTWFwKCk7CmNvbnN0IGRpcmVjdGl2ZSA9IChmKT0+KC4uLmFyZ3MpPT57CiAgICAgICAgY29uc3QgZCA9IGYoLi4uYXJncyk7CiAgICAgICAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7CiAgICAgICAgcmV0dXJuIGQ7CiAgICB9CjsKY29uc3QgaXNEaXJlY3RpdmUgPSAobyk9PnsKICAgIHJldHVybiB0eXBlb2YgbyA9PT0gImZ1bmN0aW9uIiAmJiBkaXJlY3RpdmVzLmhhcyhvKTsKfTsKY29uc3QgaXNDRVBvbHlmaWxsID0gdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgJiYgd2luZG93LmN1c3RvbUVsZW1lbnRzICE9IG51bGwgJiYgd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2sgIT09IHZvaWQgMDsKY29uc3QgcmVwYXJlbnROb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsLCBiZWZvcmUgPSBudWxsKT0+ewogICAgd2hpbGUoc3RhcnQgIT09IGVuZCl7CiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nOwogICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3RhcnQsIGJlZm9yZSk7CiAgICAgICAgc3RhcnQgPSBuOwogICAgfQp9Owpjb25zdCByZW1vdmVOb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsKT0+ewogICAgd2hpbGUoc3RhcnQgIT09IGVuZCl7CiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nOwogICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzdGFydCk7CiAgICAgICAgc3RhcnQgPSBuOwogICAgfQp9Owpjb25zdCBub0NoYW5nZSA9IHsKfTsKY29uc3Qgbm90aGluZyA9IHsKfTsKY29uc3QgbWFya2VyID0gYHt7bGl0LSR7U3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpfX19YDsKY29uc3Qgbm9kZU1hcmtlciA9IGA8IS0tJHttYXJrZXJ9LS0+YDsKY29uc3QgbWFya2VyUmVnZXggPSBuZXcgUmVnRXhwKGAke21hcmtlcn18JHtub2RlTWFya2VyfWApOwpjb25zdCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCA9ICIkbGl0JCI7CmNsYXNzIFRlbXBsYXRlIHsKICAgIGNvbnN0cnVjdG9yKHJlc3VsdCwgZWxlbWVudCl7CiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdOwogICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdOwogICAgICAgIGNvbnN0IHN0YWNrID0gW107CiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LmNvbnRlbnQsIDEzMywgbnVsbCwgZmFsc2UpOwogICAgICAgIGxldCBsYXN0UGFydEluZGV4ID0gMDsKICAgICAgICBsZXQgaW5kZXggPSAtMTsKICAgICAgICBsZXQgcGFydEluZGV4ID0gMDsKICAgICAgICBjb25zdCB7IHN0cmluZ3MgLCB2YWx1ZXM6IHsgbGVuZ3RoICB9ICB9ID0gcmVzdWx0OwogICAgICAgIHdoaWxlKHBhcnRJbmRleCA8IGxlbmd0aCl7CiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTsKICAgICAgICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZXMoKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsZW5ndGg6IGxlbmd0aDIgIH0gPSBhdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDI7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmRzV2l0aChhdHRyaWJ1dGVzW2ldLm5hbWUsIGJvdW5kQXR0cmlidXRlU3VmZml4KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB3aGlsZShjb3VudC0tID4gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0ZvclBhcnQgPSBzdHJpbmdzW3BhcnRJbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMoc3RyaW5nRm9yUGFydClbMl07CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZUxvb2t1cE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkgKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRpY3MgPSBhdHRyaWJ1dGVWYWx1ZS5zcGxpdChtYXJrZXJSZWdleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXR0cmlidXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3M6IHN0YXRpY3MKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBzdGF0aWNzLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gIlRFTVBMQVRFIikgewogICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gbm9kZS5jb250ZW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzMiA9IGRhdGEuc3BsaXQobWFya2VyUmVnZXgpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0cmluZ3MyLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc2VydDsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBzdHJpbmdzMltpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBjcmVhdGVNYXJrZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIGVuZHNXaXRoKG1hdGNoWzJdLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gcy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyBtYXRjaFsxXSArIG1hdGNoWzJdLnNsaWNlKDAsIC1ib3VuZEF0dHJpYnV0ZVN1ZmZpeC5sZW5ndGgpICsgbWF0Y2hbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibm9kZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogKytpbmRleAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3MyW2xhc3RJbmRleF0gPT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gc3RyaW5nczJbbGFzdEluZGV4XTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IGxhc3RJbmRleDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSA4KSB7CiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSBtYXJrZXIpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsIHx8IGluZGV4ID09PSBsYXN0UGFydEluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsYXN0UGFydEluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIm5vZGUiLAogICAgICAgICAgICAgICAgICAgICAgICBpbmRleAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICIiOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTE7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUoKGkgPSBub2RlLmRhdGEuaW5kZXhPZihtYXJrZXIsIGkgKyAxKSkgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJub2RlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAtMQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAoY29uc3QgbjEgb2Ygbm9kZXNUb1JlbW92ZSl7CiAgICAgICAgICAgIG4xLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobjEpOwogICAgICAgIH0KICAgIH0KfQpjb25zdCBlbmRzV2l0aCA9IChzdHIsIHN1ZmZpeCk9PnsKICAgIGNvbnN0IGluZGV4ID0gc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGg7CiAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBzdHIuc2xpY2UoaW5kZXgpID09PSBzdWZmaXg7Cn07CmNvbnN0IGlzVGVtcGxhdGVQYXJ0QWN0aXZlID0gKHBhcnQpPT5wYXJ0LmluZGV4ICE9PSAtMQo7CmNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpPT5kb2N1bWVudC5jcmVhdGVDb21tZW50KCIiKQo7CmNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPSAvKFsgXHgwOVx4MGFceDBjXHgwZF0pKFteXDAtXHgxRlx4N0YtXHg5RiAiJz49L10rKShbIFx4MDlceDBhXHgwY1x4MGRdKj1bIFx4MDlceDBhXHgwY1x4MGRdKig/OlteIFx4MDlceDBhXHgwY1x4MGQiJ2A8Pj1dKnwiW14iXSp8J1teJ10qKSkkLzsKY2xhc3MgVGVtcGxhdGVJbnN0YW5jZSB7CiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgcHJvY2Vzc29yLCBvcHRpb25zMil7CiAgICAgICAgdGhpcy5fX3BhcnRzID0gW107CiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlOwogICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yOwogICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMyOwogICAgfQogICAgdXBkYXRlKHZhbHVlcykgewogICAgICAgIGxldCBpID0gMDsKICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKXsKICAgICAgICAgICAgaWYgKHBhcnQgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgcGFydC5zZXRWYWx1ZSh2YWx1ZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkrKzsKICAgICAgICB9CiAgICAgICAgZm9yIChjb25zdCBwYXJ0MSBvZiB0aGlzLl9fcGFydHMpewogICAgICAgICAgICBpZiAocGFydDEgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgcGFydDEuY29tbWl0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBfY2xvbmUoKSB7CiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpc0NFUG9seWZpbGwgPyB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgOiBkb2N1bWVudC5pbXBvcnROb2RlKHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LCB0cnVlKTsKICAgICAgICBjb25zdCBzdGFjayA9IFtdOwogICAgICAgIGNvbnN0IHBhcnRzMiA9IHRoaXMudGVtcGxhdGUucGFydHM7CiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihmcmFnbWVudCwgMTMzLCBudWxsLCBmYWxzZSk7CiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7CiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7CiAgICAgICAgbGV0IHBhcnQ7CiAgICAgICAgbGV0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTsKICAgICAgICB3aGlsZShwYXJ0SW5kZXggPCBwYXJ0czIubGVuZ3RoKXsKICAgICAgICAgICAgcGFydCA9IHBhcnRzMltwYXJ0SW5kZXhdOwogICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCh2b2lkIDApOwogICAgICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGlsZShub2RlSW5kZXggPCBwYXJ0LmluZGV4KXsKICAgICAgICAgICAgICAgIG5vZGVJbmRleCsrOwogICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09ICJURU1QTEFURSIpIHsKICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgobm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpKSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgICAgICAgICAgIG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFydC50eXBlID09PSAibm9kZSIpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQyID0gdGhpcy5wcm9jZXNzb3IuaGFuZGxlVGV4dEV4cHJlc3Npb24odGhpcy5vcHRpb25zKTsKICAgICAgICAgICAgICAgIHBhcnQyLmluc2VydEFmdGVyTm9kZShub2RlLnByZXZpb3VzU2libGluZyk7CiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaChwYXJ0Mik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCguLi50aGlzLnByb2Nlc3Nvci5oYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhub2RlLCBwYXJ0Lm5hbWUsIHBhcnQuc3RyaW5ncywgdGhpcy5vcHRpb25zKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgfQogICAgICAgIGlmIChpc0NFUG9seWZpbGwpIHsKICAgICAgICAgICAgZG9jdW1lbnQuYWRvcHROb2RlKGZyYWdtZW50KTsKICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMudXBncmFkZShmcmFnbWVudCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmcmFnbWVudDsKICAgIH0KfQpjb25zdCBwb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzICYmIHRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3koImxpdC1odG1sIiwgewogICAgY3JlYXRlSFRNTDogKHMpPT5zCn0pOwpjb25zdCBjb21tZW50TWFya2VyID0gYCAke21hcmtlcn0gYDsKY2xhc3MgVGVtcGxhdGVSZXN1bHQgewogICAgY29uc3RydWN0b3Ioc3RyaW5nczEsIHZhbHVlcywgdHlwZTEsIHByb2Nlc3NvcjEpewogICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3MxOwogICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzOwogICAgICAgIHRoaXMudHlwZSA9IHR5cGUxOwogICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yMTsKICAgIH0KICAgIGdldEhUTUwoKSB7CiAgICAgICAgY29uc3QgbCA9IHRoaXMuc3RyaW5ncy5sZW5ndGggLSAxOwogICAgICAgIGxldCBodG1sMiA9ICIiOwogICAgICAgIGxldCBpc0NvbW1lbnRCaW5kaW5nID0gZmFsc2U7CiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnN0cmluZ3NbaV07CiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRPcGVuID0gcy5sYXN0SW5kZXhPZigiPCEtLSIpOwogICAgICAgICAgICBpc0NvbW1lbnRCaW5kaW5nID0gKGNvbW1lbnRPcGVuID4gLTEgfHwgaXNDb21tZW50QmluZGluZykgJiYgcy5pbmRleE9mKCItLT4iLCBjb21tZW50T3BlbiArIDEpID09PSAtMTsKICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlTWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7CiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVNYXRjaCA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgaHRtbDIgKz0gcyArIChpc0NvbW1lbnRCaW5kaW5nID8gY29tbWVudE1hcmtlciA6IG5vZGVNYXJrZXIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaHRtbDIgKz0gcy5zdWJzdHIoMCwgYXR0cmlidXRlTWF0Y2guaW5kZXgpICsgYXR0cmlidXRlTWF0Y2hbMV0gKyBhdHRyaWJ1dGVNYXRjaFsyXSArIGJvdW5kQXR0cmlidXRlU3VmZml4ICsgYXR0cmlidXRlTWF0Y2hbM10gKyBtYXJrZXI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaHRtbDIgKz0gdGhpcy5zdHJpbmdzW2xdOwogICAgICAgIHJldHVybiBodG1sMjsKICAgIH0KICAgIGdldFRlbXBsYXRlRWxlbWVudCgpIHsKICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIik7CiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRIVE1MKCk7CiAgICAgICAgaWYgKHBvbGljeSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHZhbHVlID0gcG9saWN5LmNyZWF0ZUhUTUwodmFsdWUpOwogICAgICAgIH0KICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB2YWx1ZTsKICAgICAgICByZXR1cm4gdGVtcGxhdGU7CiAgICB9Cn0KY2xhc3MgU1ZHVGVtcGxhdGVSZXN1bHQgZXh0ZW5kcyBUZW1wbGF0ZVJlc3VsdCB7CiAgICBnZXRIVE1MKCkgewogICAgICAgIHJldHVybiBgPHN2Zz4ke3N1cGVyLmdldEhUTUwoKX08L3N2Zz5gOwogICAgfQogICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkgewogICAgICAgIGNvbnN0IHRlbXBsYXRlID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7CiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQ7CiAgICAgICAgY29uc3Qgc3ZnRWxlbWVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZDsKICAgICAgICBjb250ZW50LnJlbW92ZUNoaWxkKHN2Z0VsZW1lbnQpOwogICAgICAgIHJlcGFyZW50Tm9kZXMoY29udGVudCwgc3ZnRWxlbWVudC5maXJzdENoaWxkKTsKICAgICAgICByZXR1cm4gdGVtcGxhdGU7CiAgICB9Cn0KY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWUpPT57CiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgISh0eXBlb2YgdmFsdWUgPT09ICJvYmplY3QiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gImZ1bmN0aW9uIik7Cn07CmNvbnN0IGlzSXRlcmFibGUgPSAodmFsdWUpPT57CiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgISEodmFsdWUgJiYgdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSk7Cn07CmNsYXNzIEF0dHJpYnV0ZUNvbW1pdHRlciB7CiAgICBjb25zdHJ1Y3RvcihlbGVtZW50MSwgbmFtZTMsIHN0cmluZ3MyKXsKICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTsKICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50MTsKICAgICAgICB0aGlzLm5hbWUgPSBuYW1lMzsKICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzMjsKICAgICAgICB0aGlzLnBhcnRzID0gW107CiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHN0cmluZ3MyLmxlbmd0aCAtIDE7IGkrKyl7CiAgICAgICAgICAgIHRoaXMucGFydHNbaV0gPSB0aGlzLl9jcmVhdGVQYXJ0KCk7CiAgICAgICAgfQogICAgfQogICAgX2NyZWF0ZVBhcnQoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVQYXJ0KHRoaXMpOwogICAgfQogICAgX2dldFZhbHVlKCkgewogICAgICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7CiAgICAgICAgY29uc3QgbCA9IHN0cmluZ3MubGVuZ3RoIC0gMTsKICAgICAgICBjb25zdCBwYXJ0czIgPSB0aGlzLnBhcnRzOwogICAgICAgIGlmIChsID09PSAxICYmIHN0cmluZ3NbMF0gPT09ICIiICYmIHN0cmluZ3NbMV0gPT09ICIiKSB7CiAgICAgICAgICAgIGNvbnN0IHYgPSBwYXJ0czJbMF0udmFsdWU7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gInN5bWJvbCIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAic3RyaW5nIiB8fCAhaXNJdGVyYWJsZSh2KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHY7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHRleHQgPSAiIjsKICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgdGV4dCArPSBzdHJpbmdzW2ldOwogICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHMyW2ldOwogICAgICAgICAgICBpZiAocGFydCAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBjb25zdCB2ID0gcGFydC52YWx1ZTsKICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2KSB8fCAhaXNJdGVyYWJsZSh2KSkgewogICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHYgPT09ICJzdHJpbmciID8gdiA6IFN0cmluZyh2KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHYpewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB0ID09PSAic3RyaW5nIiA/IHQgOiBTdHJpbmcodCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRleHQgKz0gc3RyaW5nc1tsXTsKICAgICAgICByZXR1cm4gdGV4dDsKICAgIH0KICAgIGNvbW1pdCgpIHsKICAgICAgICBpZiAodGhpcy5kaXJ0eSkgewogICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCB0aGlzLl9nZXRWYWx1ZSgpKTsKICAgICAgICB9CiAgICB9Cn0KY2xhc3MgQXR0cmlidXRlUGFydCB7CiAgICBjb25zdHJ1Y3Rvcihjb21taXR0ZXIpewogICAgICAgIHRoaXMudmFsdWUgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5jb21taXR0ZXIgPSBjb21taXR0ZXI7CiAgICB9CiAgICBzZXRWYWx1ZSh2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZSAhPT0gbm9DaGFuZ2UgJiYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHwgdmFsdWUgIT09IHRoaXMudmFsdWUpKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgaWYgKCFpc0RpcmVjdGl2ZSh2YWx1ZSkpIHsKICAgICAgICAgICAgICAgIHRoaXMuY29tbWl0dGVyLmRpcnR5ID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGNvbW1pdCgpIHsKICAgICAgICB3aGlsZShpc0RpcmVjdGl2ZSh0aGlzLnZhbHVlKSl7CiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZTIgPSB0aGlzLnZhbHVlOwogICAgICAgICAgICB0aGlzLnZhbHVlID0gbm9DaGFuZ2U7CiAgICAgICAgICAgIGRpcmVjdGl2ZTIodGhpcyk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBub0NoYW5nZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuY29tbWl0dGVyLmNvbW1pdCgpOwogICAgfQp9CmNsYXNzIE5vZGVQYXJ0IHsKICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMxKXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczE7CiAgICB9CiAgICBhcHBlbmRJbnRvKGNvbnRhaW5lcikgewogICAgICAgIHRoaXMuc3RhcnROb2RlID0gY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU1hcmtlcigpKTsKICAgICAgICB0aGlzLmVuZE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpOwogICAgfQogICAgaW5zZXJ0QWZ0ZXJOb2RlKHJlZikgewogICAgICAgIHRoaXMuc3RhcnROb2RlID0gcmVmOwogICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5uZXh0U2libGluZzsKICAgIH0KICAgIGFwcGVuZEludG9QYXJ0KHBhcnQpIHsKICAgICAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuc3RhcnROb2RlID0gY3JlYXRlTWFya2VyKCkpOwogICAgICAgIHBhcnQuX19pbnNlcnQodGhpcy5lbmROb2RlID0gY3JlYXRlTWFya2VyKCkpOwogICAgfQogICAgaW5zZXJ0QWZ0ZXJQYXJ0KHJlZikgewogICAgICAgIHJlZi5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTsKICAgICAgICB0aGlzLmVuZE5vZGUgPSByZWYuZW5kTm9kZTsKICAgICAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlOwogICAgfQogICAgc2V0VmFsdWUodmFsdWUpIHsKICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgaWYgKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB3aGlsZShpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSl7CiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZTIgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlOwogICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7CiAgICAgICAgICAgIGRpcmVjdGl2ZTIodGhpcyk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTsKICAgICAgICBpZiAodmFsdWUgPT09IG5vQ2hhbmdlKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgewogICAgICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHsKICAgICAgICAgICAgICAgIHRoaXMuX19jb21taXRUZXh0KHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdCkgewogICAgICAgICAgICB0aGlzLl9fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOb2RlKSB7CiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKGlzSXRlcmFibGUodmFsdWUpKSB7CiAgICAgICAgICAgIHRoaXMuX19jb21taXRJdGVyYWJsZSh2YWx1ZSk7CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbm90aGluZykgewogICAgICAgICAgICB0aGlzLnZhbHVlID0gbm90aGluZzsKICAgICAgICAgICAgdGhpcy5jbGVhcigpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZXh0KHZhbHVlKTsKICAgICAgICB9CiAgICB9CiAgICBfX2luc2VydChub2RlKSB7CiAgICAgICAgdGhpcy5lbmROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHRoaXMuZW5kTm9kZSk7CiAgICB9CiAgICBfX2NvbW1pdE5vZGUodmFsdWUpIHsKICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgdGhpcy5fX2luc2VydCh2YWx1ZSk7CiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgfQogICAgX19jb21taXRUZXh0KHZhbHVlKSB7CiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nOwogICAgICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICIiIDogdmFsdWU7CiAgICAgICAgY29uc3QgdmFsdWVBc1N0cmluZyA9IHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgPyB2YWx1ZSA6IFN0cmluZyh2YWx1ZSk7CiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuZW5kTm9kZS5wcmV2aW91c1NpYmxpbmcgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMykgewogICAgICAgICAgICBub2RlLmRhdGEgPSB2YWx1ZUFzU3RyaW5nOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlQXNTdHJpbmcpKTsKICAgICAgICB9CiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgfQogICAgX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSkgewogICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlRmFjdG9yeSh2YWx1ZSk7CiAgICAgICAgaWYgKHRoaXMudmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZUluc3RhbmNlICYmIHRoaXMudmFsdWUudGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUudXBkYXRlKHZhbHVlLnZhbHVlcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGVJbnN0YW5jZSh0ZW1wbGF0ZSwgdmFsdWUucHJvY2Vzc29yLCB0aGlzLm9wdGlvbnMpOwogICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGluc3RhbmNlLl9jbG9uZSgpOwogICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUodmFsdWUudmFsdWVzKTsKICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZnJhZ21lbnQpOwogICAgICAgICAgICB0aGlzLnZhbHVlID0gaW5zdGFuY2U7CiAgICAgICAgfQogICAgfQogICAgX19jb21taXRJdGVyYWJsZSh2YWx1ZSkgewogICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkgewogICAgICAgICAgICB0aGlzLnZhbHVlID0gW107CiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaXRlbVBhcnRzID0gdGhpcy52YWx1ZTsKICAgICAgICBsZXQgcGFydEluZGV4ID0gMDsKICAgICAgICBsZXQgaXRlbVBhcnQ7CiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKXsKICAgICAgICAgICAgaXRlbVBhcnQgPSBpdGVtUGFydHNbcGFydEluZGV4XTsKICAgICAgICAgICAgaWYgKGl0ZW1QYXJ0ID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMub3B0aW9ucyk7CiAgICAgICAgICAgICAgICBpdGVtUGFydHMucHVzaChpdGVtUGFydCk7CiAgICAgICAgICAgICAgICBpZiAocGFydEluZGV4ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgaXRlbVBhcnQuYXBwZW5kSW50b1BhcnQodGhpcyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGl0ZW1QYXJ0Lmluc2VydEFmdGVyUGFydChpdGVtUGFydHNbcGFydEluZGV4IC0gMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGl0ZW1QYXJ0LnNldFZhbHVlKGl0ZW0pOwogICAgICAgICAgICBpdGVtUGFydC5jb21taXQoKTsKICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgfQogICAgICAgIGlmIChwYXJ0SW5kZXggPCBpdGVtUGFydHMubGVuZ3RoKSB7CiAgICAgICAgICAgIGl0ZW1QYXJ0cy5sZW5ndGggPSBwYXJ0SW5kZXg7CiAgICAgICAgICAgIHRoaXMuY2xlYXIoaXRlbVBhcnQgJiYgaXRlbVBhcnQuZW5kTm9kZSk7CiAgICAgICAgfQogICAgfQogICAgY2xlYXIoc3RhcnROb2RlID0gdGhpcy5zdGFydE5vZGUpIHsKICAgICAgICByZW1vdmVOb2Rlcyh0aGlzLnN0YXJ0Tm9kZS5wYXJlbnROb2RlLCBzdGFydE5vZGUubmV4dFNpYmxpbmcsIHRoaXMuZW5kTm9kZSk7CiAgICB9Cn0KY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQgewogICAgY29uc3RydWN0b3IoZWxlbWVudDIsIG5hbWUxLCBzdHJpbmdzMyl7CiAgICAgICAgdGhpcy52YWx1ZSA9IHZvaWQgMDsKICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdm9pZCAwOwogICAgICAgIGlmIChzdHJpbmdzMy5sZW5ndGggIT09IDIgfHwgc3RyaW5nczNbMF0gIT09ICIiIHx8IHN0cmluZ3MzWzFdICE9PSAiIikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkJvb2xlYW4gYXR0cmlidXRlcyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb24iKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDI7CiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTE7CiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5nczM7CiAgICB9CiAgICBzZXRWYWx1ZSh2YWx1ZSkgewogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTsKICAgIH0KICAgIGNvbW1pdCgpIHsKICAgICAgICB3aGlsZShpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSl7CiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZTIgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlOwogICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7CiAgICAgICAgICAgIGRpcmVjdGl2ZTIodGhpcyk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLl9fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZhbHVlID0gISF0aGlzLl9fcGVuZGluZ1ZhbHVlOwogICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCAiIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7CiAgICB9Cn0KY2xhc3MgUHJvcGVydHlDb21taXR0ZXIgZXh0ZW5kcyBBdHRyaWJ1dGVDb21taXR0ZXIgewogICAgY29uc3RydWN0b3IoZWxlbWVudDMsIG5hbWUyLCBzdHJpbmdzNCl7CiAgICAgICAgc3VwZXIoZWxlbWVudDMsIG5hbWUyLCBzdHJpbmdzNCk7CiAgICAgICAgdGhpcy5zaW5nbGUgPSBzdHJpbmdzNC5sZW5ndGggPT09IDIgJiYgc3RyaW5nczRbMF0gPT09ICIiICYmIHN0cmluZ3M0WzFdID09PSAiIjsKICAgIH0KICAgIF9jcmVhdGVQYXJ0KCkgewogICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlQYXJ0KHRoaXMpOwogICAgfQogICAgX2dldFZhbHVlKCkgewogICAgICAgIGlmICh0aGlzLnNpbmdsZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJ0c1swXS52YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRWYWx1ZSgpOwogICAgfQogICAgY29tbWl0KCkgewogICAgICAgIGlmICh0aGlzLmRpcnR5KSB7CiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5lbGVtZW50W3RoaXMubmFtZV0gPSB0aGlzLl9nZXRWYWx1ZSgpOwogICAgICAgIH0KICAgIH0KfQpjbGFzcyBQcm9wZXJ0eVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHsKfQpsZXQgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7CigoKT0+ewogICAgdHJ5IHsKICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgICBnZXQgY2FwdHVyZSAoKSB7CiAgICAgICAgICAgICAgICBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigidGVzdCIsIG9wdGlvbnMsIG9wdGlvbnMpOwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJ0ZXN0Iiwgb3B0aW9ucywgb3B0aW9ucyk7CiAgICB9IGNhdGNoIChfZSkgewogICAgfQp9KSgpOwpjbGFzcyBFdmVudFBhcnQgewogICAgY29uc3RydWN0b3IoZWxlbWVudDQsIGV2ZW50TmFtZSwgZXZlbnRDb250ZXh0KXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDQ7CiAgICAgICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7CiAgICAgICAgdGhpcy5ldmVudENvbnRleHQgPSBldmVudENvbnRleHQ7CiAgICAgICAgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQgPSAoZSk9PnRoaXMuaGFuZGxlRXZlbnQoZSkKICAgICAgICA7CiAgICB9CiAgICBzZXRWYWx1ZSh2YWx1ZSkgewogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTsKICAgIH0KICAgIGNvbW1pdCgpIHsKICAgICAgICB3aGlsZShpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSl7CiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZTIgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlOwogICAgICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7CiAgICAgICAgICAgIGRpcmVjdGl2ZTIodGhpcyk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLl9fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5ld0xpc3RlbmVyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTsKICAgICAgICBjb25zdCBvbGRMaXN0ZW5lciA9IHRoaXMudmFsdWU7CiAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciA9PSBudWxsIHx8IG9sZExpc3RlbmVyICE9IG51bGwgJiYgKG5ld0xpc3RlbmVyLmNhcHR1cmUgIT09IG9sZExpc3RlbmVyLmNhcHR1cmUgfHwgbmV3TGlzdGVuZXIub25jZSAhPT0gb2xkTGlzdGVuZXIub25jZSB8fCBuZXdMaXN0ZW5lci5wYXNzaXZlICE9PSBvbGRMaXN0ZW5lci5wYXNzaXZlKTsKICAgICAgICBjb25zdCBzaG91bGRBZGRMaXN0ZW5lciA9IG5ld0xpc3RlbmVyICE9IG51bGwgJiYgKG9sZExpc3RlbmVyID09IG51bGwgfHwgc2hvdWxkUmVtb3ZlTGlzdGVuZXIpOwogICAgICAgIGlmIChzaG91bGRSZW1vdmVMaXN0ZW5lcikgewogICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNob3VsZEFkZExpc3RlbmVyKSB7CiAgICAgICAgICAgIHRoaXMuX19vcHRpb25zID0gZ2V0T3B0aW9ucyhuZXdMaXN0ZW5lcik7CiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCwgdGhpcy5fX29wdGlvbnMpOwogICAgICAgIH0KICAgICAgICB0aGlzLnZhbHVlID0gbmV3TGlzdGVuZXI7CiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlOwogICAgfQogICAgaGFuZGxlRXZlbnQoZXZlbnQpIHsKICAgICAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgdGhpcy52YWx1ZS5jYWxsKHRoaXMuZXZlbnRDb250ZXh0IHx8IHRoaXMuZWxlbWVudCwgZXZlbnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUuaGFuZGxlRXZlbnQoZXZlbnQpOwogICAgICAgIH0KICAgIH0KfQpjb25zdCBnZXRPcHRpb25zID0gKG8pPT5vICYmIChldmVudE9wdGlvbnNTdXBwb3J0ZWQgPyB7CiAgICAgICAgY2FwdHVyZTogby5jYXB0dXJlLAogICAgICAgIHBhc3NpdmU6IG8ucGFzc2l2ZSwKICAgICAgICBvbmNlOiBvLm9uY2UKICAgIH0gOiBvLmNhcHR1cmUpCjsKY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIHsKICAgIGhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MsIG9wdGlvbnMpIHsKICAgICAgICBjb25zdCBwcmVmaXggPSBuYW1lWzBdOwogICAgICAgIGlmIChwcmVmaXggPT09ICIuIikgewogICAgICAgICAgICBjb25zdCBjb21taXR0ZXIyID0gbmV3IFByb3BlcnR5Q29tbWl0dGVyKGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpOwogICAgICAgICAgICByZXR1cm4gY29tbWl0dGVyMi5wYXJ0czsKICAgICAgICB9CiAgICAgICAgaWYgKHByZWZpeCA9PT0gIkAiKSB7CiAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICBuZXcgRXZlbnRQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIG9wdGlvbnMuZXZlbnRDb250ZXh0KQogICAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgICBpZiAocHJlZml4ID09PSAiPyIpIHsKICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgIG5ldyBCb29sZWFuQXR0cmlidXRlUGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKQogICAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpOwogICAgICAgIHJldHVybiBjb21taXR0ZXIucGFydHM7CiAgICB9CiAgICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7CiAgICAgICAgcmV0dXJuIG5ldyBOb2RlUGFydChvcHRpb25zKTsKICAgIH0KfQpjb25zdCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IgPSBuZXcgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKCk7CmZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQpIHsKICAgIGxldCB0ZW1wbGF0ZUNhY2hlID0gdGVtcGxhdGVDYWNoZXMuZ2V0KHJlc3VsdC50eXBlKTsKICAgIGlmICh0ZW1wbGF0ZUNhY2hlID09PSB2b2lkIDApIHsKICAgICAgICB0ZW1wbGF0ZUNhY2hlID0gewogICAgICAgICAgICBzdHJpbmdzQXJyYXk6IG5ldyBXZWFrTWFwKCksCiAgICAgICAgICAgIGtleVN0cmluZzogbmV3IE1hcCgpCiAgICAgICAgfTsKICAgICAgICB0ZW1wbGF0ZUNhY2hlcy5zZXQocmVzdWx0LnR5cGUsIHRlbXBsYXRlQ2FjaGUpOwogICAgfQogICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTsKICAgIGlmICh0ZW1wbGF0ZSAhPT0gdm9pZCAwKSB7CiAgICAgICAgcmV0dXJuIHRlbXBsYXRlOwogICAgfQogICAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpOwogICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTsKICAgIGlmICh0ZW1wbGF0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0LCByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCkpOwogICAgICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTsKICAgIH0KICAgIHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpOwogICAgcmV0dXJuIHRlbXBsYXRlOwp9CmNvbnN0IHRlbXBsYXRlQ2FjaGVzID0gbmV3IE1hcCgpOwpjb25zdCBwYXJ0cyA9IG5ldyBXZWFrTWFwKCk7CmNvbnN0IHJlbmRlciA9IChyZXN1bHQsIGNvbnRhaW5lciwgb3B0aW9ucyk9PnsKICAgIGxldCBwYXJ0ID0gcGFydHMuZ2V0KGNvbnRhaW5lcik7CiAgICBpZiAocGFydCA9PT0gdm9pZCAwKSB7CiAgICAgICAgcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7CiAgICAgICAgcGFydHMuc2V0KGNvbnRhaW5lciwgcGFydCA9IG5ldyBOb2RlUGFydChPYmplY3QuYXNzaWduKHsKICAgICAgICAgICAgdGVtcGxhdGVGYWN0b3J5CiAgICAgICAgfSwgb3B0aW9ucykpKTsKICAgICAgICBwYXJ0LmFwcGVuZEludG8oY29udGFpbmVyKTsKICAgIH0KICAgIHBhcnQuc2V0VmFsdWUocmVzdWx0KTsKICAgIHBhcnQuY29tbWl0KCk7Cn07CmlmICh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIikgewogICAgKHdpbmRvd1sibGl0SHRtbFZlcnNpb25zIl0gfHwgKHdpbmRvd1sibGl0SHRtbFZlcnNpb25zIl0gPSBbXSkpLnB1c2goIjEuNC4xIik7Cn0KY29uc3QgaHRtbCA9IChzdHJpbmdzLCAuLi52YWx1ZXMpPT5uZXcgVGVtcGxhdGVSZXN1bHQoc3RyaW5ncywgdmFsdWVzLCAiaHRtbCIsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcikKOwpjb25zdCBzdmcgPSAoc3RyaW5ncywgLi4udmFsdWVzKT0+bmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgInN2ZyIsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcikKOwp2YXIgX2E7CndpbmRvdy5KU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5ID0gKHByb3AsIF9vYmopPT5wcm9wCjsKY29uc3QgZGVmYXVsdENvbnZlcnRlciA9IHsKICAgIHRvQXR0cmlidXRlICh2YWx1ZSwgdHlwZSkgewogICAgICAgIHN3aXRjaCh0eXBlKXsKICAgICAgICAgICAgY2FzZSBCb29sZWFuOgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gIiIgOiBudWxsOwogICAgICAgICAgICBjYXNlIE9iamVjdDoKICAgICAgICAgICAgY2FzZSBBcnJheToKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCiAgICBmcm9tQXR0cmlidXRlICh2YWx1ZSwgdHlwZSkgewogICAgICAgIHN3aXRjaCh0eXBlKXsKICAgICAgICAgICAgY2FzZSBCb29sZWFuOgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsOwogICAgICAgICAgICBjYXNlIE51bWJlcjoKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiBOdW1iZXIodmFsdWUpOwogICAgICAgICAgICBjYXNlIE9iamVjdDoKICAgICAgICAgICAgY2FzZSBBcnJheToKICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQp9Owpjb25zdCBub3RFcXVhbCA9ICh2YWx1ZSwgb2xkKT0+ewogICAgcmV0dXJuIG9sZCAhPT0gdmFsdWUgJiYgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSk7Cn07CmNvbnN0IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uID0gewogICAgYXR0cmlidXRlOiB0cnVlLAogICAgdHlwZTogU3RyaW5nLAogICAgY29udmVydGVyOiBkZWZhdWx0Q29udmVydGVyLAogICAgcmVmbGVjdDogZmFsc2UsCiAgICBoYXNDaGFuZ2VkOiBub3RFcXVhbAp9Owpjb25zdCBTVEFURV9IQVNfVVBEQVRFRCA9IDE7CmNvbnN0IFNUQVRFX1VQREFURV9SRVFVRVNURUQgPSAxIDw8IDI7CmNvbnN0IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFID0gMSA8PCAzOwpjb25zdCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZID0gMSA8PCA0Owpjb25zdCBmaW5hbGl6ZWQgPSAiZmluYWxpemVkIjsKY2xhc3MgVXBkYXRpbmdFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQgewogICAgY29uc3RydWN0b3IoKXsKICAgICAgICBzdXBlcigpOwogICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpOwogICAgfQogICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7CiAgICAgICAgdGhpcy5maW5hbGl6ZSgpOwogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTsKICAgICAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgodiwgcCk9PnsKICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwLCB2KTsKICAgICAgICAgICAgaWYgKGF0dHIgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5zZXQoYXR0ciwgcCk7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gYXR0cmlidXRlczsKICAgIH0KICAgIHN0YXRpYyBfZW5zdXJlQ2xhc3NQcm9wZXJ0aWVzKCkgewogICAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCJfY2xhc3NQcm9wZXJ0aWVzIiwgdGhpcykpKSB7CiAgICAgICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyA9IG5ldyBNYXAoKTsKICAgICAgICAgICAgY29uc3Qgc3VwZXJQcm9wZXJ0aWVzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9jbGFzc1Byb3BlcnRpZXM7CiAgICAgICAgICAgIGlmIChzdXBlclByb3BlcnRpZXMgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgc3VwZXJQcm9wZXJ0aWVzLmZvckVhY2goKHYsIGspPT50aGlzLl9jbGFzc1Byb3BlcnRpZXMuc2V0KGssIHYpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgc3RhdGljIGNyZWF0ZVByb3BlcnR5KG5hbWUsIG9wdGlvbnMgPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikgewogICAgICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpOwogICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcy5zZXQobmFtZSwgb3B0aW9ucyk7CiAgICAgICAgaWYgKG9wdGlvbnMubm9BY2Nlc3NvciB8fCB0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGtleSA9IHR5cGVvZiBuYW1lID09PSAic3ltYm9sIiA/IFN5bWJvbCgpIDogYF9fJHtuYW1lfWA7CiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKG5hbWUsIGtleSwgb3B0aW9ucyk7CiAgICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHZvaWQgMCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsIG5hbWUsIGRlc2NyaXB0b3IpOwogICAgICAgIH0KICAgIH0KICAgIHN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgZ2V0ICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2tleV07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldCAodmFsdWUpIHsKICAgICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpc1tuYW1lXTsKICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlSW50ZXJuYWwobmFtZSwgb2xkVmFsdWUsIG9wdGlvbnMpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUKICAgICAgICB9OwogICAgfQogICAgc3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyhuYW1lKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzUHJvcGVydGllcyAmJiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuZ2V0KG5hbWUpIHx8IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uOwogICAgfQogICAgc3RhdGljIGZpbmFsaXplKCkgewogICAgICAgIGNvbnN0IHN1cGVyQ3RvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTsKICAgICAgICBpZiAoIXN1cGVyQ3Rvci5oYXNPd25Qcm9wZXJ0eShmaW5hbGl6ZWQpKSB7CiAgICAgICAgICAgIHN1cGVyQ3Rvci5maW5hbGl6ZSgpOwogICAgICAgIH0KICAgICAgICB0aGlzW2ZpbmFsaXplZF0gPSB0cnVlOwogICAgICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpOwogICAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAgPSBuZXcgTWFwKCk7CiAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgicHJvcGVydGllcyIsIHRoaXMpKSkgewogICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcGVydGllczsKICAgICAgICAgICAgY29uc3QgcHJvcEtleXMgPSBbCiAgICAgICAgICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm9wcyksCiAgICAgICAgICAgICAgICAuLi50eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gImZ1bmN0aW9uIiA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcHMpIDogW10KICAgICAgICAgICAgXTsKICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHByb3BLZXlzKXsKICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydHkocCwgcHJvcHNbcF0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgc3RhdGljIF9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkobmFtZSwgb3B0aW9ucykgewogICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG9wdGlvbnMuYXR0cmlidXRlOwogICAgICAgIHJldHVybiBhdHRyaWJ1dGUgPT09IGZhbHNlID8gdm9pZCAwIDogdHlwZW9mIGF0dHJpYnV0ZSA9PT0gInN0cmluZyIgPyBhdHRyaWJ1dGUgOiB0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOiB2b2lkIDA7CiAgICB9CiAgICBzdGF0aWMgX3ZhbHVlSGFzQ2hhbmdlZCh2YWx1ZSwgb2xkLCBoYXNDaGFuZ2VkID0gbm90RXF1YWwpIHsKICAgICAgICByZXR1cm4gaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkKTsKICAgIH0KICAgIHN0YXRpYyBfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpIHsKICAgICAgICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlOwogICAgICAgIGNvbnN0IGNvbnZlcnRlciA9IG9wdGlvbnMuY29udmVydGVyIHx8IGRlZmF1bHRDb252ZXJ0ZXI7CiAgICAgICAgY29uc3QgZnJvbUF0dHJpYnV0ZSA9IHR5cGVvZiBjb252ZXJ0ZXIgPT09ICJmdW5jdGlvbiIgPyBjb252ZXJ0ZXIgOiBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gZnJvbUF0dHJpYnV0ZSA/IGZyb21BdHRyaWJ1dGUodmFsdWUsIHR5cGUpIDogdmFsdWU7CiAgICB9CiAgICBzdGF0aWMgX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucykgewogICAgICAgIGlmIChvcHRpb25zLnJlZmxlY3QgPT09IHZvaWQgMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGU7CiAgICAgICAgY29uc3QgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXI7CiAgICAgICAgY29uc3QgdG9BdHRyaWJ1dGUgPSBjb252ZXJ0ZXIgJiYgY29udmVydGVyLnRvQXR0cmlidXRlIHx8IGRlZmF1bHRDb252ZXJ0ZXIudG9BdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHRvQXR0cmlidXRlKHZhbHVlLCB0eXBlKTsKICAgIH0KICAgIGluaXRpYWxpemUoKSB7CiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSAwOwogICAgICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzKT0+dGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHJlcwogICAgICAgICk7CiAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICAgICAgdGhpcy5fc2F2ZUluc3RhbmNlUHJvcGVydGllcygpOwogICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZUludGVybmFsKCk7CiAgICB9CiAgICBfc2F2ZUluc3RhbmNlUHJvcGVydGllcygpIHsKICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgoX3YsIHApPT57CiAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHApKSB7CiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbcF07CiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1twXTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzLnNldChwLCB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIF9hcHBseUluc3RhbmNlUHJvcGVydGllcygpIHsKICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMuZm9yRWFjaCgodiwgcCk9PnRoaXNbcF0gPSB2CiAgICAgICAgKTsKICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMgPSB2b2lkIDA7CiAgICB9CiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHsKICAgICAgICB0aGlzLmVuYWJsZVVwZGF0aW5nKCk7CiAgICB9CiAgICBlbmFibGVVcGRhdGluZygpIHsKICAgICAgICBpZiAodGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIoKTsKICAgICAgICAgICAgdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHZvaWQgMDsKICAgICAgICB9CiAgICB9CiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHsKICAgIH0KICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7CiAgICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHsKICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUobmFtZSwgdmFsdWUsIG9wdGlvbnMgPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikgewogICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0IGF0dHIgPSBjdG9yLl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7CiAgICAgICAgaWYgKGF0dHIgIT09IHZvaWQgMCkgewogICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBjdG9yLl9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoYXR0clZhbHVlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7CiAgICAgICAgICAgIGlmIChhdHRyVmFsdWUgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyVmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7CiAgICAgICAgfQogICAgfQogICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpIHsKICAgICAgICBpZiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0IHByb3BOYW1lID0gY3Rvci5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5nZXQobmFtZSk7CiAgICAgICAgaWYgKHByb3BOYW1lICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHByb3BOYW1lKTsKICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7CiAgICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gY3Rvci5fcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7CiAgICAgICAgfQogICAgfQogICAgcmVxdWVzdFVwZGF0ZUludGVybmFsKG5hbWUsIG9sZFZhbHVlLCBvcHRpb25zKSB7CiAgICAgICAgbGV0IHNob3VsZFJlcXVlc3RVcGRhdGUgPSB0cnVlOwogICAgICAgIGlmIChuYW1lICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7CiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IGN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKG5hbWUpOwogICAgICAgICAgICBpZiAoY3Rvci5fdmFsdWVIYXNDaGFuZ2VkKHRoaXNbbmFtZV0sIG9sZFZhbHVlLCBvcHRpb25zLmhhc0NoYW5nZWQpKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLnNldChuYW1lLCBvbGRWYWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWZsZWN0ID09PSB0cnVlICYmICEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZKSkgewogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zZXQobmFtZSwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzaG91bGRSZXF1ZXN0VXBkYXRlID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUgJiYgc2hvdWxkUmVxdWVzdFVwZGF0ZSkgewogICAgICAgICAgICB0aGlzLl91cGRhdGVQcm9taXNlID0gdGhpcy5fZW5xdWV1ZVVwZGF0ZSgpOwogICAgICAgIH0KICAgIH0KICAgIHJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpIHsKICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGVJbnRlcm5hbChuYW1lLCBvbGRWYWx1ZSk7CiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlQ29tcGxldGU7CiAgICB9CiAgICBhc3luYyBfZW5xdWV1ZVVwZGF0ZSgpIHsKICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfVVBEQVRFX1JFUVVFU1RFRDsKICAgICAgICB0cnkgewogICAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVQcm9taXNlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtVXBkYXRlKCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIGF3YWl0IHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGU7CiAgICB9CiAgICBnZXQgX2hhc1JlcXVlc3RlZFVwZGF0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9VUERBVEVfUkVRVUVTVEVEOwogICAgfQogICAgZ2V0IGhhc1VwZGF0ZWQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVN0YXRlICYgMTsKICAgIH0KICAgIHBlcmZvcm1VcGRhdGUoKSB7CiAgICAgICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHRoaXMuX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzKCk7CiAgICAgICAgfQogICAgICAgIGxldCBzaG91bGRVcGRhdGUgPSBmYWxzZTsKICAgICAgICBjb25zdCBjaGFuZ2VkUHJvcGVydGllcyA9IHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRoaXMuc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTsKICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkgewogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICAgIGlmIChzaG91bGRVcGRhdGUpIHsKICAgICAgICAgICAgaWYgKCEodGhpcy5fdXBkYXRlU3RhdGUgJiAxKSkgewogICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0hBU19VUERBVEVEOwogICAgICAgICAgICAgICAgdGhpcy5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7CiAgICAgICAgfQogICAgfQogICAgX21hcmtVcGRhdGVkKCkgewogICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfVVBEQVRFX1JFUVVFU1RFRDsKICAgIH0KICAgIGdldCB1cGRhdGVDb21wbGV0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXBkYXRlQ29tcGxldGUoKTsKICAgIH0KICAgIF9nZXRVcGRhdGVDb21wbGV0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpOwogICAgfQogICAgZ2V0VXBkYXRlQ29tcGxldGUoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVByb21pc2U7CiAgICB9CiAgICBzaG91bGRVcGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICB1cGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICAgICAgaWYgKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzICE9PSB2b2lkIDAgJiYgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2l6ZSA+IDApIHsKICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuZm9yRWFjaCgodiwgayk9PnRoaXMuX3Byb3BlcnR5VG9BdHRyaWJ1dGUoaywgdGhpc1trXSwgdikKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7CiAgICB9CiAgICB1cGRhdGVkKF9jaGFuZ2VkUHJvcGVydGllcykgewogICAgfQogICAgZmlyc3RVcGRhdGVkKF9jaGFuZ2VkUHJvcGVydGllcykgewogICAgfQp9Cl9hID0gZmluYWxpemVkOwpVcGRhdGluZ0VsZW1lbnRbX2FdID0gdHJ1ZTsKY29uc3QgbGVnYWN5Q3VzdG9tRWxlbWVudCA9ICh0YWdOYW1lLCBjbGF6eik9PnsKICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgY2xhenopOwogICAgcmV0dXJuIGNsYXp6Owp9Owpjb25zdCBzdGFuZGFyZEN1c3RvbUVsZW1lbnQgPSAodGFnTmFtZSwgZGVzY3JpcHRvcik9PnsKICAgIGNvbnN0IHsga2luZCAsIGVsZW1lbnRzICB9ID0gZGVzY3JpcHRvcjsKICAgIHJldHVybiB7CiAgICAgICAga2luZCwKICAgICAgICBlbGVtZW50cywKICAgICAgICBmaW5pc2hlciAoY2xhenopIHsKICAgICAgICAgICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBjbGF6eik7CiAgICAgICAgfQogICAgfTsKfTsKY29uc3Qgc3RhbmRhcmRQcm9wZXJ0eSA9IChvcHRpb25zLCBlbGVtZW50KT0+ewogICAgaWYgKGVsZW1lbnQua2luZCA9PT0gIm1ldGhvZCIgJiYgZWxlbWVudC5kZXNjcmlwdG9yICYmICEoInZhbHVlIiBpbiBlbGVtZW50LmRlc2NyaXB0b3IpKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7CiAgICAgICAgfSwgZWxlbWVudCksIHsKICAgICAgICAgICAgZmluaXNoZXIgKGNsYXp6KSB7CiAgICAgICAgICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAga2luZDogImZpZWxkIiwKICAgICAgICAgICAga2V5OiBTeW1ib2woKSwKICAgICAgICAgICAgcGxhY2VtZW50OiAib3duIiwKICAgICAgICAgICAgZGVzY3JpcHRvcjogewogICAgICAgICAgICB9LAogICAgICAgICAgICBpbml0aWFsaXplciAoKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzW2VsZW1lbnQua2V5XSA9IGVsZW1lbnQuaW5pdGlhbGl6ZXIuY2FsbCh0aGlzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmluaXNoZXIgKGNsYXp6KSB7CiAgICAgICAgICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQp9Owpjb25zdCBsZWdhY3lQcm9wZXJ0eSA9IChvcHRpb25zLCBwcm90bywgbmFtZSk9PnsKICAgIHByb3RvLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG5hbWUsIG9wdGlvbnMpOwp9Owpjb25zdCBsZWdhY3lRdWVyeSA9IChkZXNjcmlwdG9yLCBwcm90bywgbmFtZSk9PnsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgbmFtZSwgZGVzY3JpcHRvcik7Cn07CmNvbnN0IHN0YW5kYXJkRXZlbnRPcHRpb25zID0gKG9wdGlvbnMsIGVsZW1lbnQpPT57CiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsKICAgIH0sIGVsZW1lbnQpLCB7CiAgICAgICAgZmluaXNoZXIgKGNsYXp6KSB7CiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY2xhenoucHJvdG90eXBlW2VsZW1lbnQua2V5XSwgb3B0aW9ucyk7CiAgICAgICAgfQogICAgfSk7Cn07CmNvbnN0IGxlZ2FjeUV2ZW50T3B0aW9ucyA9IChvcHRpb25zLCBwcm90bywgbmFtZSk9PnsKICAgIE9iamVjdC5hc3NpZ24ocHJvdG9bbmFtZV0sIG9wdGlvbnMpOwp9Owpjb25zdCBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMgPSB3aW5kb3cuU2hhZG93Um9vdCAmJiAod2luZG93LlNoYWR5Q1NTID09PSB2b2lkIDAgfHwgd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykgJiYgImFkb3B0ZWRTdHlsZVNoZWV0cyIgaW4gRG9jdW1lbnQucHJvdG90eXBlICYmICJyZXBsYWNlIiBpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZTsKY29uc3QgY29uc3RydWN0aW9uVG9rZW4gPSBTeW1ib2woKTsKY2xhc3MgQ1NTUmVzdWx0IHsKICAgIGNvbnN0cnVjdG9yKGNzc1RleHQsIHNhZmVUb2tlbil7CiAgICAgICAgaWYgKHNhZmVUb2tlbiAhPT0gY29uc3RydWN0aW9uVG9rZW4pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLiIpOwogICAgICAgIH0KICAgICAgICB0aGlzLmNzc1RleHQgPSBjc3NUZXh0OwogICAgfQogICAgZ2V0IHN0eWxlU2hlZXQoKSB7CiAgICAgICAgaWYgKHRoaXMuX3N0eWxlU2hlZXQgPT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZVNoZWV0ID0gbmV3IENTU1N0eWxlU2hlZXQoKTsKICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl9zdHlsZVNoZWV0OwogICAgfQogICAgdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3NzVGV4dDsKICAgIH0KfQpjb25zdCB1bnNhZmVDU1MgPSAodmFsdWUpPT57CiAgICByZXR1cm4gbmV3IENTU1Jlc3VsdChTdHJpbmcodmFsdWUpLCBjb25zdHJ1Y3Rpb25Ub2tlbik7Cn07CmNvbnN0IHRleHRGcm9tQ1NTUmVzdWx0ID0gKHZhbHVlKT0+ewogICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQ1NTUmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHZhbHVlLmNzc1RleHQ7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gIm51bWJlciIpIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6ICR7dmFsdWV9LiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dAogICAgICAgICAgICB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuYCk7CiAgICB9Cn07CmNvbnN0IGNzcyA9IChzdHJpbmdzLCAuLi52YWx1ZXMpPT57CiAgICBjb25zdCBjc3NUZXh0ID0gdmFsdWVzLnJlZHVjZSgoYWNjLCB2LCBpZHgpPT5hY2MgKyB0ZXh0RnJvbUNTU1Jlc3VsdCh2KSArIHN0cmluZ3NbaWR4ICsgMV0KICAgICwgc3RyaW5nc1swXSk7CiAgICByZXR1cm4gbmV3IENTU1Jlc3VsdChjc3NUZXh0LCBjb25zdHJ1Y3Rpb25Ub2tlbik7Cn07Cih3aW5kb3dbImxpdEVsZW1lbnRWZXJzaW9ucyJdIHx8ICh3aW5kb3dbImxpdEVsZW1lbnRWZXJzaW9ucyJdID0gW10pKS5wdXNoKCIyLjUuMSIpOwpjb25zdCByZW5kZXJOb3RJbXBsZW1lbnRlZCA9IHsKfTsKY2xhc3MgTGl0RWxlbWVudCBleHRlbmRzIFVwZGF0aW5nRWxlbWVudCB7CiAgICBzdGF0aWMgZ2V0U3R5bGVzKCkgewogICAgICAgIHJldHVybiB0aGlzLnN0eWxlczsKICAgIH0KICAgIHN0YXRpYyBfZ2V0VW5pcXVlU3R5bGVzKCkgewogICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoIl9zdHlsZXMiLCB0aGlzKSkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCB1c2VyU3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTsKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh1c2VyU3R5bGVzKSkgewogICAgICAgICAgICBjb25zdCBhZGRTdHlsZXMgPSAoc3R5bGVzMiwgc2V0Mik9PnN0eWxlczIucmVkdWNlUmlnaHQoKHNldDMsIHMpPT5BcnJheS5pc0FycmF5KHMpID8gYWRkU3R5bGVzKHMsIHNldDMpIDogKHNldDMuYWRkKHMpLCBzZXQzKQogICAgICAgICAgICAgICAgLCBzZXQyKQogICAgICAgICAgICA7CiAgICAgICAgICAgIGNvbnN0IHNldCA9IGFkZFN0eWxlcyh1c2VyU3R5bGVzLCBuZXcgU2V0KCkpOwogICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBbXTsKICAgICAgICAgICAgc2V0LmZvckVhY2goKHYpPT5zdHlsZXMudW5zaGlmdCh2KQogICAgICAgICAgICApOwogICAgICAgICAgICB0aGlzLl9zdHlsZXMgPSBzdHlsZXM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0gdXNlclN0eWxlcyA9PT0gdm9pZCAwID8gW10gOiBbCiAgICAgICAgICAgICAgICB1c2VyU3R5bGVzCiAgICAgICAgICAgIF07CiAgICAgICAgfQogICAgICAgIHRoaXMuX3N0eWxlcyA9IHRoaXMuX3N0eWxlcy5tYXAoKHMpPT57CiAgICAgICAgICAgIGlmIChzIGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldCAmJiAhc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjc3NUZXh0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocy5jc3NSdWxlcykucmVkdWNlKChjc3MyLCBydWxlKT0+Y3NzMiArIHJ1bGUuY3NzVGV4dAogICAgICAgICAgICAgICAgLCAiIik7CiAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlQ1NTKGNzc1RleHQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgIH0pOwogICAgfQogICAgaW5pdGlhbGl6ZSgpIHsKICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7CiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0VW5pcXVlU3R5bGVzKCk7CiAgICAgICAgdGhpcy5yZW5kZXJSb290ID0gdGhpcy5jcmVhdGVSZW5kZXJSb290KCk7CiAgICAgICAgaWYgKHdpbmRvdy5TaGFkb3dSb290ICYmIHRoaXMucmVuZGVyUm9vdCBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290KSB7CiAgICAgICAgICAgIHRoaXMuYWRvcHRTdHlsZXMoKTsKICAgICAgICB9CiAgICB9CiAgICBjcmVhdGVSZW5kZXJSb290KCkgewogICAgICAgIHJldHVybiB0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTsKICAgIH0KICAgIGFkb3B0U3R5bGVzKCkgewogICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuY29uc3RydWN0b3IuX3N0eWxlczsKICAgICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgIT09IHZvaWQgMCAmJiAhd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykgewogICAgICAgICAgICB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0ucHJlcGFyZUFkb3B0ZWRDc3NUZXh0KHN0eWxlcy5tYXAoKHMpPT5zLmNzc1RleHQKICAgICAgICAgICAgKSwgdGhpcy5sb2NhbE5hbWUpOwogICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyUm9vdC5hZG9wdGVkU3R5bGVTaGVldHMgPSBzdHlsZXMubWFwKChzKT0+cyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgPyBzIDogcy5zdHlsZVNoZWV0CiAgICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHsKICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpOwogICAgICAgIGlmICh0aGlzLmhhc1VwZGF0ZWQgJiYgd2luZG93LlNoYWR5Q1NTICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTsKICAgICAgICB9CiAgICB9CiAgICB1cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpIHsKICAgICAgICBjb25zdCB0ZW1wbGF0ZVJlc3VsdCA9IHRoaXMucmVuZGVyKCk7CiAgICAgICAgc3VwZXIudXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTsKICAgICAgICBpZiAodGVtcGxhdGVSZXN1bHQgIT09IHJlbmRlck5vdEltcGxlbWVudGVkKSB7CiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IucmVuZGVyKHRlbXBsYXRlUmVzdWx0LCB0aGlzLnJlbmRlclJvb3QsIHsKICAgICAgICAgICAgICAgIHNjb3BlTmFtZTogdGhpcy5sb2NhbE5hbWUsCiAgICAgICAgICAgICAgICBldmVudENvbnRleHQ6IHRoaXMKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHMpIHsKICAgICAgICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuX3N0eWxlcy5mb3JFYWNoKChzKT0+ewogICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzLmNzc1RleHQ7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CiAgICByZW5kZXIoKSB7CiAgICAgICAgcmV0dXJuIHJlbmRlck5vdEltcGxlbWVudGVkOwogICAgfQp9CkxpdEVsZW1lbnRbImZpbmFsaXplZCJdID0gdHJ1ZTsKTGl0RWxlbWVudC5yZW5kZXIgPSByZW5kZXI7CkxpdEVsZW1lbnQuc2hhZG93Um9vdE9wdGlvbnMgPSB7CiAgICBtb2RlOiAib3BlbiIKfTsKYXN5bmMgZnVuY3Rpb24gbGlzdFNjcmlwdHMoYWNjb3VudElkLCBhcGlUb2tlbikgewogICAgY29uc3QgdXJsID0gYCR7Y29tcHV0ZUFjY291bnRCYXNlVXJsKGFjY291bnRJZCl9L3dvcmtlcnMvc2NyaXB0c2A7CiAgICByZXR1cm4gKGF3YWl0IGV4ZWN1dGUoJ2xpc3RTY3JpcHRzJywgJ0dFVCcsIHVybCwgYXBpVG9rZW4pKS5yZXN1bHQ7Cn0KYXN5bmMgZnVuY3Rpb24gbGlzdFRhaWxzKGFjY291bnRJZCwgc2NyaXB0TmFtZSwgYXBpVG9rZW4pIHsKICAgIGNvbnN0IHVybCA9IGAke2NvbXB1dGVBY2NvdW50QmFzZVVybChhY2NvdW50SWQpfS93b3JrZXJzL3NjcmlwdHMvJHtzY3JpcHROYW1lfS90YWlsc2A7CiAgICByZXR1cm4gKGF3YWl0IGV4ZWN1dGUoJ2xpc3RUYWlscycsICdHRVQnLCB1cmwsIGFwaVRva2VuKSkucmVzdWx0Owp9CmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRhaWwoYWNjb3VudElkLCBzY3JpcHROYW1lLCBhcGlUb2tlbikgewogICAgY29uc3QgdXJsID0gYCR7Y29tcHV0ZUFjY291bnRCYXNlVXJsKGFjY291bnRJZCl9L3dvcmtlcnMvc2NyaXB0cy8ke3NjcmlwdE5hbWV9L3RhaWxzYDsKICAgIHJldHVybiAoYXdhaXQgZXhlY3V0ZSgnY3JlYXRlVGFpbCcsICdQT1NUJywgdXJsLCBhcGlUb2tlbikpLnJlc3VsdDsKfQpjbGFzcyBDbG91ZGZsYXJlQXBpIHsKICAgIHN0YXRpYyBERUJVRyA9IGZhbHNlOwogICAgc3RhdGljIFVSTF9UUkFOU0ZPUk1FUiA9ICh2KT0+dgogICAgOwp9CmNvbnN0IEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7CmNvbnN0IEFQUExJQ0FUSU9OX0pTT05fVVRGOCA9ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JzsKY29uc3QgQVBQTElDQVRJT05fT0NURVRfU1RSRUFNID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7CmZ1bmN0aW9uIGNvbXB1dGVBY2NvdW50QmFzZVVybChhY2NvdW50SWQpIHsKICAgIHJldHVybiBDbG91ZGZsYXJlQXBpLlVSTF9UUkFOU0ZPUk1FUihgaHR0cHM6Ly9hcGkuY2xvdWRmbGFyZS5jb20vY2xpZW50L3Y0L2FjY291bnRzLyR7YWNjb3VudElkfWApOwp9CmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUob3AsIG1ldGhvZCwgdXJsLCBhcGlUb2tlbiwgYm9keSwgcmVzcG9uc2VUeXBlID0gJ2pzb24nKSB7CiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoewogICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2FwaVRva2VufWAKICAgIH0pOwogICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykgewogICAgICAgIGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBBUFBMSUNBVElPTl9KU09OX1VURjgpOwogICAgICAgIGlmIChDbG91ZGZsYXJlQXBpLkRFQlVHKSBjb25zb2xlLmxvZyhib2R5KTsKICAgIH0KICAgIGNvbnN0IGZldGNoUmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsKICAgICAgICBtZXRob2QsCiAgICAgICAgaGVhZGVycywKICAgICAgICBib2R5CiAgICB9KTsKICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gZmV0Y2hSZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgfHwgJyc7CiAgICBpZiAoKHJlc3BvbnNlVHlwZSA9PT0gJ2J5dGVzJyB8fCByZXNwb25zZVR5cGUgPT09ICdieXRlcz8nKSAmJiBjb250ZW50VHlwZSA9PT0gQVBQTElDQVRJT05fT0NURVRfU1RSRUFNKSB7CiAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgZmV0Y2hSZXNwb25zZS5hcnJheUJ1ZmZlcigpOwogICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpOwogICAgfQogICAgaWYgKCFbCiAgICAgICAgQVBQTElDQVRJT05fSlNPTl9VVEY4LAogICAgICAgIEFQUExJQ0FUSU9OX0pTT04KICAgIF0uaW5jbHVkZXMoY29udGVudFR5cGUpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGNvbnRlbnQtdHlwZTogJHtjb250ZW50VHlwZX0sICBmZXRjaFJlc3BvbnNlPSR7ZmV0Y2hSZXNwb25zZX0sIGJvZHk9JHthd2FpdCBmZXRjaFJlc3BvbnNlLnRleHQoKX1gKTsKICAgIH0KICAgIGNvbnN0IGFwaVJlc3BvbnNlID0gYXdhaXQgZmV0Y2hSZXNwb25zZS5qc29uKCk7CiAgICBpZiAoQ2xvdWRmbGFyZUFwaS5ERUJVRykgY29uc29sZS5sb2coYXBpUmVzcG9uc2UpOwogICAgaWYgKCFhcGlSZXNwb25zZS5zdWNjZXNzKSB7CiAgICAgICAgaWYgKGZldGNoUmVzcG9uc2Uuc3RhdHVzID09PSA0MDQgJiYgcmVzcG9uc2VUeXBlID09PSAnYnl0ZXM/JykgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB0aHJvdyBuZXcgQ2xvdWRmbGFyZUFwaUVycm9yKGAke29wfSBmYWlsZWQ6IHN0YXR1cz0ke2ZldGNoUmVzcG9uc2Uuc3RhdHVzfSwgZXJyb3JzPSR7YXBpUmVzcG9uc2UuZXJyb3JzLm1hcCgodik9PmAke3YuY29kZX0gJHt2Lm1lc3NhZ2V9YAogICAgICAgICkuam9pbignLCAnKX1gLCBmZXRjaFJlc3BvbnNlLnN0YXR1cywgYXBpUmVzcG9uc2UuZXJyb3JzKTsKICAgIH0KICAgIHJldHVybiBhcGlSZXNwb25zZTsKfQpjbGFzcyBDbG91ZGZsYXJlQXBpRXJyb3IgZXh0ZW5kcyBFcnJvciB7CiAgICBzdGF0dXM7CiAgICBlcnJvcnM7CiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlMSwgc3RhdHVzMSwgZXJyb3JzMSl7CiAgICAgICAgc3VwZXIobWVzc2FnZTEpOwogICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzMTsKICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9yczE7CiAgICB9Cn0KZnVuY3Rpb24gc2V0U3VidHJhY3QobGhzLCByaHMpIHsKICAgIGNvbnN0IHJ0ID0gbmV3IFNldChsaHMpOwogICAgZm9yIChjb25zdCBpdGVtIG9mIHJocyl7CiAgICAgICAgcnQuZGVsZXRlKGl0ZW0pOwogICAgfQogICAgcmV0dXJuIHJ0Owp9CmZ1bmN0aW9uIHNldFVuaW9uKGxocywgcmhzKSB7CiAgICBjb25zdCBydCA9IG5ldyBTZXQobGhzKTsKICAgIGZvciAoY29uc3QgaXRlbSBvZiByaHMpewogICAgICAgIHJ0LmFkZChpdGVtKTsKICAgIH0KICAgIHJldHVybiBydDsKfQpmdW5jdGlvbiBzZXRJbnRlcnNlY3QobGhzLCByaHMpIHsKICAgIGNvbnN0IHJ0ID0gbmV3IFNldCgpOwogICAgZm9yIChjb25zdCBpdGVtIG9mIGxocyl7CiAgICAgICAgaWYgKHJocy5oYXMoaXRlbSkpIHJ0LmFkZChpdGVtKTsKICAgIH0KICAgIGZvciAoY29uc3QgaXRlbTEgb2YgcmhzKXsKICAgICAgICBpZiAobGhzLmhhcyhpdGVtMSkpIHJ0LmFkZChpdGVtMSk7CiAgICB9CiAgICByZXR1cm4gcnQ7Cn0KZnVuY3Rpb24gc2V0RXF1YWwobGhzLCByaHMpIHsKICAgIHJldHVybiBsaHMuc2l6ZSA9PT0gcmhzLnNpemUgJiYgWwogICAgICAgIC4uLmxocwogICAgXS5ldmVyeSgodik9PnJocy5oYXModikKICAgICk7Cn0KZnVuY3Rpb24gcGFyc2VIZWFkZXJGaWx0ZXIoaGVhZGVyKSB7CiAgICBjb25zdCBpID0gaGVhZGVyLmluZGV4T2YoJzonKTsKICAgIGlmIChpIDwgMCkgcmV0dXJuIHsKICAgICAgICBrZXk6IGhlYWRlcgogICAgfTsKICAgIGNvbnN0IGtleSA9IGhlYWRlci5zdWJzdHJpbmcoMCwgaSkudHJpbSgpOwogICAgY29uc3QgcXVlcnkgPSBoZWFkZXIuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7CiAgICByZXR1cm4gewogICAgICAgIGtleSwKICAgICAgICBxdWVyeQogICAgfTsKfQpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfS0VZUyA9IG5ldyBTZXQoWwogICAgJ291dGNvbWUnLAogICAgJ3NjcmlwdE5hbWUnLAogICAgJ2V4Y2VwdGlvbnMnLAogICAgJ2xvZ3MnLAogICAgJ2V2ZW50VGltZXN0YW1wJywKICAgICdldmVudCcKXSk7CmNvbnN0IEtOT1dOX09VVENPTUVTID0gbmV3IFNldChbCiAgICAnb2snLAogICAgJ2V4Y2VwdGlvbicsCiAgICAnZXhjZWVkZWRDcHUnLAogICAgJ2NhbmNlbGVkJywKICAgICd1bmtub3duJwpdKTsKZnVuY3Rpb24gcGFyc2VUYWlsTWVzc2FnZShvYmopIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0YWlsTWVzc2FnZTogRXhwZWN0ZWQgb2JqZWN0LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICBjaGVja0tleXMob2JqLCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfS0VZUyk7CiAgICBjb25zdCBvYmpBc0FueSA9IG9iajsKICAgIGNvbnN0IHsgb3V0Y29tZSAsIHNjcmlwdE5hbWUgLCBldmVudFRpbWVzdGFtcCAgfSA9IG9iakFzQW55OwogICAgaWYgKCFLTk9XTl9PVVRDT01FUy5oYXMob3V0Y29tZSkpIHRocm93IG5ldyBFcnJvcihgQmFkIG91dGNvbWU6IGV4cGVjdGVkIG9uZSBvZiBbJHtbCiAgICAgICAgLi4uS05PV05fT1VUQ09NRVMKICAgIF0uam9pbignLCAnKX1dLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG91dGNvbWUpfWApOwogICAgaWYgKHNjcmlwdE5hbWUgIT09IG51bGwpIHRocm93IG5ldyBFcnJvcihgQmFkIHNjcmlwdE5hbWU6IGV4cGVjdGVkIG51bGwsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoc2NyaXB0TmFtZSl9YCk7CiAgICBjb25zdCBsb2dzID0gcGFyc2VMb2dzKG9iakFzQW55LmxvZ3MpOwogICAgY29uc3QgZXhjZXB0aW9ucyA9IHBhcnNlRXhjZXB0aW9ucyhvYmpBc0FueS5leGNlcHRpb25zKTsKICAgIGlmICghKHR5cGVvZiBldmVudFRpbWVzdGFtcCA9PT0gJ251bWJlcicgJiYgZXZlbnRUaW1lc3RhbXAgPiAwKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgZXZlbnRUaW1lc3RhbXA6IGV4cGVjdGVkIHBvc2l0aXZlIG51bWJlciwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShldmVudFRpbWVzdGFtcCl9YCk7CiAgICBjb25zdCBldmVudCA9IG9iakFzQW55LmV2ZW50ICYmIG9iakFzQW55LmV2ZW50LnJlcXVlc3QgPyBwYXJzZVRhaWxNZXNzYWdlUmVxdWVzdEV2ZW50KG9iakFzQW55LmV2ZW50KSA6IHBhcnNlVGFpbE1lc3NhZ2VDcm9uRXZlbnQob2JqQXNBbnkuZXZlbnQpOwogICAgcmV0dXJuIHsKICAgICAgICBvdXRjb21lLAogICAgICAgIHNjcmlwdE5hbWUsCiAgICAgICAgZXhjZXB0aW9ucywKICAgICAgICBsb2dzLAogICAgICAgIGV2ZW50VGltZXN0YW1wLAogICAgICAgIGV2ZW50CiAgICB9Owp9CmZ1bmN0aW9uIHBhcnNlTG9ncyhvYmopIHsKICAgIGlmICghQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBsb2dzOiBleHBlY3RlZCBhcnJheSwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgcmV0dXJuIFsKICAgICAgICAuLi5vYmoKICAgIF0ubWFwKHBhcnNlVGFpbE1lc3NhZ2VMb2cpOwp9CmZ1bmN0aW9uIHBhcnNlRXhjZXB0aW9ucyhvYmopIHsKICAgIGlmICghQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBleGNlcHRpb25zOiBleHBlY3RlZCBhcnJheSwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgcmV0dXJuIFsKICAgICAgICAuLi5vYmoKICAgIF0ubWFwKHBhcnNlVGFpbE1lc3NhZ2VFeGNlcHRpb24pOwp9CmZ1bmN0aW9uIGlzTG9nTWVzc2FnZVBhcnQodmFsdWUpIHsKICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7CiAgICByZXR1cm4gdCA9PT0gJ3N0cmluZycgfHwgdCA9PT0gJ251bWJlcicgfHwgdCA9PT0gJ2Jvb2xlYW4nIHx8IHQgPT09ICd1bmRlZmluZWQnIHx8IHQgPT09ICdvYmplY3QnOwp9CmNvbnN0IFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9MT0dfS0VZUyA9IG5ldyBTZXQoWwogICAgJ21lc3NhZ2UnLAogICAgJ2xldmVsJywKICAgICd0aW1lc3RhbXAnCl0pOwpmdW5jdGlvbiBwYXJzZVRhaWxNZXNzYWdlTG9nKG9iaikgewogICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG9iaikpIHRocm93IG5ldyBFcnJvcihgQmFkIHRhaWxNZXNzYWdlTG9nOiBFeHBlY3RlZCBvYmplY3QsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIGNoZWNrS2V5cyhvYmosIFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9MT0dfS0VZUyk7CiAgICBjb25zdCBvYmpBc0FueSA9IG9iajsKICAgIGNvbnN0IG1lc3NhZ2UgPSBwYXJzZUxvZ01lc3NhZ2VQYXJ0QXJyYXkob2JqQXNBbnkubWVzc2FnZSwgJ21lc3NhZ2UnKTsKICAgIGNvbnN0IHsgbGV2ZWwgLCB0aW1lc3RhbXAgIH0gPSBvYmpBc0FueTsKICAgIGlmICghKHR5cGVvZiBsZXZlbCA9PT0gJ3N0cmluZycpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBsZXZlbDogZXhwZWN0ZWQgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KGxldmVsKX1gKTsKICAgIGlmICghKHR5cGVvZiB0aW1lc3RhbXAgPT09ICdudW1iZXInICYmIHRpbWVzdGFtcCA+IDApKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0aW1lc3RhbXA6IGV4cGVjdGVkIHBvc2l0aXZlIG51bWJlciwgZm91bmQgJHtKU09OLnN0cmluZ2lmeSh0aW1lc3RhbXApfWApOwogICAgcmV0dXJuIHsKICAgICAgICBtZXNzYWdlLAogICAgICAgIGxldmVsLAogICAgICAgIHRpbWVzdGFtcAogICAgfTsKfQpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfRVhDRVBUSU9OX0tFWVMgPSBuZXcgU2V0KFsKICAgICduYW1lJywKICAgICdtZXNzYWdlJywKICAgICd0aW1lc3RhbXAnCl0pOwpmdW5jdGlvbiBwYXJzZVRhaWxNZXNzYWdlRXhjZXB0aW9uKG9iaikgewogICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG9iaikpIHRocm93IG5ldyBFcnJvcihgQmFkIHRhaWxNZXNzYWdlRXhjZXB0aW9uOiBFeHBlY3RlZCBvYmplY3QsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIGNoZWNrS2V5cyhvYmosIFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9FWENFUFRJT05fS0VZUyk7CiAgICBjb25zdCBvYmpBc0FueSA9IG9iajsKICAgIGNvbnN0IHsgbmFtZSAsIG1lc3NhZ2UgLCB0aW1lc3RhbXAgIH0gPSBvYmpBc0FueTsKICAgIGlmICghKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykpIHRocm93IG5ldyBFcnJvcihgQmFkIG5hbWU6IGV4cGVjdGVkIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gKTsKICAgIGlmICghKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykpIHRocm93IG5ldyBFcnJvcihgQmFkIG1lc3NhZ2U6IGV4cGVjdGVkIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShtZXNzYWdlKX1gKTsKICAgIGlmICghKHR5cGVvZiB0aW1lc3RhbXAgPT09ICdudW1iZXInICYmIHRpbWVzdGFtcCA+IDApKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0aW1lc3RhbXA6IGV4cGVjdGVkIHBvc2l0aXZlIG51bWJlciwgZm91bmQgJHtKU09OLnN0cmluZ2lmeSh0aW1lc3RhbXApfWApOwogICAgcmV0dXJuIHsKICAgICAgICBuYW1lLAogICAgICAgIG1lc3NhZ2UsCiAgICAgICAgdGltZXN0YW1wCiAgICB9Owp9CmNvbnN0IFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9DUk9OX0VWRU5UX0tFWVMgPSBuZXcgU2V0KFsKICAgICdjcm9uJywKICAgICdzY2hlZHVsZWRUaW1lJwpdKTsKZnVuY3Rpb24gaXNUYWlsTWVzc2FnZUNyb25FdmVudChvYmopIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSByZXR1cm4gZmFsc2U7CiAgICBjb25zdCBrZXlzID0gbmV3IFNldChPYmplY3Qua2V5cyhvYmopKTsKICAgIHJldHVybiBzZXRFcXVhbChrZXlzLCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfQ1JPTl9FVkVOVF9LRVlTKTsKfQpmdW5jdGlvbiBwYXJzZVRhaWxNZXNzYWdlQ3JvbkV2ZW50KG9iaikgewogICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG9iaikpIHRocm93IG5ldyBFcnJvcihgQmFkIHRhaWxNZXNzYWdlQ3JvbkV2ZW50OiBFeHBlY3RlZCBvYmplY3QsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIGNoZWNrS2V5cyhvYmosIFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9DUk9OX0VWRU5UX0tFWVMpOwogICAgY29uc3Qgb2JqQXNBbnkgPSBvYmo7CiAgICBjb25zdCB7IGNyb24gLCBzY2hlZHVsZWRUaW1lICB9ID0gb2JqQXNBbnk7CiAgICBpZiAoISh0eXBlb2YgY3JvbiA9PT0gJ3N0cmluZycpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBjcm9uOiBleHBlY3RlZCBzdHJpbmcsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoY3Jvbil9YCk7CiAgICBpZiAoISh0eXBlb2Ygc2NoZWR1bGVkVGltZSA9PT0gJ251bWJlcicgJiYgc2NoZWR1bGVkVGltZSA+IDApKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBzY2hlZHVsZWRUaW1lOiBleHBlY3RlZCBwb3NpdGl2ZSBudW1iZXIsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoc2NoZWR1bGVkVGltZSl9YCk7CiAgICByZXR1cm4gewogICAgICAgIGNyb24sCiAgICAgICAgc2NoZWR1bGVkVGltZQogICAgfTsKfQpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfUkVRVUVTVF9FVkVOVF9LRVlTID0gbmV3IFNldChbCiAgICAncmVxdWVzdCcKXSk7CmZ1bmN0aW9uIHBhcnNlVGFpbE1lc3NhZ2VSZXF1ZXN0RXZlbnQob2JqKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgdGFpbE1lc3NhZ2VSZXF1ZXN0RXZlbnQ6IEV4cGVjdGVkIG9iamVjdCwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgY2hlY2tLZXlzKG9iaiwgUkVRVUlSRURfVEFJTF9NRVNTQUdFX1JFUVVFU1RfRVZFTlRfS0VZUyk7CiAgICBjb25zdCBvYmpBc0FueSA9IG9iajsKICAgIGNvbnN0IHJlcXVlc3QgPSBwYXJzZVRhaWxNZXNzYWdlRXZlbnRSZXF1ZXN0KG9iakFzQW55LnJlcXVlc3QpOwogICAgcmV0dXJuIHsKICAgICAgICByZXF1ZXN0CiAgICB9Owp9CmNvbnN0IFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9FVkVOVF9SRVFVRVNUX0tFWVMgPSBuZXcgU2V0KFsKICAgICd1cmwnLAogICAgJ21ldGhvZCcsCiAgICAnaGVhZGVycycKXSk7CmNvbnN0IE9QVElPTkFMX1RBSUxfTUVTU0FHRV9FVkVOVF9SRVFVRVNUX0tFWVMgPSBuZXcgU2V0KFsKICAgICdjZicKXSk7CmNvbnN0IEFMTF9UQUlMX01FU1NBR0VfRVZFTlRfUkVRVUVTVF9LRVlTID0gc2V0VW5pb24oUkVRVUlSRURfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUywgT1BUSU9OQUxfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUyk7CmZ1bmN0aW9uIHBhcnNlVGFpbE1lc3NhZ2VFdmVudFJlcXVlc3Qob2JqKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgdGFpbE1lc3NhZ2VFdmVudFJlcXVlc3Q6IEV4cGVjdGVkIG9iamVjdCwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgY2hlY2tLZXlzKG9iaiwgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUywgQUxMX1RBSUxfTUVTU0FHRV9FVkVOVF9SRVFVRVNUX0tFWVMpOwogICAgY29uc3Qgb2JqQXNBbnkgPSBvYmo7CiAgICBjb25zdCB7IHVybCAsIG1ldGhvZCAgfSA9IG9iakFzQW55OwogICAgaWYgKCEodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB1cmw6IGV4cGVjdGVkIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeSh1cmwpfWApOwogICAgaWYgKCEodHlwZW9mIG1ldGhvZCA9PT0gJ3N0cmluZycpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBtZXRob2Q6IGV4cGVjdGVkIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShtZXRob2QpfWApOwogICAgY29uc3QgaGVhZGVycyA9IHBhcnNlU3RyaW5nUmVjb3JkKG9iakFzQW55LmhlYWRlcnMsICdoZWFkZXJzJyk7CiAgICBjb25zdCBjZiA9IG9iakFzQW55LmNmID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBwYXJzZUluY29taW5nUmVxdWVzdENmUHJvcGVydGllcyhvYmpBc0FueS5jZik7CiAgICByZXR1cm4gewogICAgICAgIHVybCwKICAgICAgICBtZXRob2QsCiAgICAgICAgaGVhZGVycywKICAgICAgICBjZgogICAgfTsKfQpmdW5jdGlvbiBjaGVja0tleXMob2JqLCByZXF1aXJlZEtleXMsIGFsbEtleXMpIHsKICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKG9iaikpOwogICAgY29uc3QgbWlzc2luZ0tleXMgPSBzZXRTdWJ0cmFjdChyZXF1aXJlZEtleXMsIGtleXMpOwogICAgaWYgKG1pc3NpbmdLZXlzLnNpemUgPiAwKSB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5czogJHtbCiAgICAgICAgLi4ubWlzc2luZ0tleXMKICAgIF0uam9pbignLCAnKX1gKTsKICAgIGNvbnN0IGV4dHJhS2V5cyA9IHNldFN1YnRyYWN0KGtleXMsIGFsbEtleXMgfHwgcmVxdWlyZWRLZXlzKTsKICAgIGlmIChleHRyYUtleXMuc2l6ZSA+IDApIHRocm93IG5ldyBFcnJvcihgRXh0cmEga2V5czogJHtbCiAgICAgICAgLi4uZXh0cmFLZXlzCiAgICBdLmpvaW4oJywgJyl9YCk7Cn0KZnVuY3Rpb24gcGFyc2VTdHJpbmdSZWNvcmQob2JqLCBuYW1lKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgJHtuYW1lfTogRXhwZWN0ZWQgc3RyaW5nIHJlY29yZCwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgZm9yIChjb25zdCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpewogICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCAke25hbWV9OiBFeHBlY3RlZCBzdHJpbmcgcmVjb3JkLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICB9CiAgICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIHBhcnNlTG9nTWVzc2FnZVBhcnRBcnJheShvYmosIG5hbWUpIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCAke25hbWV9OiBFeHBlY3RlZCBsb2cgbWVzc2FnZSBwYXJ0IGFycmF5LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIG9iail7CiAgICAgICAgaWYgKCFpc0xvZ01lc3NhZ2VQYXJ0KHZhbHVlKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgJHtuYW1lfTogRXhwZWN0ZWQgbG9nIG1lc3NhZ2UgcGFydCBhcnJheSwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgfQogICAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBwYXJzZUluY29taW5nUmVxdWVzdENmUHJvcGVydGllcyhvYmopIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBjZjogRXhwZWN0ZWQgb2JqZWN0LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIGZvcm1hdExvY2FsWXl5eU1tRGRIaE1tU3MoZGF0ZSkgewogICAgcmV0dXJuIFsKICAgICAgICBkYXRlLmdldEZ1bGxZZWFyKCksCiAgICAgICAgJy0nLAogICAgICAgIHBhZDIoZGF0ZS5nZXRNb250aCgpICsgMSksCiAgICAgICAgJy0nLAogICAgICAgIHBhZDIoZGF0ZS5nZXREYXRlKCkpLAogICAgICAgICcgJywKICAgICAgICBwYWQyKGRhdGUuZ2V0SG91cnMoKSksCiAgICAgICAgJzonLAogICAgICAgIHBhZDIoZGF0ZS5nZXRNaW51dGVzKCkpLAogICAgICAgICc6JywKICAgICAgICBwYWQyKGRhdGUuZ2V0U2Vjb25kcygpKQogICAgXS5qb2luKCcnKTsKfQpmdW5jdGlvbiBwYWQyKG51bSkgewogICAgcmV0dXJuIG51bS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7Cn0KY29uc3QgUFJFVFRZX09VVENPTUVTID0gbmV3IE1hcChbCiAgICBbCiAgICAgICAgJ29rJywKICAgICAgICAnT2snCiAgICBdLAogICAgWwogICAgICAgICdleGNlcHRpb24nLAogICAgICAgICdFcnJvcicKICAgIF0sCiAgICBbCiAgICAgICAgJ2V4Y2VlZGVkQ3B1JywKICAgICAgICAnRXhjZWVkZWQgTGltaXQnCiAgICBdLAogICAgWwogICAgICAgICdjYW5jZWxlZCcsCiAgICAgICAgJ0NhbmNlbGVkJwogICAgXSwKICAgIFsKICAgICAgICAndW5rbm93bicsCiAgICAgICAgJ1Vua25vd24nCiAgICBdLCAKXSk7CmNvbnN0IExPR19MRVZFTF9DT0xPUlMgPSBuZXcgTWFwKFsKICAgIFsKICAgICAgICAndHJhY2UnLAogICAgICAgICdncmF5JwogICAgXSwKICAgIFsKICAgICAgICAnZGVidWcnLAogICAgICAgICdwdXJwbGUnCiAgICBdLAogICAgWwogICAgICAgICdsb2cnLAogICAgICAgICdncmF5JwogICAgXSwKICAgIFsKICAgICAgICAnaW5mbycsCiAgICAgICAgJ2dyYXknCiAgICBdLAogICAgWwogICAgICAgICd3YXJuJywKICAgICAgICAncmVkJwogICAgXSwKICAgIFsKICAgICAgICAnZXJyb3InLAogICAgICAgICdyZWQnCiAgICBdLCAKXSk7CmNsYXNzIFRhaWxDb25uZWN0aW9uIHsKICAgIHN0YXRpYyBWRVJCT1NFID0gZmFsc2U7CiAgICB3czsKICAgIGNhbGxiYWNrczsKICAgIG9wdGlvbnM7CiAgICBoZWFydGJlYXRJZDsKICAgIGNvbnN0cnVjdG9yKHdlYlNvY2tldFVybCwgY2FsbGJhY2tzMSwgb3B0cyl7CiAgICAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQod2ViU29ja2V0VXJsLCAndHJhY2UtdjEnKTsKICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrczE7CiAgICAgICAgY29uc3QgeyB3ZWJzb2NrZXRQaW5nSW50ZXJ2YWxTZWNvbmRzOiB3ZWJzb2NrZXRQaW5nSW50ZXJ2YWxTZWNvbmRzMSAgfSA9IG9wdHM7CiAgICAgICAgdGhpcy53cy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICB0aGlzLnNlbmRPcHRpb25zSWZPcGVuKCk7CiAgICAgICAgICAgIGlmIChjYWxsYmFja3MxLm9uT3BlbikgewogICAgICAgICAgICAgICAgY2FsbGJhY2tzMS5vbk9wZW4odGhpcywgdGltZVN0YW1wKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAod2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kczEgPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAoVGFpbENvbm5lY3Rpb24uVkVSQk9TRSkgY29uc29sZS5sb2coZm9ybWF0TG9jYWxZeXl5TW1EZEhoTW1TcyhuZXcgRGF0ZSgpKSwgYHNlbmRpbmcgd3MgcGluZyB7fSBldmVyeSAke3dlYnNvY2tldFBpbmdJbnRlcnZhbFNlY29uZHMxfWApOwogICAgICAgICAgICAgICAgdGhpcy5oZWFydGJlYXRJZCA9IHNldEludGVydmFsKCgpPT57CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRhaWxDb25uZWN0aW9uLlZFUkJPU0UpIGNvbnNvbGUubG9nKGZvcm1hdExvY2FsWXl5eU1tRGRIaE1tU3MobmV3IERhdGUoKSksIGBzZW5kaW5nIHdzIHBpbmcge31gKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKCd7fScpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIHdlYnNvY2tldFBpbmdJbnRlcnZhbFNlY29uZHMxICogMTAwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLndzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IGNvZGUgLCByZWFzb24gLCB3YXNDbGVhbiAsIHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICBpZiAoVGFpbENvbm5lY3Rpb24uVkVSQk9TRSkgY29uc29sZS5sb2coZm9ybWF0TG9jYWxZeXl5TW1EZEhoTW1TcyhuZXcgRGF0ZSgpKSwgJ1RhaWxDb25uZWN0aW9uOiB3cyBjbG9zZScsIHsKICAgICAgICAgICAgICAgIGNvZGUsCiAgICAgICAgICAgICAgICByZWFzb24sCiAgICAgICAgICAgICAgICB3YXNDbGVhbiwKICAgICAgICAgICAgICAgIHRpbWVTdGFtcAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdElkKTsKICAgICAgICAgICAgaWYgKGNhbGxiYWNrczEub25DbG9zZSkgewogICAgICAgICAgICAgICAgY2FsbGJhY2tzMS5vbkNsb3NlKHRoaXMsIHRpbWVTdGFtcCwgY29kZSwgcmVhc29uLCB3YXNDbGVhbik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLndzLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICBjb25zdCBlcnJvckluZm8gPSBjb21wdXRlRXJyb3JJbmZvKGV2ZW50KTsKICAgICAgICAgICAgaWYgKFRhaWxDb25uZWN0aW9uLlZFUkJPU0UpIGNvbnNvbGUubG9nKGZvcm1hdExvY2FsWXl5eU1tRGRIaE1tU3MobmV3IERhdGUoKSksICdUYWlsQ29ubmVjdGlvbjogd3MgZXJyb3InLCBlcnJvckluZm8pOwogICAgICAgICAgICBpZiAoY2FsbGJhY2tzMS5vbkVycm9yKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFja3MxLm9uRXJyb3IodGhpcywgdGltZVN0YW1wLCBlcnJvckluZm8pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy53cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgYXN5bmMgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCBldmVudC5kYXRhLnRleHQoKTsKICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UodGV4dCk7CiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHBhcnNlVGFpbE1lc3NhZ2Uob2JqKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MxLm9uVW5wYXJzZWRNZXNzYWdlKHRoaXMsIHRpbWVTdGFtcCwgb2JqLCBlKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYWxsYmFja3MxLm9uVGFpbE1lc3NhZ2UodGhpcywgdGltZVN0YW1wLCBtZXNzYWdlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrczEub25VbnBhcnNlZE1lc3NhZ2UodGhpcywgdGltZVN0YW1wLCBldmVudC5kYXRhLCBuZXcgRXJyb3IoYEV4cGVjdGVkIGV2ZW50LmRhdGEgdG8gYmUgQmxvYmApKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7CiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgICAgICB0aGlzLnNlbmRPcHRpb25zSWZPcGVuKCk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICBjbG9zZShjb2RlLCByZWFzb24pIHsKICAgICAgICB0aGlzLndzLmNsb3NlKGNvZGUsIHJlYXNvbik7CiAgICB9CiAgICBzZW5kT3B0aW9uc0lmT3BlbigpIHsKICAgICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHsKICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHRoaXMub3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChUYWlsQ29ubmVjdGlvbi5WRVJCT1NFKSBjb25zb2xlLmxvZyhgc2VuZE9wdGlvbnNJZk9wZW46IHNlbmRpbmcgJHtwYXlsb2FkfWApOwogICAgICAgICAgICB0aGlzLndzLnNlbmQocGF5bG9hZCk7CiAgICAgICAgfQogICAgfQp9CmZ1bmN0aW9uIGNvbXB1dGVFcnJvckluZm8oZXZlbnQpIHsKICAgIGlmIChldmVudC50eXBlID09PSAnZXJyb3InKSB7CiAgICAgICAgY29uc3QgeyBtZXNzYWdlICwgZmlsZW5hbWUgLCBsaW5lbm8gLCBjb2xubyAsIGVycm9yICB9ID0gZXZlbnQ7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbWVzc2FnZSwKICAgICAgICAgICAgZmlsZW5hbWUsCiAgICAgICAgICAgIGxpbmVubywKICAgICAgICAgICAgY29sbm8sCiAgICAgICAgICAgIGVycm9yCiAgICAgICAgfTsKICAgIH0KICAgIHJldHVybiB1bmRlZmluZWQ7Cn0KZnVuY3Rpb24gZ2VuZXJhdGVVdWlkKCkgewogICAgY29uc3QgY3J5cHRvQXNBbnkgPSBjcnlwdG87CiAgICBpZiAodHlwZW9mIGNyeXB0b0FzQW55LnJhbmRvbVVVSUQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICByZXR1cm4gY3J5cHRvQXNBbnkucmFuZG9tVVVJRCgpOwogICAgfQogICAgY29uc3Qgcm5kcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMTYpKTsKICAgIHJuZHNbNl0gPSBybmRzWzZdICYgMTUgfCA2NDsKICAgIHJuZHNbOF0gPSBybmRzWzhdICYgNjMgfCAxMjg7CiAgICByZXR1cm4gYnl0ZXNUb1V1aWQocm5kcyk7Cn0KZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnl0ZXMpIHsKICAgIGNvbnN0IGJpdHMgPSBbCiAgICAgICAgLi4uYnl0ZXMKICAgIF0ubWFwKChiaXQpPT57CiAgICAgICAgY29uc3QgcyA9IGJpdC50b1N0cmluZygxNik7CiAgICAgICAgcmV0dXJuIGJpdCA8IDE2ID8gIjAiICsgcyA6IHM7CiAgICB9KTsKICAgIHJldHVybiBbCiAgICAgICAgLi4uYml0cy5zbGljZSgwLCA0KSwKICAgICAgICAiLSIsCiAgICAgICAgLi4uYml0cy5zbGljZSg0LCA2KSwKICAgICAgICAiLSIsCiAgICAgICAgLi4uYml0cy5zbGljZSg2LCA4KSwKICAgICAgICAiLSIsCiAgICAgICAgLi4uYml0cy5zbGljZSg4LCAxMCksCiAgICAgICAgIi0iLAogICAgICAgIC4uLmJpdHMuc2xpY2UoMTAsIDE2KSwgCiAgICBdLmpvaW4oIiIpOwp9CmNsYXNzIE1hdGVyaWFsIHsKICAgIHN0YXRpYyBoaWdoRW1waGFzaXNUZXh0Q29sb3IgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg3KSc7CiAgICBzdGF0aWMgbWVkaXVtRW1waGFzaXNUZXh0Q29sb3IgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYwKSc7Cn0KY29uc3QgTUFURVJJQUxfQ1NTID0gY3NzYAoKOnJvb3QgewogIC0tc3VyZmFjZS0wMS1iYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzAuNzUsIDMwLjc1LCAzMC43NSk7CiAgLS1zdXJmYWNlLTA0LWJhY2tncm91bmQtY29sb3I6IHJnYig0MC45NSwgNDAuOTUsIDQwLjk1KTsKICAtLWhpZ2gtZW1waGFzaXMtdGV4dC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg3KTsKICAtLW1lZGl1bS1lbXBoYXNpcy10ZXh0LWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNjApOwogIC0tZGlzYWJsZWQtdGV4dC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjM4KTsKICAtLWJ1dHRvbi1ib3JkZXItcmFkaXVzOiAwLjI1cmVtOwogIC0tcHJpbWFyeS1jb2xvcjogI2JiODZmYzsKICAtLWJhY2tncm91bmQtY29sb3I6ICMxMjEyMTI7CiAgLS1zYW5zLXNlcmlmLWZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIGF2ZW5pciBuZXh0LCBhdmVuaXIsIGhlbHZldGljYSBuZXVlLCBoZWx2ZXRpY2EsIFVidW50dSwgcm9ib3RvLCBub3RvLCBzZWdvZSB1aSwgYXJpYWwsIHNhbnMtc2VyaWY7CiAgLS1tb25vc3BhY2UtZm9udC1mYW1pbHk6IE1lbmxvLCBDb25zb2xhcywgdWktbW9ub3NwYWNlLCBtb25vc3BhY2U7Cn0KCi8qKiB0ZXh0IHNpemUgY2xhc3NlcyAqLwoKLmg2IHsKICAgIGZvbnQtc2l6ZTogMS4yNXJlbTsKICAgIGxldHRlci1zcGFjaW5nOiAwLjAwNzUwcmVtOwogICAgZm9udC13ZWlnaHQ6IGJvbGRlcjsKfQoKLmJvZHkyLCBmaWVsZHNldCBsYWJlbCwgZmllbGRzZXQgb3V0cHV0LCBmaWVsZHNldCBkZXRhaWxzIHsKICAgIGZvbnQtc2l6ZTogMC44NzVyZW07CiAgICBsZXR0ZXItc3BhY2luZzogMC4wMTc4NnJlbTsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICBsaW5lLWhlaWdodDogMS4yNXJlbTsKfQoKLmJ1dHRvbiwgYnV0dG9uLCAuYWN0aW9uLWljb24gewogICAgZm9udC1zaXplOiAwLjg3NXJlbTsKICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICBsZXR0ZXItc3BhY2luZzogMC4wODkyOXJlbTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7Cn0KCi5vdmVybGluZSB7CiAgICBmb250LXNpemU6IDAuNjI1cmVtOwogICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgIGxldHRlci1zcGFjaW5nOiAwLjE1MDAwcmVtOwogICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQoKLmNhcHRpb24gewogICAgZm9udC1zaXplOiAwLjc1cmVtOwogICAgbGV0dGVyLXNwYWNpbmc6IDAuMDMzMzNyZW07CiAgICBmb250LXdlaWdodDogbm9ybWFsOwp9CgovKiBsaWdodCB0ZXh0IG9uIGRhcmsgYmFja2dyb3VuZCBjb2xvcnMgKi8KCi5oaWdoLWVtcGhhc2lzLXRleHQgewogICAgY29sb3I6IHZhcigtLWhpZ2gtZW1waGFzaXMtdGV4dC1jb2xvcik7Cn0KCi5tZWRpdW0tZW1waGFzaXMtdGV4dCwgZmllbGRzZXQgbGFiZWwgewogICAgY29sb3I6IHZhcigtLW1lZGl1bS1lbXBoYXNpcy10ZXh0LWNvbG9yKTsKfQoKLmRpc2FibGVkLWVtcGhhc2lzLXRleHQgewogICAgY29sb3I6IHZhcigtLWRpc2FibGVkLXRleHQtY29sb3IpOwp9CgovKiogZWxldmF0aW9uIGJhY2tncm91bmRzICovCgouc3VyZmFjZS0wMSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zdXJmYWNlLTAxLWJhY2tncm91bmQtY29sb3IpOwp9Cgouc3VyZmFjZS0wNCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zdXJmYWNlLTA0LWJhY2tncm91bmQtY29sb3IpOwp9CgovKiogYWN0aW9uLWljb24gKi8KCi5hY3Rpb24taWNvbiB7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgbWluLWhlaWdodDogMnJlbTsKICAgIG1pbi13aWR0aDogMnJlbTsKICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJ1dHRvbi1ib3JkZXItcmFkaXVzKTsKICAgIGNvbG9yOiB2YXIoLS1oaWdoLWVtcGhhc2lzLXRleHQtY29sb3IpOwogICAgb3BhY2l0eTogMC42OTsgIC8qKiBtZWRpdW0tZW1waGFzaXMgLyBoaWdoLWVtcGhhc2lzICovCiAgICB1c2VyLXNlbGVjdDogbm9uZTsgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKfQoKQG1lZGlhIChob3ZlcjogaG92ZXIpIHsKICAgIC5hY3Rpb24taWNvbjpob3ZlciB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3VyZmFjZS0wNC1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgICAgICBvcGFjaXR5OiAxOwogICAgfQp9CgovKiogYnV0dG9uICovCgpidXR0b24gewogICAgYm9yZGVyOiBub25lOwogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3VyZmFjZS0wMS1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgIGNvbG9yOiB2YXIoLS1tZWRpdW0tZW1waGFzaXMtdGV4dC1jb2xvcik7CiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIHVzZXItc2VsZWN0OiBub25lOyAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgbWluLXdpZHRoOiA4cmVtOwogICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYnV0dG9uLWJvcmRlci1yYWRpdXMpOwp9CgpidXR0b24uc2VsZWN0ZWQgewogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3VyZmFjZS0wNC1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgIGNvbG9yOiB2YXIoLS1oaWdoLWVtcGhhc2lzLXRleHQtY29sb3IpOwp9CgpAbWVkaWEgKGhvdmVyKSB7CiAgICBidXR0b246aG92ZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXN1cmZhY2UtMDQtYmFja2dyb3VuZC1jb2xvcik7CiAgICAgICAgY29sb3I6IHZhcigtLWhpZ2gtZW1waGFzaXMtdGV4dC1jb2xvcik7CiAgICB9Cn0KCmJ1dHRvbjpkaXNhYmxlZCB7CiAgICBjb2xvcjogdmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvcik7Cn0KCkBtZWRpYSAoaG92ZXIpIHsKICAgIGJ1dHRvbjpkaXNhYmxlZDpob3ZlciB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3VyZmFjZS0wMS1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7CiAgICB9Cn0KCi8qKiBhbmNob3JzICovCgphIHsKICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTsKICAgIHRleHQtdW5kZXJsaW5lLW9mZnNldDogMC4ycmVtOwogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwp9CgpAbWVkaWEgKGhvdmVyOiBob3ZlcikgewogICAgYTpob3ZlciB7CiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CiAgICB9Cn0KCi8qKiBmb3JtcyAqLwoKZmllbGRzZXQgewogICAgYm9yZGVyOiBzb2xpZCAxcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYwKTsKICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJ1dHRvbi1ib3JkZXItcmFkaXVzKTsKICAgIGRpc3BsYXk6IGdyaWQ7CiAgICBncmlkLXJvdy1nYXA6IDFyZW07CiAgICBncmlkLWNvbHVtbi1nYXA6IDFyZW07CiAgICBwYWRkaW5nOiAxcmVtOwp9CgpsYWJlbCB7CiAgICBncmlkLWNvbHVtbjogMTsKICAgIHBhZGRpbmc6IDAuNXJlbSAwOwp9CgouZm9ybS1saHMgewogICAgZ3JpZC1jb2x1bW46IDE7Cn0KCmlucHV0LCAuZm9ybS1yaHMgewogICAgZ3JpZC1jb2x1bW46IDI7CiAgICBtaW4td2lkdGg6IDA7Cn0KCi5mb3JtLXJvdyB7CiAgICBncmlkLWNvbHVtbjogMSAvIHNwYW4gMjsKfQoKZmllbGRzZXQgaW5wdXRbdHlwZT10ZXh0XSB7CiAgICBwYWRkaW5nOiAwLjVyZW07CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zdXJmYWNlLTAxLWJhY2tncm91bmQtY29sb3IpOwogICAgY29sb3I6IHZhcigtLWhpZ2gtZW1waGFzaXMtdGV4dC1jb2xvcik7CiAgICBib3JkZXI6IHNvbGlkIDFweCB2YXIoLS1tZWRpdW0tZW1waGFzaXMtdGV4dC1jb2xvcik7CiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1idXR0b24tYm9yZGVyLXJhZGl1cyk7Cn0KCmZpZWxkc2V0IG91dHB1dCB7CiAgICBwYWRkaW5nOiAwLjVyZW0gMDsKICAgIGNvbG9yOiB2YXIoLS1tZWRpdW0tZW1waGFzaXMtdGV4dC1jb2xvcik7Cn0KCmZpZWxkc2V0IGRldGFpbHMgewogICAgY29sb3I6IHZhcigtLW1lZGl1bS1lbXBoYXNpcy10ZXh0LWNvbG9yKTsKfQoKYDsKY29uc3QgSEVBREVSX0hUTUwgPSBodG1sYAo8aGVhZGVyIGNsYXNzPSJoNiBoaWdoLWVtcGhhc2lzLXRleHQiPgogICAgPGRpdiBpZD0iaGVhZGVyLWNvbnRlbnQiPgogICAgICAgIFdlYnRhaWwKICAgICAgICA8c3BhbiBpZD0iaGVhZGVyLXZlcnNpb24iIGNsYXNzPSJvdmVybGluZSBtZWRpdW0tZW1waGFzaXMtdGV4dCI+PC9zcGFuPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9za3ltZXRob2QvZGVub2ZsYXJlIiB0YXJnZXQ9Il9ibGFuayIgaWQ9ImdpdGh1Yi1sb2dvLWFuY2hvciI+PGltZyBpZD0iZ2l0aHViLWxvZ28iPjwvYT4KICAgIDwvZGl2Pgo8L2hlYWRlcj4KYDsKY29uc3QgSEVBREVSX0NTUyA9IGNzc2AKaGVhZGVyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBwYWRkaW5nOiAxcmVtIDA7CiAgICB1c2VyLXNlbGVjdDogbm9uZTsgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKfQoKI2hlYWRlci1jb250ZW50IHsKICAgIGZsZXgtZ3JvdzogMTsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmU7CiAgICBwYWRkaW5nLXJpZ2h0OiAyLjJyZW07Cn0KCiNoZWFkZXItdmVyc2lvbiB7CiAgICBmbGV4LWdyb3c6IDE7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCiNnaXRodWItbG9nby1hbmNob3IgewogICAgbGluZS1oZWlnaHQ6IDA7CiAgICBvcGFjaXR5OiAwLjU7Cn0KCkBtZWRpYSAoaG92ZXI6IGhvdmVyKSB7CiAgICAjZ2l0aHViLWxvZ28tYW5jaG9yOmhvdmVyIHsKICAgICAgICBvcGFjaXR5OiAwLjc1OwogICAgfQp9CgojZ2l0aHViLWxvZ28gewogICAgd2lkdGg6IDFyZW07CiAgICBtYXJnaW4tYm90dG9tOiAtMC4xcmVtOwp9CgpgOwpmdW5jdGlvbiBpbml0SGVhZGVyKGRvY3VtZW50LCB2bSwgZGF0YSkgewogICAgY29uc3QgaGVhZGVyQ29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhZGVyLWNvbnRlbnQnKTsKICAgIGlmICgoZGF0YS5mbGFncyB8fCAnJykuaW5jbHVkZXMoJ2RlbW8tdG9nZ2xlJykpIHsKICAgICAgICBoZWFkZXJDb250ZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIChlKT0+ewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZtLnRvZ2dsZURlbW9Nb2RlKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBoZWFkZXJWZXJzaW9uU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkZXItdmVyc2lvbicpOwogICAgY29uc3QgeyB2ZXJzaW9uICB9ID0gZGF0YTsKICAgIGhlYWRlclZlcnNpb25TcGFuLnRleHRDb250ZW50ID0gdmVyc2lvbiA/IGB2JHt2ZXJzaW9ufWAgOiAnJzsKICAgIGNvbnN0IGdpdGh1YkxvZ29JbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2l0aHViLWxvZ28nKTsKICAgIGdpdGh1YkxvZ29JbWcuc3JjID0gY29tcHV0ZUdpdGh1YkxvZ29EYXRhVXJsKCk7CiAgICByZXR1cm4gKCk9PnsKICAgIH07Cn0KZnVuY3Rpb24gY29tcHV0ZUdpdGh1YkxvZ29EYXRhVXJsKCkgewogICAgY29uc3Qgc3ZnID0gR0lUSFVCX0xPR08ucmVwbGFjZSgnZmlsbDp3aGl0ZTsnLCBgZmlsbDoke01hdGVyaWFsLmhpZ2hFbXBoYXNpc1RleHRDb2xvcn07YCk7CiAgICByZXR1cm4gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCcgKyBzdmc7Cn0KY29uc3QgR0lUSFVCX0xPR08gPSBgPHN2ZyB3aWR0aD0iYXV0byIgaGVpZ2h0PSJhdXRvIiB2aWV3Qm94PSIwIDAgMTM2IDEzMyIgdmVyc2lvbj0iMS4xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4bWw6c3BhY2U9InByZXNlcnZlIiB4bWxuczpzZXJpZj0iaHR0cDovL3d3dy5zZXJpZi5jb20vIiBzdHlsZT0iZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjI7Ij4KPGcgdHJhbnNmb3JtPSJtYXRyaXgoNC4xNjY2NywwLDAsNC4xNjY2NywtNTY4LC0xMzgxLjA2KSI+CiAgICA8cGF0aCBkPSJNMTUyLjYwOCwzMzEuNDU1QzE0My42MTQsMzMxLjQ1NSAxMzYuMzIsMzM4Ljc0OCAxMzYuMzIsMzQ3Ljc0NUMxMzYuMzIsMzU0Ljk0MiAxNDAuOTg3LDM2MS4wNDcgMTQ3LjQ2LDM2My4yMDFDMTQ4LjI3NSwzNjMuMzUxIDE0OC41NzIsMzYyLjg0OCAxNDguNTcyLDM2Mi40MTZDMTQ4LjU3MiwzNjIuMDI5IDE0OC41NTgsMzYxLjAwNSAxNDguNTUsMzU5LjY0NkMxNDQuMDE5LDM2MC42MyAxNDMuMDYzLDM1Ny40NjIgMTQzLjA2MywzNTcuNDYyQzE0Mi4zMjIsMzU1LjU4IDE0MS4yNTQsMzU1LjA3OSAxNDEuMjU0LDM1NS4wNzlDMTM5Ljc3NSwzNTQuMDY5IDE0MS4zNjYsMzU0LjA4OSAxNDEuMzY2LDM1NC4wODlDMTQzLjAwMSwzNTQuMjA0IDE0My44NjEsMzU1Ljc2OCAxNDMuODYxLDM1NS43NjhDMTQ1LjMxNCwzNTguMjU3IDE0Ny42NzQsMzU3LjUzOCAxNDguNjAyLDM1Ny4xMjFDMTQ4Ljc1LDM1Ni4wNjkgMTQ5LjE3MSwzNTUuMzUxIDE0OS42MzYsMzU0Ljk0NEMxNDYuMDE5LDM1NC41MzMgMTQyLjIxNiwzNTMuMTM1IDE0Mi4yMTYsMzQ2Ljg5M0MxNDIuMjE2LDM0NS4xMTUgMTQyLjg1MSwzNDMuNjYgMTQzLjg5MywzNDIuNTIyQzE0My43MjUsMzQyLjExIDE0My4xNjYsMzQwLjQ1MyAxNDQuMDUzLDMzOC4yMTFDMTQ0LjA1MywzMzguMjExIDE0NS40MiwzMzcuNzczIDE0OC41MzIsMzM5Ljg4MUMxNDkuODMxLDMzOS41MTkgMTUxLjIyNSwzMzkuMzM5IDE1Mi42MSwzMzkuMzMyQzE1My45OTQsMzM5LjMzOSAxNTUuMzg3LDMzOS41MTkgMTU2LjY4OCwzMzkuODgxQzE1OS43OTgsMzM3Ljc3MyAxNjEuMTYzLDMzOC4yMTEgMTYxLjE2MywzMzguMjExQzE2Mi4wNTIsMzQwLjQ1MyAxNjEuNDkzLDM0Mi4xMSAxNjEuMzI2LDM0Mi41MjJDMTYyLjM3LDM0My42NiAxNjMsMzQ1LjExNSAxNjMsMzQ2Ljg5M0MxNjMsMzUzLjE1MSAxNTkuMTkxLDM1NC41MjggMTU1LjU2MywzNTQuOTMxQzE1Ni4xNDcsMzU1LjQzNCAxNTYuNjY4LDM1Ni40MjggMTU2LjY2OCwzNTcuOTQ3QzE1Ni42NjgsMzYwLjEyNSAxNTYuNjQ4LDM2MS44ODIgMTU2LjY0OCwzNjIuNDE2QzE1Ni42NDgsMzYyLjg1MiAxNTYuOTQyLDM2My4zNTkgMTU3Ljc2OCwzNjMuMkMxNjQuMjM2LDM2MS4wNDEgMTY4Ljg5OSwzNTQuOTQgMTY4Ljg5OSwzNDcuNzQ1QzE2OC44OTksMzM4Ljc0OCAxNjEuNjA1LDMzMS40NTUgMTUyLjYwOCwzMzEuNDU1WiIgc3R5bGU9ImZpbGw6d2hpdGU7Ii8+CjwvZz4KPC9zdmc+YDsKZnVuY3Rpb24gYWN0aW9uSWNvbihpY29uLCBvcHRzID0gewp9KSB7CiAgICBjb25zdCB7IHRleHQgLCBvbmNsaWNrICB9ID0gb3B0czsKICAgIHJldHVybiBodG1sYDxkaXYgY2xhc3M9ImFjdGlvbi1pY29uIiBAY2xpY2s9JHsoZSk9PnsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgb25jbGljayAmJiBvbmNsaWNrKCk7CiAgICB9fT4ke2ljb259JHt0ZXh0IHx8ICcnfTwvZGl2PmA7Cn0KY29uc3QgQ0xFQVJfSUNPTiA9IHN2Z2A8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgaGVpZ2h0PSIyNCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjQiIGZpbGw9IiR7TWF0ZXJpYWwuaGlnaEVtcGhhc2lzVGV4dENvbG9yfSI+PHBhdGggZD0iTTAgMGgyNHYyNEgwVjB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTUgMTNoMTR2LTJINXYyem0tMiA0aDE0di0ySDN2MnpNNyA3djJoMTRWN0g3eiIvPjwvc3ZnPmA7CmNvbnN0IEVESVRfSUNPTiA9IHN2Z2A8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgaGVpZ2h0PSIyNCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjQiIGZpbGw9IiR7TWF0ZXJpYWwuaGlnaEVtcGhhc2lzVGV4dENvbG9yfSI+PHBhdGggZD0iTTAgMGgyNHYyNEgwVjB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTE0LjA2IDkuMDJsLjkyLjkyTDUuOTIgMTlINXYtLjkybDkuMDYtOS4wNk0xNy42NiAzYy0uMjUgMC0uNTEuMS0uNy4yOWwtMS44MyAxLjgzIDMuNzUgMy43NSAxLjgzLTEuODNjLjM5LS4zOS4zOS0xLjAyIDAtMS40MWwtMi4zNC0yLjM0Yy0uMi0uMi0uNDUtLjI5LS43MS0uMjl6bS0zLjYgMy4xOUwzIDE3LjI1VjIxaDMuNzVMMTcuODEgOS45NGwtMy43NS0zLjc1eiIvPjwvc3ZnPmA7CmNvbnN0IEFERF9JQ09OID0gc3ZnYDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBoZWlnaHQ9IjI0IiB2aWV3Qm94PSIwIDAgMjQgMjQiIHdpZHRoPSIyNCIgZmlsbD0iJHtNYXRlcmlhbC5oaWdoRW1waGFzaXNUZXh0Q29sb3J9Ij4+PHBhdGggZD0iTTAgMGgyNHYyNEgwVjB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnoiLz48L3N2Zz5gOwpjb25zdCBDSEVDS19CT1hfVU5DSEVDS0VEX0lDT04gPSBzdmdgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0IiBmaWxsPSIke01hdGVyaWFsLmhpZ2hFbXBoYXNpc1RleHRDb2xvcn0iPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMFYweiIgZmlsbD0ibm9uZSIvPjxwYXRoIGQ9Ik0xOSA1djE0SDVWNWgxNG0wLTJINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yeiIvPjwvc3ZnPmA7CmNvbnN0IENIRUNLX0JPWF9DSEVDS0VEX0lDT04gPSBzdmdgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0IiBmaWxsPSIke01hdGVyaWFsLmhpZ2hFbXBoYXNpc1RleHRDb2xvcn0iPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMFYweiIgZmlsbD0ibm9uZSIvPjxwYXRoIGQ9Ik0xOSAzSDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptMCAxNkg1VjVoMTR2MTR6TTE3Ljk5IDlsLTEuNDEtMS40Mi02LjU5IDYuNTktMi41OC0yLjU3LTEuNDIgMS40MSA0IDMuOTl6Ii8+PC9zdmc+YDsKY29uc3QgU0lERUJBUl9IVE1MID0gaHRtbGAKPGRpdiBpZD0ic2lkZWJhciI+CiAgICAke0hFQURFUl9IVE1MfQogICAgPGEgaWQ9InNpZGViYXItYWJvdXQiIGNsYXNzPSJvdmVybGluZSBtZWRpdW0tZW1waGFzaXMtdGV4dCIgaHJlZj0iIyI+QWJvdXQ8L2E+CiAgICA8ZGl2IGlkPSJwcm9maWxlcyI+PC9kaXY+CiAgICA8ZGl2IGlkPSJzY3JpcHRzIj48L2Rpdj4KPC9kaXY+CmA7CmNvbnN0IFNJREVCQVJfQ1NTID0gY3NzYAoKI3NpZGViYXIgewogICAgbWFyZ2luLWxlZnQ6IDFyZW07CiAgICBoZWlnaHQ6IDEwMHZoOwogICAgbWluLXdpZHRoOiAxNXJlbTsKfQoKI3NpZGViYXItYWJvdXQgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBtYXJnaW4tYm90dG9tOiAxcmVtOwp9Cgojc2lkZWJhciAuYnV0dG9uLWdyaWQgewogICAgZGlzcGxheTogZ3JpZDsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDJyZW07CiAgICBncmlkLWdhcDogMXB4OwogICAgbWFyZ2luLWxlZnQ6IDFweDsKICAgIG1hcmdpbi10b3A6IDFyZW07Cn0KCiNzaWRlYmFyIC5idXR0b24tZ3JpZC1uZXcgewogICAgZ3JpZC1jb2x1bW46IDE7CiAgICBtaW4td2lkdGg6IDhyZW07Cn0KCiNzaWRlYmFyIGJ1dHRvbiB7CiAgICBncmlkLWNvbHVtbjogMTsKfQoKI3NpZGViYXIgLmJ1dHRvbi1ncmlkIC5oaW50IHsKICAgIGdyaWQtY29sdW1uOiAxOyAKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKI3NjcmlwdHMtc2Nyb2xsZXIgewogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMThyZW0pOwp9CgpgOwpmdW5jdGlvbiBpbml0U2lkZWJhcihkb2N1bWVudCwgdm0sIGRhdGEpIHsKICAgIGNvbnN0IHVwZGF0ZUhlYWRlciA9IGluaXRIZWFkZXIoZG9jdW1lbnQsIHZtLCBkYXRhKTsKICAgIGNvbnN0IGFib3V0QW5jaG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NpZGViYXItYWJvdXQnKTsKICAgIGNvbnN0IHByb2ZpbGVzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGVzJyk7CiAgICBjb25zdCBzY3JpcHRzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NjcmlwdHMnKTsKICAgIGFib3V0QW5jaG9yLm9uY2xpY2sgPSAoZSk9PnsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdm0uc2hvd0Fib3V0KCk7CiAgICB9OwogICAgcmV0dXJuICgpPT57CiAgICAgICAgdXBkYXRlSGVhZGVyKCk7CiAgICAgICAgTGl0RWxlbWVudC5yZW5kZXIoUFJPRklMRVNfSFRNTCh2bSksIHByb2ZpbGVzRGl2KTsKICAgICAgICBMaXRFbGVtZW50LnJlbmRlcihTQ1JJUFRTX0hUTUwodm0pLCBzY3JpcHRzRGl2KTsKICAgIH07Cn0KY29uc3QgUFJPRklMRVNfSFRNTCA9ICh2bSk9Pmh0bWxgCiAgICA8ZGl2IGNsYXNzPSJvdmVybGluZSBtZWRpdW0tZW1waGFzaXMtdGV4dCI+UHJvZmlsZXM8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImJ1dHRvbi1ncmlkIj4KICAgICAgICAke3ZtLnByb2ZpbGVzLm1hcCgocHJvZmlsZSk9Pmh0bWxgPGJ1dHRvbiAKICAgICAgICAgICAgY2xhc3M9IiR7cHJvZmlsZS5pZCA9PT0gdm0uc2VsZWN0ZWRQcm9maWxlSWQgPyAnc2VsZWN0ZWQnIDogJyd9IiAKICAgICAgICAgICAgQGNsaWNrPSR7KCk9PnsKICAgICAgICAgICAgdm0uc2VsZWN0ZWRQcm9maWxlSWQgPSBwcm9maWxlLmlkOwogICAgICAgIH19CiAgICAgICAgICAgID9kaXNhYmxlZD0iJHt2bS5wcm9maWxlRm9ybS5zaG93aW5nfSI+JHtwcm9maWxlLnRleHR9PC9idXR0b24+CiAgICAgICAgJHtwcm9maWxlLmlkID09PSB2bS5zZWxlY3RlZFByb2ZpbGVJZCA/IGh0bWxgJHthY3Rpb25JY29uKEVESVRfSUNPTiwgewogICAgICAgICAgICBvbmNsaWNrOiAoKT0+dm0uZWRpdFByb2ZpbGUocHJvZmlsZS5pZCkKICAgICAgICB9KX1gIDogJyd9YAogICAgKX0KICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24tZ3JpZC1uZXciPiR7YWN0aW9uSWNvbihBRERfSUNPTiwgewogICAgICAgIHRleHQ6ICdOZXcnLAogICAgICAgIG9uY2xpY2s6ICgpPT52bS5uZXdQcm9maWxlKCkKICAgIH0pfTwvZGl2PgogICAgPC9kaXY+CmAKOwpjb25zdCBTQ1JJUFRTX0hUTUwgPSAodm0pPT5odG1sYAogICAgPGRpdiBjbGFzcz0ib3ZlcmxpbmUgbWVkaXVtLWVtcGhhc2lzLXRleHQiPlNjcmlwdHM8L2Rpdj4KICAgIDxkaXYgaWQ9InNjcmlwdHMtc2Nyb2xsZXIiIGNsYXNzPSJoaWRkZW4tdmVydGljYWwtc2Nyb2xsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24tZ3JpZCI+CiAgICAgICAgICAgICR7dm0uc2NyaXB0cy5tYXAoKHNjcmlwdCk9Pmh0bWxgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIke3ZtLnNlbGVjdGVkU2NyaXB0SWRzLmhhcyhzY3JpcHQuaWQpID8gJ3NlbGVjdGVkJyA6ICcnfSIgCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSR7KGUpPT5oYW5kbGVTY3JpcHRDbGljayhlLCBzY3JpcHQuaWQsIHZtKQogICAgICAgIH0gCiAgICAgICAgICAgICAgICAgICAgP2Rpc2FibGVkPSIke3ZtLnByb2ZpbGVGb3JtLnNob3dpbmd9Ij4ke3NjcmlwdC50ZXh0fTwvYnV0dG9uPgogICAgICAgICAgICBgCiAgICApfQogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJidXR0b24tZ3JpZCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FwdGlvbiBtZWRpdW0tZW1waGFzaXMtdGV4dCBoaW50Ij4ke2NvbXB1dGVNdWx0aXNlbGVjdEtleUNoYXIoKX0tY2xpY2sgdG8gbXVsdGlzZWxlY3Q8L2Rpdj4KICAgIDwvZGl2PgpgCjsKZnVuY3Rpb24gY29tcHV0ZU11bHRpc2VsZWN0S2V5Q2hhcigpIHsKICAgIHJldHVybiBpc01hY2ludG9zaCgpID8gJ+KMmCcgOiAnY3RybCc7Cn0KZnVuY3Rpb24gaXNNYWNpbnRvc2goKSB7CiAgICByZXR1cm4gbmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ01hYycpID4gLTE7Cn0KZnVuY3Rpb24gaGFuZGxlU2NyaXB0Q2xpY2soZSwgc2NyaXB0SWQsIHZtKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICBjb25zdCBuZXdTY3JpcHRJZHMgPSBuZXcgU2V0KFsKICAgICAgICBzY3JpcHRJZAogICAgXSk7CiAgICBjb25zdCBtdWx0aSA9IGlzTWFjaW50b3NoKCkgPyBlLm1ldGFLZXkgOiBlLmN0cmxLZXk7CiAgICB2bS5zZWxlY3RlZFNjcmlwdElkcyA9IG11bHRpID8gdm0uc2VsZWN0ZWRTY3JpcHRJZHMuaGFzKHNjcmlwdElkKSA/IHNldFN1YnRyYWN0KHZtLnNlbGVjdGVkU2NyaXB0SWRzLCBuZXdTY3JpcHRJZHMpIDogc2V0VW5pb24odm0uc2VsZWN0ZWRTY3JpcHRJZHMsIG5ld1NjcmlwdElkcykgOiBuZXdTY3JpcHRJZHM7Cn0KY2xhc3MgQXBwQ29uc3RhbnRzIHsKICAgIHN0YXRpYyBXRUJTT0NLRVRfUElOR19JTlRFUlZBTF9TRUNPTkRTID0gMTA7CiAgICBzdGF0aWMgSU5BQ1RJVkVfVEFJTF9TRUNPTkRTID0gNTsKfQpjbGFzcyBUYWlsQ29udHJvbGxlciB7CiAgICBjYWxsYmFja3M7CiAgICByZWNvcmRzID0gbmV3IE1hcCgpOwogICAgd2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kczsKICAgIGluYWN0aXZlVGFpbFNlY29uZHM7CiAgICB0YWlsT3B0aW9ucyA9IHsKICAgICAgICBmaWx0ZXJzOiBbXQogICAgfTsKICAgIG9ubGluZTsKICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrczIsIG9wdHMxKXsKICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrczI7CiAgICAgICAgdGhpcy53ZWJzb2NrZXRQaW5nSW50ZXJ2YWxTZWNvbmRzID0gb3B0czEud2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kczsKICAgICAgICB0aGlzLmluYWN0aXZlVGFpbFNlY29uZHMgPSBvcHRzMS5pbmFjdGl2ZVRhaWxTZWNvbmRzOwogICAgICAgIGNvbnN0IG5hdmlnYXRvckFzQW55ID0gd2luZG93Lm5hdmlnYXRvcjsKICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvckFzQW55Lm9uTGluZSA9PT0gJ2Jvb2xlYW4nKSB7CiAgICAgICAgICAgIHRoaXMuc2V0T25saW5lKG5hdmlnYXRvckFzQW55Lm9uTGluZSk7CiAgICAgICAgfQogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCAoKT0+dGhpcy5zZXRPbmxpbmUodHJ1ZSkKICAgICAgICApOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgKCk9PnRoaXMuc2V0T25saW5lKGZhbHNlKQogICAgICAgICk7CiAgICB9CiAgICBzZXRUYWlsT3B0aW9ucyh0YWlsT3B0aW9ucykgewogICAgICAgIGNvbnNvbGUubG9nKGBUYWlsQ29udHJvbGxlci5zZXRUYWlsT3B0aW9ucyAke0pTT04uc3RyaW5naWZ5KHRhaWxPcHRpb25zKX1gKTsKICAgICAgICB0aGlzLnRhaWxPcHRpb25zID0gdGFpbE9wdGlvbnM7CiAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgdGhpcy5yZWNvcmRzLnZhbHVlcygpKXsKICAgICAgICAgICAgaWYgKHJlY29yZC5jb25uZWN0aW9uKSB7CiAgICAgICAgICAgICAgICByZWNvcmQuY29ubmVjdGlvbi5zZXRPcHRpb25zKHRhaWxPcHRpb25zKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGFzeW5jIHNldFRhaWxzKGFjY291bnRJZCwgYXBpVG9rZW4sIHNjcmlwdElkcykgewogICAgICAgIGNvbnN0IHN0b3BLZXlzID0gc2V0U3VidHJhY3QodGhpcy5jb21wdXRlU3RhcnRpbmdPclN0YXJ0ZWRUYWlsS2V5cygpLCBuZXcgU2V0KFsKICAgICAgICAgICAgLi4uc2NyaXB0SWRzCiAgICAgICAgXS5tYXAoKHYpPT5wYWNrVGFpbEtleShhY2NvdW50SWQsIHYpCiAgICAgICAgKSkpOwogICAgICAgIGZvciAoY29uc3Qgc3RvcEtleSBvZiBzdG9wS2V5cyl7CiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IHRoaXMucmVjb3Jkcy5nZXQoc3RvcEtleSk7CiAgICAgICAgICAgIHJlY29yZC5zdGF0ZSA9ICdpbmFjdGl2ZSc7CiAgICAgICAgICAgIHJlY29yZC5zdG9wUmVxdWVzdGVkVGltZSA9IERhdGUubm93KCk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PnsKICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuc3RhdGUgPT09ICdpbmFjdGl2ZScgJiYgcmVjb3JkLnN0b3BSZXF1ZXN0ZWRUaW1lICYmIERhdGUubm93KCkgLSByZWNvcmQuc3RvcFJlcXVlc3RlZFRpbWUgPj0gdGhpcy5pbmFjdGl2ZVRhaWxTZWNvbmRzKSB7CiAgICAgICAgICAgICAgICAgICAgcmVjb3JkLnN0YXRlID0gJ3N0b3BwaW5nJzsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU3RvcHBpbmcgJHtyZWNvcmQuc2NyaXB0SWR9LCBpbmFjdGl2ZSBmb3IgJHtEYXRlLm5vdygpIC0gcmVjb3JkLnN0b3BSZXF1ZXN0ZWRUaW1lfW1zYCk7CiAgICAgICAgICAgICAgICAgICAgcmVjb3JkLmNvbm5lY3Rpb24/LmNsb3NlKDEwMDAsICdubyBsb25nZXIgaW50ZXJlc3RlZCcpOwogICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3Jkcy5kZWxldGUocmVjb3JkLnRhaWxLZXkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB0aGlzLmluYWN0aXZlVGFpbFNlY29uZHMgKiAxMDAwKTsKICAgICAgICB9CiAgICAgICAgaWYgKHN0b3BLZXlzLnNpemUgPiAwKSB7CiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hUYWlsc0NoYW5nZWQoKTsKICAgICAgICB9CiAgICAgICAgZm9yIChjb25zdCBzY3JpcHRJZCBvZiBzY3JpcHRJZHMpewogICAgICAgICAgICBjb25zdCB0YWlsS2V5ID0gcGFja1RhaWxLZXkoYWNjb3VudElkLCBzY3JpcHRJZCk7CiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUmVjb3JkID0gdGhpcy5yZWNvcmRzLmdldCh0YWlsS2V5KTsKICAgICAgICAgICAgaWYgKGV4aXN0aW5nUmVjb3JkKSB7CiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdSZWNvcmQuc3RhdGUgPT09ICdpbmFjdGl2ZScpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUmV2aXZpbmcgaW5hY3RpdmUgJHtzY3JpcHRJZH1gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV4aXN0aW5nUmVjb3JkLnN0YXRlID0gJ3N0YXJ0ZWQnOwogICAgICAgICAgICAgICAgZXhpc3RpbmdSZWNvcmQuc3RvcFJlcXVlc3RlZFRpbWUgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zdCByZWNvcmQgPSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdzdGFydGluZycsCiAgICAgICAgICAgICAgICAgICAgdGFpbEtleSwKICAgICAgICAgICAgICAgICAgICBhcGlUb2tlbiwKICAgICAgICAgICAgICAgICAgICBhY2NvdW50SWQsCiAgICAgICAgICAgICAgICAgICAgc2NyaXB0SWQsCiAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudEFmdGVyQ2xvc2U6IDAKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZHMuc2V0KHRhaWxLZXksIHJlY29yZCk7CiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0VGFpbENvbm5lY3Rpb24ocmVjb3JkKTsKICAgICAgICAgICAgICAgIHJlY29yZC5zdGF0ZSA9ICdzdGFydGVkJzsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmRpc3BhdGNoVGFpbHNDaGFuZ2VkKCk7CiAgICAgICAgfQogICAgfQogICAgZGlzcGF0Y2hUYWlsc0NoYW5nZWQoKSB7CiAgICAgICAgY29uc3QgdGFpbEtleXMgPSBuZXcgU2V0KFsKICAgICAgICAgICAgLi4udGhpcy5yZWNvcmRzLnZhbHVlcygpCiAgICAgICAgXS5maWx0ZXIoKHYpPT52LnN0YXRlID09PSAnc3RhcnRlZCcKICAgICAgICApLm1hcCgodik9PnYudGFpbEtleQogICAgICAgICkpOwogICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVGFpbHNDaGFuZ2VkKHRhaWxLZXlzKTsKICAgIH0KICAgIGNvbXB1dGVTdGFydGluZ09yU3RhcnRlZFRhaWxLZXlzKCkgewogICAgICAgIHJldHVybiBuZXcgU2V0KFsKICAgICAgICAgICAgLi4udGhpcy5yZWNvcmRzLnZhbHVlcygpCiAgICAgICAgXS5maWx0ZXIoKHYpPT52LnN0YXRlID09PSAnc3RhcnRpbmcnIHx8IHYuc3RhdGUgPT09ICdzdGFydGVkJwogICAgICAgICkubWFwKCh2KT0+di50YWlsS2V5CiAgICAgICAgKSk7CiAgICB9CiAgICBzZXRPbmxpbmUob25saW5lKSB7CiAgICAgICAgaWYgKG9ubGluZSA9PT0gdGhpcy5vbmxpbmUpIHJldHVybjsKICAgICAgICBjb25zdCBvbGRPbmxpbmUgPSB0aGlzLm9ubGluZTsKICAgICAgICB0aGlzLm9ubGluZSA9IG9ubGluZTsKICAgICAgICB0aGlzLmNhbGxiYWNrcy5vbk5ldHdvcmtTdGF0dXNDaGFuZ2VkKG9ubGluZSk7CiAgICAgICAgaWYgKHR5cGVvZiBvbGRPbmxpbmUgPT09ICdib29sZWFuJykgewogICAgICAgICAgICBpZiAob25saW5lKSB7CiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB0aGlzLnJlY29yZHMudmFsdWVzKCkpewogICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuc3RhdGUgPT09ICdzdGFydGVkJykgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGFjY291bnRJZCAsIHNjcmlwdElkICB9ID0gcmVjb3JkOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0VGFpbENvbm5lY3Rpb24ocmVjb3JkKS5jYXRjaCgoZSk9PnRoaXMuY2FsbGJhY2tzLm9uVGFpbEZhaWxlZFRvU3RhcnQoYWNjb3VudElkLCBzY3JpcHRJZCwgJ3Jlc3RhcnQtYWZ0ZXItY29taW5nLW9ubGluZScsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgdGhpcy5yZWNvcmRzLnZhbHVlcygpKXsKICAgICAgICAgICAgICAgICAgICByZWNvcmQuY29ubmVjdGlvbj8uY2xvc2UoMTAwMCwgJ29mZmxpbmUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGFzeW5jIHN0YXJ0VGFpbENvbm5lY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgY29uc3QgYWxsb3dlZFRvU3RhcnQgPSByZWNvcmQuc3RhdGUgPT09ICdzdGFydGluZycgfHwgcmVjb3JkLnN0YXRlID09PSAnc3RhcnRlZCc7CiAgICAgICAgaWYgKCFhbGxvd2VkVG9TdGFydCkgcmV0dXJuOwogICAgICAgIGNvbnN0IHsgYWNjb3VudElkICwgc2NyaXB0SWQgIH0gPSB1bnBhY2tUYWlsS2V5KHJlY29yZC50YWlsS2V5KTsKICAgICAgICBjb25zdCB7IGFwaVRva2VuICB9ID0gcmVjb3JkOwogICAgICAgIGlmICghcmVjb3JkLnRhaWwgfHwgRGF0ZS5ub3coKSA+IG5ldyBEYXRlKHJlY29yZC50YWlsLmV4cGlyZXNfYXQpLmdldFRpbWUoKSAtIDEwMDAgKiA2MCAqIDUpIHsKICAgICAgICAgICAgY29uc3QgdGFpbENyZWF0aW5nVGltZSA9IERhdGUubm93KCk7CiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVGFpbENyZWF0aW5nKGFjY291bnRJZCwgc2NyaXB0SWQpOwogICAgICAgICAgICBjb25zdCB0YWlsID0gYXdhaXQgY3JlYXRlVGFpbChhY2NvdW50SWQsIHNjcmlwdElkLCBhcGlUb2tlbik7CiAgICAgICAgICAgIHJlY29yZC50YWlsID0gdGFpbDsKICAgICAgICAgICAgdGhpcy5jYWxsYmFja3Mub25UYWlsQ3JlYXRlZChhY2NvdW50SWQsIHNjcmlwdElkLCBEYXRlLm5vdygpIC0gdGFpbENyZWF0aW5nVGltZSwgdGFpbCk7CiAgICAgICAgfQogICAgICAgIGlmIChyZWNvcmQuc3RhdGUgPT09ICdpbmFjdGl2ZScpIHJldHVybjsKICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAsIHdlYnNvY2tldFBpbmdJbnRlcnZhbFNlY29uZHMgIH0gPSB0aGlzOwogICAgICAgIGNvbnN0IGRpcyA9IHRoaXM7CiAgICAgICAgY29uc3Qgb3BlbmluZ1RpbWUgPSBEYXRlLm5vdygpOwogICAgICAgIGNvbnN0IHRhaWxDb25uZWN0aW9uQ2FsbGJhY2tzID0gewogICAgICAgICAgICBvbk9wZW4gKF9jbiwgdGltZVN0YW1wKSB7CiAgICAgICAgICAgICAgICByZWNvcmQucmV0cnlDb3VudEFmdGVyQ2xvc2UgPSAwOwogICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uVGFpbENvbm5lY3Rpb25PcGVuKGFjY291bnRJZCwgc2NyaXB0SWQsIHRpbWVTdGFtcCwgRGF0ZS5ub3coKSAtIG9wZW5pbmdUaW1lKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25DbG9zZSAoX2NuLCB0aW1lU3RhbXAsIGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uQ2xvc2UoYWNjb3VudElkLCBzY3JpcHRJZCwgdGltZVN0YW1wLCBjb2RlLCByZWFzb24sIHdhc0NsZWFuKTsKICAgICAgICAgICAgICAgIHJlY29yZC5jbG9zZVRpbWUgPSBEYXRlLm5vdygpOwogICAgICAgICAgICAgICAgaWYgKHJlY29yZC5zdGF0ZSA9PT0gJ3N0YXJ0ZWQnICYmIGRpcy5vbmxpbmUgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgcmVjb3JkLnJldHJ5Q291bnRBZnRlckNsb3NlKys7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsYXlTZWNvbmRzID0gTWF0aC5taW4ocmVjb3JkLnJldHJ5Q291bnRBZnRlckNsb3NlICogNSwgNjApOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBXaWxsIGF0dGVtcHQgdG8gcmVzdGFydCAke3NjcmlwdElkfSBpbiAke2RlbGF5U2Vjb25kc30gc2Vjb25kc2ApOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuc3RhdGUgPT09ICdzdGFydGVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZGlzLnN0YXJ0VGFpbENvbm5lY3Rpb24ocmVjb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5U2Vjb25kcyAqIDEwMDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBvbkVycm9yIChfY24sIHRpbWVTdGFtcCwgZXJyb3JJbmZvKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25UYWlsQ29ubmVjdGlvbkVycm9yKGFjY291bnRJZCwgc2NyaXB0SWQsIHRpbWVTdGFtcCwgZXJyb3JJbmZvKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25UYWlsTWVzc2FnZSAoX2NuLCB0aW1lU3RhbXAsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuc3RhdGUgIT09ICdzdGFydGVkJykgcmV0dXJuOwogICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uVGFpbENvbm5lY3Rpb25NZXNzYWdlKGFjY291bnRJZCwgc2NyaXB0SWQsIHRpbWVTdGFtcCwgbWVzc2FnZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uVW5wYXJzZWRNZXNzYWdlIChfY24sIHRpbWVTdGFtcCwgbWVzc2FnZSwgcGFyc2VFcnJvcikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29uVW5wYXJzZWRNZXNzYWdlJywgdGltZVN0YW1wLCBtZXNzYWdlLCBwYXJzZUVycm9yKTsKICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uVW5wYXJzZWRNZXNzYWdlKGFjY291bnRJZCwgc2NyaXB0SWQsIHRpbWVTdGFtcCwgbWVzc2FnZSwgcGFyc2VFcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHJlY29yZC5jb25uZWN0aW9uID0gbmV3IFRhaWxDb25uZWN0aW9uKHJlY29yZC50YWlsLnVybCwgdGFpbENvbm5lY3Rpb25DYWxsYmFja3MsIHsKICAgICAgICAgICAgd2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kcwogICAgICAgIH0pLnNldE9wdGlvbnModGhpcy50YWlsT3B0aW9ucyk7CiAgICB9Cn0KZnVuY3Rpb24gdW5wYWNrVGFpbEtleSh0YWlsS2V5KSB7CiAgICBjb25zdCBtID0gL14oW15ccy1dKyktKFteXHNdKykkLy5leGVjKHRhaWxLZXkpOwogICAgaWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0YWlsS2V5OiAke3RhaWxLZXl9YCk7CiAgICByZXR1cm4gewogICAgICAgIGFjY291bnRJZDogbVsxXSwKICAgICAgICBzY3JpcHRJZDogbVsyXQogICAgfTsKfQpmdW5jdGlvbiBwYWNrVGFpbEtleShhY2NvdW50SWQsIHNjcmlwdElkKSB7CiAgICByZXR1cm4gYCR7YWNjb3VudElkfS0ke3NjcmlwdElkfWA7Cn0KY2xhc3MgU3dpdGNoYWJsZVRhaWxDb250cm9sbGVyQ2FsbGJhY2tzIHsKICAgIGNhbGxiYWNrczsKICAgIGVuYWJsZWRGbjsKICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrczMsIGVuYWJsZWRGbjEpewogICAgICAgIHRoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzMzsKICAgICAgICB0aGlzLmVuYWJsZWRGbiA9IGVuYWJsZWRGbjE7CiAgICB9CiAgICBvblRhaWxDcmVhdGluZyhhY2NvdW50SWQsIHNjcmlwdElkKSB7CiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWRGbigpKSByZXR1cm47CiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25UYWlsQ3JlYXRpbmcoYWNjb3VudElkLCBzY3JpcHRJZCk7CiAgICB9CiAgICBvblRhaWxDcmVhdGVkKGFjY291bnRJZCwgc2NyaXB0SWQsIHRvb2tNaWxsaXMsIHRhaWwpIHsKICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZEZuKCkpIHJldHVybjsKICAgICAgICB0aGlzLmNhbGxiYWNrcy5vblRhaWxDcmVhdGVkKGFjY291bnRJZCwgc2NyaXB0SWQsIHRvb2tNaWxsaXMsIHRhaWwpOwogICAgfQogICAgb25UYWlsQ29ubmVjdGlvbk9wZW4oYWNjb3VudElkLCBzY3JpcHRJZCwgdGltZVN0YW1wLCB0b29rTWlsbGlzKSB7CiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWRGbigpKSByZXR1cm47CiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25UYWlsQ29ubmVjdGlvbk9wZW4oYWNjb3VudElkLCBzY3JpcHRJZCwgdGltZVN0YW1wLCB0b29rTWlsbGlzKTsKICAgIH0KICAgIG9uVGFpbENvbm5lY3Rpb25DbG9zZShhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pIHsKICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZEZuKCkpIHJldHVybjsKICAgICAgICB0aGlzLmNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uQ2xvc2UoYWNjb3VudElkLCBzY3JpcHRJZCwgdGltZVN0YW1wLCBjb2RlLCByZWFzb24sIHdhc0NsZWFuKTsKICAgIH0KICAgIG9uVGFpbENvbm5lY3Rpb25FcnJvcihhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIGVycm9ySW5mbykgewogICAgICAgIGlmICghdGhpcy5lbmFibGVkRm4oKSkgcmV0dXJuOwogICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVGFpbENvbm5lY3Rpb25FcnJvcihhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIGVycm9ySW5mbyk7CiAgICB9CiAgICBvblRhaWxDb25uZWN0aW9uTWVzc2FnZShhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIG1lc3NhZ2UpIHsKICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZEZuKCkpIHJldHVybjsKICAgICAgICB0aGlzLmNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uTWVzc2FnZShhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIG1lc3NhZ2UpOwogICAgfQogICAgb25UYWlsQ29ubmVjdGlvblVucGFyc2VkTWVzc2FnZShhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIG1lc3NhZ2UsIHBhcnNlRXJyb3IpIHsKICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZEZuKCkpIHJldHVybjsKICAgICAgICB0aGlzLmNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uVW5wYXJzZWRNZXNzYWdlKGFjY291bnRJZCwgc2NyaXB0SWQsIHRpbWVTdGFtcCwgbWVzc2FnZSwgcGFyc2VFcnJvcik7CiAgICB9CiAgICBvblRhaWxzQ2hhbmdlZCh0YWlscykgewogICAgICAgIGlmICghdGhpcy5lbmFibGVkRm4oKSkgcmV0dXJuOwogICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVGFpbHNDaGFuZ2VkKHRhaWxzKTsKICAgIH0KICAgIG9uTmV0d29ya1N0YXR1c0NoYW5nZWQob25saW5lKSB7CiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWRGbigpKSByZXR1cm47CiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25OZXR3b3JrU3RhdHVzQ2hhbmdlZChvbmxpbmUpOwogICAgfQogICAgb25UYWlsRmFpbGVkVG9TdGFydChhY2NvdW50SWQsIHNjcmlwdElkLCB0cmlnZ2VyLCBlcnJvcikgewogICAgICAgIGlmICghdGhpcy5lbmFibGVkRm4oKSkgcmV0dXJuOwogICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVGFpbEZhaWxlZFRvU3RhcnQoYWNjb3VudElkLCBzY3JpcHRJZCwgdHJpZ2dlciwgZXJyb3IpOwogICAgfQp9CmNsYXNzIERlbW9Nb2RlIHsKICAgIHN0YXRpYyBwcm9maWxlcyA9IFsKICAgICAgICB7CiAgICAgICAgICAgIGlkOiAncHJvZmlsZTEnLAogICAgICAgICAgICB0ZXh0OiAnY29ycC1wcm9maWxlJwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBpZDogJ3Byb2ZpbGUyJywKICAgICAgICAgICAgdGV4dDogJ3BlcnMtcHJvZmlsZScKICAgICAgICB9LCAKICAgIF07CiAgICBzdGF0aWMgc2VsZWN0ZWRQcm9maWxlSWQgPSAncHJvZmlsZTEnOwogICAgc3RhdGljIHNldFNlbGVjdGVkUHJvZmlsZUlkKF92YWx1ZSkgewogICAgfQogICAgc3RhdGljIHNjcmlwdHMgPSBbCiAgICAgICAgewogICAgICAgICAgICBpZDogJ3NjcmlwdDEnLAogICAgICAgICAgICB0ZXh0OiAnd29ya2VyMS1kZXYnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIGlkOiAnc2NyaXB0MicsCiAgICAgICAgICAgIHRleHQ6ICd3b3JrZXIxLXByb2QnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIGlkOiAnc2NyaXB0MycsCiAgICAgICAgICAgIHRleHQ6ICd3b3JrZXIyLWRldicKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgaWQ6ICdzY3JpcHQ0JywKICAgICAgICAgICAgdGV4dDogJ3dvcmtlcjItYmV0YScKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgaWQ6ICdzY3JpcHQ1JywKICAgICAgICAgICAgdGV4dDogJ3dvcmtlcjItcHJvZCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgaWQ6ICdzY3JpcHQ2JywKICAgICAgICAgICAgdGV4dDogJ2R1cmFibGUtb2JqZWN0LWRlbW8nCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIGlkOiAnc2NyaXB0NycsCiAgICAgICAgICAgIHRleHQ6ICdzZWNyZXQtYXBwJwogICAgICAgIH0sIAogICAgXTsKICAgIHN0YXRpYyBzZWxlY3RlZFNjcmlwdElkcyA9IG5ldyBTZXQoWwogICAgICAgICdzY3JpcHQ3JywKICAgICAgICAnc2NyaXB0NCcKICAgIF0pOwogICAgc3RhdGljIHNldFNlbGVjdGVkU2NyaXB0SWRzKF9zY3JpcHRJZHMpIHsKICAgIH0KICAgIHN0YXRpYyB0YWlscyA9IG5ldyBTZXQoKTsKICAgIHN0YXRpYyBsb2dGYWtlT3V0cHV0KGNhbGxiYWNrcykgewogICAgICAgIGNvbnN0IGFjY291bnRJZCA9ICcxNWE3ZmEzYTM3MjU0ZmU0YTdjYWRkMWJiMjc2Mjg3OSc7CiAgICAgICAgY29uc3Qgc2NyaXB0SWQgPSAnc2VjcmV0LWFwcCc7CiAgICAgICAgY2FsbGJhY2tzLm9uVGFpbENyZWF0aW5nKGFjY291bnRJZCwgc2NyaXB0SWQpOwogICAgICAgIGNvbnN0IHRhaWwgPSB7CiAgICAgICAgICAgIGlkOiAnZGIxOWViOGJlOWY0NDQzYWFiOTFhOTA0MmMwZDM1MTcnLAogICAgICAgICAgICB1cmw6ICd3c3M6Ly90YWlsLmRldmVsb3BlcnMud29ya2Vycy5kZXYvZGIxOWViOGJlOWY0NDQzYWFiOTFhOTA0MmMwZDM1MTcnLAogICAgICAgICAgICAnZXhwaXJlc19hdCc6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKQogICAgICAgIH07CiAgICAgICAgY2FsbGJhY2tzLm9uVGFpbENyZWF0ZWQoYWNjb3VudElkLCBzY3JpcHRJZCwgMTU1LCB0YWlsKTsKICAgICAgICBjYWxsYmFja3Mub25UYWlsc0NoYW5nZWQobmV3IFNldChbCiAgICAgICAgICAgIHBhY2tUYWlsS2V5KGFjY291bnRJZCwgc2NyaXB0SWQpCiAgICAgICAgXSkpOwogICAgICAgIGNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uT3BlbihhY2NvdW50SWQsIHNjcmlwdElkLCBEYXRlLm5vdygpLCA0Mik7CiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDI7IGkrKyl7CiAgICAgICAgICAgIGNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uTWVzc2FnZShhY2NvdW50SWQsIHNjcmlwdElkLCBEYXRlLm5vdygpLCBjb21wdXRlRmFrZVJlcXVlc3QoKSk7CiAgICAgICAgICAgIGNhbGxiYWNrcy5vblRhaWxDb25uZWN0aW9uTWVzc2FnZShhY2NvdW50SWQsIHNjcmlwdElkLCBEYXRlLm5vdygpLCBjb21wdXRlRmFrZURvUmVxdWVzdCgpKTsKICAgICAgICAgICAgY2FsbGJhY2tzLm9uVGFpbENvbm5lY3Rpb25NZXNzYWdlKGFjY291bnRJZCwgc2NyaXB0SWQsIERhdGUubm93KCksIGNvbXB1dGVGYWtlUmVxdWVzdFdpdGhMb2dzKCkpOwogICAgICAgICAgICBjYWxsYmFja3Mub25UYWlsQ29ubmVjdGlvbk1lc3NhZ2UoYWNjb3VudElkLCBzY3JpcHRJZCwgRGF0ZS5ub3coKSwgY29tcHV0ZUZha2VSZXF1ZXN0RXhjZWVkaW5nVGltZUxpbWl0KCkpOwogICAgICAgIH0KICAgIH0KfQpjb25zdCBVU0VSX0FHRU5UID0gJ01vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwLjE1OyBydjo5MS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzkxLjAnOwpmdW5jdGlvbiBjb21wdXRlRmFrZVJlcXVlc3QoKSB7CiAgICBjb25zdCBydCA9IHsKICAgICAgICBldmVudDogewogICAgICAgICAgICByZXF1ZXN0OiB7CiAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL2VuZHBvaW50JywKICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ2NmLWNvbm5lY3RpbmctaXAnOiAnMjAzLjAuMTEzLjEyJywKICAgICAgICAgICAgICAgICAgICAndXNlci1hZ2VudCc6IFVTRVJfQUdFTlQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjZjogewogICAgICAgICAgICAgICAgICAgIGNvbG86ICdERlcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGxvZ3M6IFtdLAogICAgICAgIGV4Y2VwdGlvbnM6IFtdLAogICAgICAgIGV2ZW50VGltZXN0YW1wOiBEYXRlLm5vdygpLAogICAgICAgIG91dGNvbWU6ICdvaycKICAgIH07CiAgICByZXR1cm4gcnQ7Cn0KZnVuY3Rpb24gY29tcHV0ZUZha2VEb1JlcXVlc3QoKSB7CiAgICBjb25zdCBydCA9IHsKICAgICAgICBldmVudDogewogICAgICAgICAgICByZXF1ZXN0OiB7CiAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2Zha2UtaG9zdC9wdXQnLAogICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbG9nczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsZXZlbDogJ2xvZycsCiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgICAgICAgICBtZXNzYWdlOiBbCiAgICAgICAgICAgICAgICAgICAgJ2xvZ3Byb3BzOicsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvOiAnRVdSJywKICAgICAgICAgICAgICAgICAgICAgICAgZHVyYWJsZU9iamVjdENsYXNzOiAnTG9nZ2VyRE8nLAogICAgICAgICAgICAgICAgICAgICAgICBkdXJhYmxlT2JqZWN0SWQ6ICc1MzhmYzdjZTU1YjE0ZTUzYjZiODU1MmJlZmViOWFmNCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmFibGVPYmplY3ROYW1lOiAnbG9nMScKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sIAogICAgICAgIF0sCiAgICAgICAgZXhjZXB0aW9uczogW10sCiAgICAgICAgZXZlbnRUaW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgb3V0Y29tZTogJ29rJwogICAgfTsKICAgIHJldHVybiBydDsKfQpmdW5jdGlvbiBjb21wdXRlRmFrZVJlcXVlc3RXaXRoTG9ncygpIHsKICAgIGNvbnN0IHJ0ID0gewogICAgICAgIGV2ZW50OiB7CiAgICAgICAgICAgIHJlcXVlc3Q6IHsKICAgICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vbXktd29ya2VyLnN1YmRvbWFpbi53b3JrZXJzLmRldi90ZXN0P2xvZz10cnVlJywKICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ2NmLWNvbm5lY3RpbmctaXAnOiAnMjAzLjAuMTEzLjEyJywKICAgICAgICAgICAgICAgICAgICAndXNlci1hZ2VudCc6IFVTRVJfQUdFTlQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjZjogewogICAgICAgICAgICAgICAgICAgIGNvbG86ICdERlcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGxvZ3M6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGV2ZWw6ICdsb2cnLAogICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLAogICAgICAgICAgICAgICAgbWVzc2FnZTogWwogICAgICAgICAgICAgICAgICAgICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0JwogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsZXZlbDogJ2Vycm9yJywKICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFsKICAgICAgICAgICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCcKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGV2ZWw6ICdpbmZvJywKICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFsKICAgICAgICAgICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCcKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGV2ZWw6ICd3YXJuaW5nJywKICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFsKICAgICAgICAgICAgICAgICAgICAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCcKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGV2ZWw6ICdkZWJ1ZycsCiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgICAgICAgICBtZXNzYWdlOiBbCiAgICAgICAgICAgICAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQnCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sIAogICAgICAgIF0sCiAgICAgICAgZXhjZXB0aW9uczogW10sCiAgICAgICAgZXZlbnRUaW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgb3V0Y29tZTogJ29rJwogICAgfTsKICAgIHJldHVybiBydDsKfQpmdW5jdGlvbiBjb21wdXRlRmFrZVJlcXVlc3RFeGNlZWRpbmdUaW1lTGltaXQoKSB7CiAgICBjb25zdCBydCA9IHsKICAgICAgICBldmVudDogewogICAgICAgICAgICByZXF1ZXN0OiB7CiAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL215LXdvcmtlci5zdWJkb21haW4ud29ya2Vycy5kZXYvY29tcHV0ZS1kaWdpdHMtb2YtcGknLAogICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnY2YtY29ubmVjdGluZy1pcCc6ICcyMDMuMC4xMTMuMTInLAogICAgICAgICAgICAgICAgICAgICd1c2VyLWFnZW50JzogVVNFUl9BR0VOVAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNmOiB7CiAgICAgICAgICAgICAgICAgICAgY29sbzogJ0RGVycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbG9nczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsZXZlbDogJ2xvZycsCiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgICAgICAgICBtZXNzYWdlOiBbCiAgICAgICAgICAgICAgICAgICAgJ2J1cm5pbmcgY3B1JwogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LCAKICAgICAgICBdLAogICAgICAgIGV4Y2VwdGlvbnM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogJ0Vycm9yJywKICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdXb3JrZXIgZXhjZWVkZWQgQ1BVIHRpbWUgbGltaXQuJwogICAgICAgICAgICB9LCAKICAgICAgICBdLAogICAgICAgIGV2ZW50VGltZXN0YW1wOiBEYXRlLm5vdygpLAogICAgICAgIG91dGNvbWU6ICdleGNlZWRlZENwdScKICAgIH07CiAgICByZXR1cm4gcnQ7Cn0KY2xhc3MgUXBzQ29udHJvbGxlciB7CiAgICBzb3J0ZWRFdmVudFRpbWVzID0gW107CiAgICBjYWxsYmFja3M7CiAgICBuOwogICAgX3FwcyA9IDA7CiAgICBnZXQgcXBzKCkgewogICAgICAgIHJldHVybiB0aGlzLl9xcHM7CiAgICB9CiAgICBjb25zdHJ1Y3RvcihuMiwgY2FsbGJhY2tzNCl7CiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M0OwogICAgICAgIHRoaXMubiA9IG4yOwogICAgfQogICAgYWRkRXZlbnQoZXZlbnRUaW1lKSB7CiAgICAgICAgY29uc3QgcXBzID0gY29tcHV0ZVFwcyh0aGlzLm4sIHRoaXMuc29ydGVkRXZlbnRUaW1lcywgZXZlbnRUaW1lKTsKICAgICAgICBpZiAocXBzID09PSB0aGlzLl9xcHMpIHJldHVybjsKICAgICAgICB0aGlzLl9xcHMgPSBxcHM7CiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25RcHNDaGFuZ2VkKHFwcyk7CiAgICB9Cn0KZnVuY3Rpb24gY29tcHV0ZVFwcyhuLCBzb3J0ZWRFdmVudFRpbWVzLCBldmVudFRpbWUpIHsKICAgIGFkZChldmVudFRpbWUsIHNvcnRlZEV2ZW50VGltZXMpOwogICAgd2hpbGUoc29ydGVkRXZlbnRUaW1lcy5sZW5ndGggPiBuKXsKICAgICAgICBzb3J0ZWRFdmVudFRpbWVzLnNoaWZ0KCk7CiAgICB9CiAgICBjb25zdCBudW0gPSBzb3J0ZWRFdmVudFRpbWVzLmxlbmd0aDsKICAgIGlmIChudW0gPCAyKSByZXR1cm4gMDsKICAgIGNvbnN0IHRpbWVEaWZmU2Vjb25kcyA9IChzb3J0ZWRFdmVudFRpbWVzW3NvcnRlZEV2ZW50VGltZXMubGVuZ3RoIC0gMV0gLSBzb3J0ZWRFdmVudFRpbWVzWzBdKSAvIDEwMDA7CiAgICByZXR1cm4gKG51bSAtIDEpIC8gdGltZURpZmZTZWNvbmRzOwp9CmZ1bmN0aW9uIGFkZChlbCwgYXJyKSB7CiAgICBhcnIuc3BsaWNlKGZpbmRMb2MoZWwsIGFycikgKyAxLCAwLCBlbCk7CiAgICByZXR1cm4gYXJyOwp9CmZ1bmN0aW9uIGZpbmRMb2MoZWwsIGFyciwgc3QsIGVuKSB7CiAgICBzdCA9IHN0IHx8IDA7CiAgICBlbiA9IGVuIHx8IGFyci5sZW5ndGg7CiAgICBmb3IobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKXsKICAgICAgICBpZiAoYXJyW2ldID4gZWwpIHsKICAgICAgICAgICAgcmV0dXJuIGkgLSAxOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBlbjsKfQpmdW5jdGlvbiBzZXRFcXVhbDEobGhzLCByaHMpIHsKICAgIHJldHVybiBsaHMuc2l6ZSA9PT0gcmhzLnNpemUgJiYgWwogICAgICAgIC4uLmxocwogICAgXS5ldmVyeSgodik9PnJocy5oYXModikKICAgICk7Cn0KY29uc3QgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0tFWVMxID0gbmV3IFNldChbCiAgICAnb3V0Y29tZScsCiAgICAnc2NyaXB0TmFtZScsCiAgICAnZXhjZXB0aW9ucycsCiAgICAnbG9ncycsCiAgICAnZXZlbnRUaW1lc3RhbXAnLAogICAgJ2V2ZW50JwpdKTsKY29uc3QgS05PV05fT1VUQ09NRVMxID0gbmV3IFNldChbCiAgICAnb2snLAogICAgJ2V4Y2VwdGlvbicsCiAgICAnZXhjZWVkZWRDcHUnLAogICAgJ2NhbmNlbGVkJywKICAgICd1bmtub3duJwpdKTsKY29uc3QgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0xPR19LRVlTMSA9IG5ldyBTZXQoWwogICAgJ21lc3NhZ2UnLAogICAgJ2xldmVsJywKICAgICd0aW1lc3RhbXAnCl0pOwpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfRVhDRVBUSU9OX0tFWVMxID0gbmV3IFNldChbCiAgICAnbmFtZScsCiAgICAnbWVzc2FnZScsCiAgICAndGltZXN0YW1wJwpdKTsKY29uc3QgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0NST05fRVZFTlRfS0VZUzEgPSBuZXcgU2V0KFsKICAgICdjcm9uJywKICAgICdzY2hlZHVsZWRUaW1lJwpdKTsKZnVuY3Rpb24gaXNUYWlsTWVzc2FnZUNyb25FdmVudDEob2JqKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgcmV0dXJuIGZhbHNlOwogICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoT2JqZWN0LmtleXMob2JqKSk7CiAgICByZXR1cm4gc2V0RXF1YWwxKGtleXMsIFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9DUk9OX0VWRU5UX0tFWVMxKTsKfQpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfUkVRVUVTVF9FVkVOVF9LRVlTMSA9IG5ldyBTZXQoWwogICAgJ3JlcXVlc3QnCl0pOwpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfRVZFTlRfUkVRVUVTVF9LRVlTMSA9IG5ldyBTZXQoWwogICAgJ3VybCcsCiAgICAnbWV0aG9kJywKICAgICdoZWFkZXJzJwpdKTsKY29uc3QgT1BUSU9OQUxfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUzEgPSBuZXcgU2V0KFsKICAgICdjZicKXSk7CmZ1bmN0aW9uIGR1bXBNZXNzYWdlUHJldHR5KG1lc3NhZ2UsIGxvZ2dlciwgYWRkaXRpb25hbExvZ3MgPSBbXSkgewogICAgY29uc3QgdGltZSA9IGZvcm1hdExvY2FsWXl5eU1tRGRIaE1tU3MxKG5ldyBEYXRlKG1lc3NhZ2UuZXZlbnRUaW1lc3RhbXApKTsKICAgIGNvbnN0IG91dGNvbWUgPSBQUkVUVFlfT1VUQ09NRVMxLmdldChtZXNzYWdlLm91dGNvbWUpIHx8IG1lc3NhZ2Uub3V0Y29tZTsKICAgIGNvbnN0IG91dGNvbWVDb2xvciA9IG1lc3NhZ2Uub3V0Y29tZSA9PT0gJ29rJyA/ICdncmVlbicgOiAncmVkJzsKICAgIGNvbnN0IHsgcHJvcHMgLCByZW1haW5pbmdMb2dzICB9ID0gcGFyc2VMb2dQcm9wcyhtZXNzYWdlLmxvZ3MpOwogICAgaWYgKGlzVGFpbE1lc3NhZ2VDcm9uRXZlbnQxKG1lc3NhZ2UuZXZlbnQpKSB7CiAgICAgICAgY29uc3QgY29sbyA9IHByb3BzLmNvbG8gfHwgJz8/Pyc7CiAgICAgICAgbG9nZ2VyKGBbJWMke3RpbWV9JWNdIFslYyR7Y29sb30lY10gWyVjJHtvdXRjb21lfSVjXSAlYyR7bWVzc2FnZS5ldmVudC5jcm9ufWAsICdjb2xvcjogZ3JheScsICcnLCAnY29sb3I6IGdyYXknLCAnJywgYGNvbG9yOiAke291dGNvbWVDb2xvcn1gLCAnJywgJ2NvbG9yOiByZWQ7IGZvbnQtc3R5bGU6IGJvbGQ7Jyk7CiAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IHsgbWV0aG9kICwgdXJsICwgY2YgIH0gPSBtZXNzYWdlLmV2ZW50LnJlcXVlc3Q7CiAgICAgICAgY29uc3QgY29sbyA9IGNmPy5jb2xvIHx8IHByb3BzLmNvbG8gfHwgJz8/Pyc7CiAgICAgICAgaWYgKGNmID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgY29uc3QgeyBkdXJhYmxlT2JqZWN0Q2xhc3MgLCBkdXJhYmxlT2JqZWN0TmFtZSAsIGR1cmFibGVPYmplY3RJZCAgfSA9IGNvbXB1dGVEdXJhYmxlT2JqZWN0SW5mbyhwcm9wcyk7CiAgICAgICAgICAgIGNvbnN0IGRvVGVtcGxhdGVzID0gW107CiAgICAgICAgICAgIGNvbnN0IGRvU3R5bGVzID0gW107CiAgICAgICAgICAgIGlmIChkdXJhYmxlT2JqZWN0Q2xhc3MpIHsKICAgICAgICAgICAgICAgIGRvVGVtcGxhdGVzLnB1c2goYCVjJHtkdXJhYmxlT2JqZWN0Q2xhc3N9JWNgKTsKICAgICAgICAgICAgICAgIGRvU3R5bGVzLnB1c2goYGNvbG9yOiBncmF5OyB4LWR1cmFibGUtb2JqZWN0LWNsYXNzOiAnJHtkdXJhYmxlT2JqZWN0Q2xhc3N9J2AsICcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZHVyYWJsZU9iamVjdE5hbWUpIHsKICAgICAgICAgICAgICAgIGRvVGVtcGxhdGVzLnB1c2goYCVjJHtkdXJhYmxlT2JqZWN0TmFtZX0lY2ApOwogICAgICAgICAgICAgICAgZG9TdHlsZXMucHVzaChgY29sb3I6IGdyYXk7IHgtZHVyYWJsZS1vYmplY3QtbmFtZTogJyR7ZHVyYWJsZU9iamVjdE5hbWV9J2AsICcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZHVyYWJsZU9iamVjdElkKSB7CiAgICAgICAgICAgICAgICBkb1RlbXBsYXRlcy5wdXNoKGAlYyR7Y29tcHV0ZVNob3J0RHVyYWJsZU9iamVjdElkKGR1cmFibGVPYmplY3RJZCl9JWNgKTsKICAgICAgICAgICAgICAgIGRvU3R5bGVzLnB1c2goYGNvbG9yOiBncmF5OyB4LWR1cmFibGUtb2JqZWN0LWlkOiAnJHtkdXJhYmxlT2JqZWN0SWR9J2AsICcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZG9UZW1wbGF0ZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICBkb1RlbXBsYXRlcy5wdXNoKGAlY0RPJWNgKTsKICAgICAgICAgICAgICAgIGRvU3R5bGVzLnB1c2goJ2NvbG9yOiBncmF5JywgJycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxvZ2dlcihgWyVjJHt0aW1lfSVjXSBbJWMke2NvbG99JWNdIFslYyR7b3V0Y29tZX0lY10gWyR7ZG9UZW1wbGF0ZXMuam9pbignICcpfV0gJHttZXRob2R9ICVjJHt1cmx9YCwgJ2NvbG9yOiBncmF5JywgJycsICdjb2xvcjogZ3JheScsICcnLCBgY29sb3I6ICR7b3V0Y29tZUNvbG9yfWAsICcnLCAuLi5kb1N0eWxlcywgJ2NvbG9yOiByZWQ7IGZvbnQtc3R5bGU6IGJvbGQ7Jyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbG9nZ2VyKGBbJWMke3RpbWV9JWNdIFslYyR7Y29sb30lY10gWyVjJHtvdXRjb21lfSVjXSAke21ldGhvZH0gJWMke3VybH1gLCAnY29sb3I6IGdyYXknLCAnJywgJ2NvbG9yOiBncmF5JywgJycsIGBjb2xvcjogJHtvdXRjb21lQ29sb3J9YCwgJycsICdjb2xvcjogcmVkOyBmb250LXN0eWxlOiBib2xkOycpOwogICAgICAgIH0KICAgIH0KICAgIGZvciAoY29uc3QgeyBkYXRhICB9IG9mIGFkZGl0aW9uYWxMb2dzKXsKICAgICAgICBsb2dnZXIoLi4uZGF0YSk7CiAgICB9CiAgICBmb3IgKGNvbnN0IHsgbGV2ZWwgLCBtZXNzYWdlOiBsb2dNZXNzYWdlICB9IG9mIHJlbWFpbmluZ0xvZ3MpewogICAgICAgIGNvbnN0IGxldmVsQ29sb3IgPSBMT0dfTEVWRUxfQ09MT1JTMS5nZXQobGV2ZWwpIHx8ICdncmF5JzsKICAgICAgICBjb25zdCBsb2dNZXNzYWdlcyA9IGxvZ01lc3NhZ2UubWFwKGZvcm1hdExvZ01lc3NhZ2VQYXJ0KS5qb2luKCcsICcpOwogICAgICAgIGxvZ2dlcihgICVjfCVjIFslYyR7bGV2ZWx9JWNdICR7bG9nTWVzc2FnZXN9YCwgJ2NvbG9yOiBncmF5JywgJycsIGBjb2xvcjogJHtsZXZlbENvbG9yfWAsICcnKTsKICAgIH0KICAgIGZvciAoY29uc3QgeyBuYW1lICwgbWVzc2FnZTogZXhjZXB0aW9uTWVzc2FnZSAgfSBvZiBtZXNzYWdlLmV4Y2VwdGlvbnMpewogICAgICAgIGxvZ2dlcihgICVjfCVjIFslYyR7bmFtZX0lY10gJWMke2V4Y2VwdGlvbk1lc3NhZ2V9YCwgJ2NvbG9yOiBncmF5JywgJycsIGBjb2xvcjogcmVkOyBmb250LXN0eWxlOiBib2xkYCwgJycsICdjb2xvcjogcmVkJyk7CiAgICB9Cn0KZnVuY3Rpb24gZm9ybWF0TG9jYWxZeXl5TW1EZEhoTW1TczEoZGF0ZSkgewogICAgcmV0dXJuIFsKICAgICAgICBkYXRlLmdldEZ1bGxZZWFyKCksCiAgICAgICAgJy0nLAogICAgICAgIHBhZDIxKGRhdGUuZ2V0TW9udGgoKSArIDEpLAogICAgICAgICctJywKICAgICAgICBwYWQyMShkYXRlLmdldERhdGUoKSksCiAgICAgICAgJyAnLAogICAgICAgIHBhZDIxKGRhdGUuZ2V0SG91cnMoKSksCiAgICAgICAgJzonLAogICAgICAgIHBhZDIxKGRhdGUuZ2V0TWludXRlcygpKSwKICAgICAgICAnOicsCiAgICAgICAgcGFkMjEoZGF0ZS5nZXRTZWNvbmRzKCkpCiAgICBdLmpvaW4oJycpOwp9CmZ1bmN0aW9uIHBhcnNlTG9nUHJvcHMobG9ncykgewogICAgY29uc3QgcmVtYWluaW5nTG9ncyA9IFtdOwogICAgY29uc3QgcHJvcHMgPSB7CiAgICB9OwogICAgZm9yIChjb25zdCBsb2cgb2YgbG9ncyl7CiAgICAgICAgaWYgKGxvZy5tZXNzYWdlLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgY29uc3QgbXNnID0gbG9nLm1lc3NhZ2VbMF07CiAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJyAmJiBtc2cuc3RhcnRzV2l0aCgnbG9ncHJvcHM6JykpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHRyYWlsZXIgPSBtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCc6JykgKyAxKTsKICAgICAgICAgICAgICAgIGNvbnN0IHRyYWlsZXJQcm9wcyA9IHRyeVBhcnNlUHJvcHNGcm9tSnNvbih0cmFpbGVyKTsKICAgICAgICAgICAgICAgIGFwcGVuZFByb3BzKHRyYWlsZXJQcm9wcywgcHJvcHMpOwogICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGxvZy5tZXNzYWdlLnNsaWNlKDEpKXsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0UHJvcHMgPSB0cnlQYXJzZVByb3BzRnJvbVBhcnQocGFydCk7CiAgICAgICAgICAgICAgICAgICAgYXBwZW5kUHJvcHMocGFydFByb3BzLCBwcm9wcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZW1haW5pbmdMb2dzLnB1c2gobG9nKTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgICAgcHJvcHMsCiAgICAgICAgcmVtYWluaW5nTG9ncwogICAgfTsKfQpmdW5jdGlvbiBjb21wdXRlRHVyYWJsZU9iamVjdEluZm8ocHJvcHMpIHsKICAgIGNvbnN0IGR1cmFibGVPYmplY3RDbGFzcyA9IHVuZGVmaW5lZElmRW1wdHkoKHR5cGVvZiBwcm9wcy5kdXJhYmxlT2JqZWN0Q2xhc3MgPT09ICdzdHJpbmcnID8gcHJvcHMuZHVyYWJsZU9iamVjdENsYXNzIDogJycpLnRyaW0oKSk7CiAgICBjb25zdCBkdXJhYmxlT2JqZWN0SWQgPSB1bmRlZmluZWRJZkVtcHR5KCh0eXBlb2YgcHJvcHMuZHVyYWJsZU9iamVjdElkID09PSAnc3RyaW5nJyA/IHByb3BzLmR1cmFibGVPYmplY3RJZCA6ICcnKS50cmltKCkpOwogICAgY29uc3QgZHVyYWJsZU9iamVjdE5hbWUgPSB1bmRlZmluZWRJZkVtcHR5KCh0eXBlb2YgcHJvcHMuZHVyYWJsZU9iamVjdE5hbWUgPT09ICdzdHJpbmcnID8gcHJvcHMuZHVyYWJsZU9iamVjdE5hbWUgOiAnJykudHJpbSgpKTsKICAgIHJldHVybiB7CiAgICAgICAgZHVyYWJsZU9iamVjdENsYXNzLAogICAgICAgIGR1cmFibGVPYmplY3RJZCwKICAgICAgICBkdXJhYmxlT2JqZWN0TmFtZQogICAgfTsKfQpmdW5jdGlvbiB1bmRlZmluZWRJZkVtcHR5KHN0cikgewogICAgcmV0dXJuIHN0ciA9PT0gJycgPyB1bmRlZmluZWQgOiBzdHI7Cn0KZnVuY3Rpb24gY29tcHV0ZVNob3J0RHVyYWJsZU9iamVjdElkKGlkKSB7CiAgICByZXR1cm4gL15bMC05YS1mQS1GXXs1LH0kLy50ZXN0KGlkKSA/IGAke2lkLnN1YnN0cmluZygwLCA0KX3igKZgIDogaWQ7Cn0KZnVuY3Rpb24gYXBwZW5kUHJvcHMoc3JjLCBkc3QpIHsKICAgIGlmIChzcmMpIHsKICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzcmMpKXsKICAgICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9Cn0KZnVuY3Rpb24gdHJ5UGFyc2VQcm9wc0Zyb21Kc29uKHZhbHVlKSB7CiAgICB0cnkgewogICAgICAgIGNvbnN0IHByb3BzID0gSlNPTi5wYXJzZSh2YWx1ZS50cmltKCkpOwogICAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdvYmplY3QnICYmIHByb3BzICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkgewogICAgICAgICAgICByZXR1cm4gcHJvcHM7CiAgICAgICAgfQogICAgfSBjYXRjaCAgewogICAgfQogICAgcmV0dXJuIHVuZGVmaW5lZDsKfQpmdW5jdGlvbiB0cnlQYXJzZVByb3BzRnJvbVBhcnQocGFydCkgewogICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIHBhcnQgPT09ICdvYmplY3QnICYmIHBhcnQgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkocGFydCkpIHsKICAgICAgICAgICAgcmV0dXJuIHBhcnQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAgewogICAgfQogICAgcmV0dXJuIHVuZGVmaW5lZDsKfQpmdW5jdGlvbiBmb3JtYXRMb2dNZXNzYWdlUGFydChwYXJ0KSB7CiAgICBpZiAodHlwZW9mIHBhcnQgPT09ICdvYmplY3QnKSByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGFydCk7CiAgICByZXR1cm4gYCR7cGFydH1gOwp9CmZ1bmN0aW9uIHBhZDIxKG51bSkgewogICAgcmV0dXJuIG51bS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7Cn0KY29uc3QgUFJFVFRZX09VVENPTUVTMSA9IG5ldyBNYXAoWwogICAgWwogICAgICAgICdvaycsCiAgICAgICAgJ09rJwogICAgXSwKICAgIFsKICAgICAgICAnZXhjZXB0aW9uJywKICAgICAgICAnRXJyb3InCiAgICBdLAogICAgWwogICAgICAgICdleGNlZWRlZENwdScsCiAgICAgICAgJ0V4Y2VlZGVkIExpbWl0JwogICAgXSwKICAgIFsKICAgICAgICAnY2FuY2VsZWQnLAogICAgICAgICdDYW5jZWxlZCcKICAgIF0sCiAgICBbCiAgICAgICAgJ3Vua25vd24nLAogICAgICAgICdVbmtub3duJwogICAgXSwgCl0pOwpjb25zdCBMT0dfTEVWRUxfQ09MT1JTMSA9IG5ldyBNYXAoWwogICAgWwogICAgICAgICd0cmFjZScsCiAgICAgICAgJ2dyYXknCiAgICBdLAogICAgWwogICAgICAgICdkZWJ1ZycsCiAgICAgICAgJ3B1cnBsZScKICAgIF0sCiAgICBbCiAgICAgICAgJ2xvZycsCiAgICAgICAgJ2dyYXknCiAgICBdLAogICAgWwogICAgICAgICdpbmZvJywKICAgICAgICAnZ3JheScKICAgIF0sCiAgICBbCiAgICAgICAgJ3dhcm4nLAogICAgICAgICdyZWQnCiAgICBdLAogICAgWwogICAgICAgICdlcnJvcicsCiAgICAgICAgJ3JlZCcKICAgIF0sIApdKTsKY2xhc3MgV2VidGFpbEFwcFZNIHsKICAgIF9wcm9maWxlcyA9IFtdOwogICAgZ2V0IHByb2ZpbGVzKCkgewogICAgICAgIHJldHVybiB0aGlzLmRlbW9Nb2RlID8gRGVtb01vZGUucHJvZmlsZXMgOiB0aGlzLl9wcm9maWxlczsKICAgIH0KICAgIGdldCByZWFsUHJvZmlsZXMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2ZpbGVzOwogICAgfQogICAgX3NlbGVjdGVkUHJvZmlsZUlkOwogICAgZ2V0IHNlbGVjdGVkUHJvZmlsZUlkKCkgewogICAgICAgIHJldHVybiB0aGlzLmRlbW9Nb2RlID8gRGVtb01vZGUuc2VsZWN0ZWRQcm9maWxlSWQgOiB0aGlzLl9zZWxlY3RlZFByb2ZpbGVJZDsKICAgIH0KICAgIHNldCBzZWxlY3RlZFByb2ZpbGVJZCh2YWx1ZSkgewogICAgICAgIGlmICh0aGlzLmRlbW9Nb2RlKSB7CiAgICAgICAgICAgIERlbW9Nb2RlLnNldFNlbGVjdGVkUHJvZmlsZUlkKHZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5fc2VsZWN0ZWRQcm9maWxlSWQgPT09IHZhbHVlKSByZXR1cm47CiAgICAgICAgdGhpcy5fc2VsZWN0ZWRQcm9maWxlSWQgPSB2YWx1ZTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZFByb2ZpbGVJZCA9IHZhbHVlOwogICAgICAgIHNhdmVTdGF0ZSh0aGlzLnN0YXRlKTsKICAgICAgICB0aGlzLmZpbmRTY3JpcHRzKCk7CiAgICB9CiAgICBfc2NyaXB0cyA9IFtdOwogICAgZ2V0IHNjcmlwdHMoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVtb01vZGUgPyBEZW1vTW9kZS5zY3JpcHRzIDogdGhpcy5fc2NyaXB0czsKICAgIH0KICAgIF9zZWxlY3RlZFNjcmlwdElkcyA9IG5ldyBTZXQoKTsKICAgIGdldCBzZWxlY3RlZFNjcmlwdElkcygpIHsKICAgICAgICByZXR1cm4gdGhpcy5kZW1vTW9kZSA/IERlbW9Nb2RlLnNlbGVjdGVkU2NyaXB0SWRzIDogdGhpcy5fc2VsZWN0ZWRTY3JpcHRJZHM7CiAgICB9CiAgICBzZXQgc2VsZWN0ZWRTY3JpcHRJZHMoc2NyaXB0SWRzKSB7CiAgICAgICAgaWYgKHRoaXMuZGVtb01vZGUpIHsKICAgICAgICAgICAgRGVtb01vZGUuc2V0U2VsZWN0ZWRTY3JpcHRJZHMoc2NyaXB0SWRzKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoc2V0RXF1YWwodGhpcy5fc2VsZWN0ZWRTY3JpcHRJZHMsIHNjcmlwdElkcykpIHJldHVybjsKICAgICAgICB0aGlzLl9zZWxlY3RlZFNjcmlwdElkcyA9IG5ldyBTZXQoc2NyaXB0SWRzKTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuc2VsZWN0ZWRQcm9maWxlSWQgJiYgdGhpcy5zdGF0ZS5wcm9maWxlc1t0aGlzLnNlbGVjdGVkUHJvZmlsZUlkXTsKICAgICAgICBpZiAocHJvZmlsZSkgewogICAgICAgICAgICBwcm9maWxlLnNlbGVjdGVkU2NyaXB0SWRzID0gWwogICAgICAgICAgICAgICAgLi4uc2NyaXB0SWRzCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIHNhdmVTdGF0ZSh0aGlzLnN0YXRlKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5zZXRUYWlscygpOwogICAgfQogICAgcHJvZmlsZUZvcm0gPSBuZXcgUHJvZmlsZUZvcm1WTSgpOwogICAgZmlsdGVyRm9ybSA9IG5ldyBGaWx0ZXJGb3JtVk0oKTsKICAgIGZpbHRlciA9IHsKICAgIH07CiAgICBleHRyYUZpZWxkcyA9IFtdOwogICAgX3RhaWxzID0gbmV3IFNldCgpOwogICAgZ2V0IHRhaWxzKCkgewogICAgICAgIHJldHVybiB0aGlzLmRlbW9Nb2RlID8gRGVtb01vZGUudGFpbHMgOiB0aGlzLl90YWlsczsKICAgIH0KICAgIHNldCB0YWlscyh0YWlscykgewogICAgICAgIGlmICh0aGlzLmRlbW9Nb2RlKSBEZW1vTW9kZS50YWlscyA9IHRhaWxzOwogICAgICAgIHRoaXMuX3RhaWxzID0gdGFpbHM7CiAgICB9CiAgICB3ZWxjb21lU2hvd2luZyA9IGZhbHNlOwogICAgYWJvdXRTaG93aW5nID0gZmFsc2U7CiAgICBzdGF0ZSA9IGxvYWRTdGF0ZSgpOwogICAgdGFpbENvbnRyb2xsZXI7CiAgICB0YWlsQ29udHJvbGxlckNhbGxiYWNrczsKICAgIHFwc0NvbnRyb2xsZXI7CiAgICBkZW1vTW9kZSA9IGZhbHNlOwogICAgb25DaGFuZ2UgPSAoKT0+ewogICAgfTsKICAgIGxvZ2dlciA9ICgpPT57CiAgICB9OwogICAgb25SZXNldE91dHB1dCA9ICgpPT57CiAgICB9OwogICAgb25RcHNDaGFuZ2UgPSAoKT0+ewogICAgfTsKICAgIGNvbnN0cnVjdG9yKCl7CiAgICAgICAgY29uc3QgZGlzID0gdGhpczsKICAgICAgICB0aGlzLnFwc0NvbnRyb2xsZXIgPSBuZXcgUXBzQ29udHJvbGxlcigyMCwgewogICAgICAgICAgICBvblFwc0NoYW5nZWQgKHFwcykgewogICAgICAgICAgICAgICAgaWYgKGRpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgICAgICAgICAgZGlzLm9uUXBzQ2hhbmdlKHFwcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBjb25zdCBsb2dUYWlsc0NoYW5nZSA9IChhY3Rpb24sIHRhaWxLZXlzKT0+ewogICAgICAgICAgICBpZiAodGFpbEtleXMuc2l6ZSA+IDApIHRoaXMubG9nV2l0aFByZWZpeChgJHthY3Rpb259ICR7WwogICAgICAgICAgICAgICAgLi4udGFpbEtleXMKICAgICAgICAgICAgXS5tYXAoKHYpPT51bnBhY2tUYWlsS2V5KHYpLnNjcmlwdElkCiAgICAgICAgICAgICkuc29ydCgpLmpvaW4oJywgJyl9YCk7CiAgICAgICAgfTsKICAgICAgICBjb25zdCBsb2dXaXRoUHJlZml4ID0gdGhpcy5sb2dXaXRoUHJlZml4LmJpbmQodGhpcyk7CiAgICAgICAgY29uc3QgdmVyYm9zZVdpdGhQcmVmaXggPSB0aGlzLnZlcmJvc2VXaXRoUHJlZml4LmJpbmQodGhpcyk7CiAgICAgICAgY29uc3QgY2FsbGJhY2tzNSA9IHsKICAgICAgICAgICAgb25UYWlsQ3JlYXRpbmcgKF9hY2NvdW50SWQsIHNjcmlwdElkKSB7CiAgICAgICAgICAgICAgICB2ZXJib3NlV2l0aFByZWZpeChgQ3JlYXRpbmcgdGFpbCBmb3IgJHtzY3JpcHRJZH0uLi5gKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25UYWlsQ3JlYXRlZCAoX2FjY291bnRJZCwgc2NyaXB0SWQsIHRvb2tNaWxsaXMsIHRhaWwpIHsKICAgICAgICAgICAgICAgIHZlcmJvc2VXaXRoUHJlZml4KGBDcmVhdGVkIHRhaWwgZm9yICR7c2NyaXB0SWR9IGluICR7dG9va01pbGxpc31tcywgJHtKU09OLnN0cmluZ2lmeSh0YWlsKX1gKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25UYWlsQ29ubmVjdGlvbk9wZW4gKF9hY2NvdW50SWQsIHNjcmlwdElkLCBfdGltZVN0YW1wLCB0b29rTWlsbGlzKSB7CiAgICAgICAgICAgICAgICB2ZXJib3NlV2l0aFByZWZpeChgT3BlbmVkIHRhaWwgZm9yICR7c2NyaXB0SWR9IGluICR7dG9va01pbGxpc31tc2ApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvblRhaWxDb25uZWN0aW9uQ2xvc2UgKGFjY291bnRJZCwgc2NyaXB0SWQsIHRpbWVTdGFtcCwgY29kZSwgcmVhc29uLCB3YXNDbGVhbikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29uVGFpbENvbm5lY3Rpb25DbG9zZScsIHsKICAgICAgICAgICAgICAgICAgICBhY2NvdW50SWQsCiAgICAgICAgICAgICAgICAgICAgc2NyaXB0SWQsCiAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wLAogICAgICAgICAgICAgICAgICAgIGNvZGUsCiAgICAgICAgICAgICAgICAgICAgcmVhc29uLAogICAgICAgICAgICAgICAgICAgIHdhc0NsZWFuCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZlcmJvc2VXaXRoUHJlZml4KGBDbG9zZWQgdGFpbCBmb3IgJHtzY3JpcHRJZH0sICR7SlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgIGNvZGUsCiAgICAgICAgICAgICAgICAgICAgcmVhc29uLAogICAgICAgICAgICAgICAgICAgIHdhc0NsZWFuCiAgICAgICAgICAgICAgICB9KX1gKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25UYWlsQ29ubmVjdGlvbkVycm9yIChhY2NvdW50SWQsIHNjcmlwdElkLCB0aW1lU3RhbXAsIGVycm9ySW5mbykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29uVGFpbENvbm5lY3Rpb25FcnJvcicsIHsKICAgICAgICAgICAgICAgICAgICBhY2NvdW50SWQsCiAgICAgICAgICAgICAgICAgICAgc2NyaXB0SWQsCiAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wLAogICAgICAgICAgICAgICAgICAgIGVycm9ySW5mbwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBsb2dXaXRoUHJlZml4KGBFcnJvciBpbiB0YWlsIGZvciAke3NjcmlwdElkfWAsIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckluZm8KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvblRhaWxDb25uZWN0aW9uTWVzc2FnZSAoX2FjY291bnRJZCwgX3NjcmlwdElkLCBfdGltZVN0YW1wLCBtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZU1lc3NhZ2VQYXNzZXNGaWx0ZXIobWVzc2FnZSwgZGlzLmZpbHRlcikpIHsKICAgICAgICAgICAgICAgICAgICBkdW1wTWVzc2FnZVByZXR0eShtZXNzYWdlLCBkaXMubG9nZ2VyLCBkaXMuY29tcHV0ZUFkZGl0aW9uYWxMb2dzKG1lc3NhZ2UpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChkaXMuZGVtb01vZGUpIHJldHVybjsKICAgICAgICAgICAgICAgIGRpcy5xcHNDb250cm9sbGVyLmFkZEV2ZW50KG1lc3NhZ2UuZXZlbnRUaW1lc3RhbXApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvblRhaWxDb25uZWN0aW9uVW5wYXJzZWRNZXNzYWdlIChfYWNjb3VudElkLCBzY3JpcHRJZCwgX3RpbWVTdGFtcCwgbWVzc2FnZSwgcGFyc2VFcnJvcikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7CiAgICAgICAgICAgICAgICBsb2dXaXRoUHJlZml4KGBVbnBhcnNlZCBtZXNzYWdlIGluIHRhaWwgZm9yICR7c2NyaXB0SWR9YCwgcGFyc2VFcnJvci5zdGFjayB8fCBwYXJzZUVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvblRhaWxzQ2hhbmdlZCAodGFpbHMpIHsKICAgICAgICAgICAgICAgIGlmIChzZXRFcXVhbChkaXMudGFpbHMsIHRhaWxzKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IHNldFN1YnRyYWN0KGRpcy50YWlscywgdGFpbHMpOwogICAgICAgICAgICAgICAgbG9nVGFpbHNDaGFuZ2UoJ1VudGFpbGluZycsIHJlbW92ZWQpOwogICAgICAgICAgICAgICAgY29uc3QgYWRkZWQgPSBzZXRTdWJ0cmFjdCh0YWlscywgZGlzLnRhaWxzKTsKICAgICAgICAgICAgICAgIGxvZ1RhaWxzQ2hhbmdlKCdUYWlsaW5nJywgYWRkZWQpOwogICAgICAgICAgICAgICAgZGlzLnRhaWxzID0gdGFpbHM7CiAgICAgICAgICAgICAgICBkaXMub25DaGFuZ2UoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25OZXR3b3JrU3RhdHVzQ2hhbmdlZCAob25saW5lKSB7CiAgICAgICAgICAgICAgICBpZiAob25saW5lKSB7CiAgICAgICAgICAgICAgICAgICAgbG9nV2l0aFByZWZpeCgnJWNPTkxJTkUlYycsICdjb2xvcjogZ3JlZW4nKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbG9nV2l0aFByZWZpeCgnJWNPRkZMSU5FJWMnLCAnY29sb3I6IHJlZCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBvblRhaWxGYWlsZWRUb1N0YXJ0IChfYWNjb3VudElkLCBzY3JpcHRJZCwgdHJpZ2dlciwgZXJyb3IpIHsKICAgICAgICAgICAgICAgIHZlcmJvc2VXaXRoUHJlZml4KGBUYWlsIGZvciAke3NjcmlwdElkfSBmYWlsZWQgdG8gc3RhcnQgKCR7dHJpZ2dlcn0pOiAke2Vycm9yLm5hbWV9ICR7ZXJyb3IubWVzc2FnZX1gKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgY29uc3Qgd2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kczIgPSBBcHBDb25zdGFudHMuV0VCU09DS0VUX1BJTkdfSU5URVJWQUxfU0VDT05EUzsKICAgICAgICBjb25zdCBpbmFjdGl2ZVRhaWxTZWNvbmRzMSA9IEFwcENvbnN0YW50cy5JTkFDVElWRV9UQUlMX1NFQ09ORFM7CiAgICAgICAgdGhpcy50YWlsQ29udHJvbGxlciA9IG5ldyBUYWlsQ29udHJvbGxlcihuZXcgU3dpdGNoYWJsZVRhaWxDb250cm9sbGVyQ2FsbGJhY2tzKGNhbGxiYWNrczUsICgpPT4hdGhpcy5kZW1vTW9kZQogICAgICAgICksIHsKICAgICAgICAgICAgd2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kczogd2Vic29ja2V0UGluZ0ludGVydmFsU2Vjb25kczIsCiAgICAgICAgICAgIGluYWN0aXZlVGFpbFNlY29uZHM6IGluYWN0aXZlVGFpbFNlY29uZHMxCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy50YWlsQ29udHJvbGxlckNhbGxiYWNrcyA9IGNhbGxiYWNrczU7CiAgICAgICAgdGhpcy5leHRyYUZpZWxkcyA9IFsKICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5leHRyYUZpZWxkcyB8fCBbXQogICAgICAgIF07CiAgICAgICAgdGhpcy5maWx0ZXIgPSB0aGlzLnN0YXRlLmZpbHRlciB8fCB7CiAgICAgICAgfTsKICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKHsKICAgICAgICAgICAgc2F2ZTogZmFsc2UKICAgICAgICB9KTsKICAgIH0KICAgIHN0YXJ0KCkgewogICAgICAgIHRoaXMucmVsb2FkUHJvZmlsZXMoKTsKICAgICAgICB0aGlzLnJlY29tcHV0ZVdlbGNvbWVTaG93aW5nKCk7CiAgICAgICAgdGhpcy5wZXJmb3JtSW5pdGlhbFNlbGVjdGlvbigpOwogICAgfQogICAgbmV3UHJvZmlsZSgpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgewogICAgICAgICAgICBpZiAodGhpcy53ZWxjb21lU2hvd2luZykgewogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMucHJvZmlsZUZvcm0ucHJvZmlsZUlkID0gZ2VuZXJhdGVVdWlkKCk7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5zaG93aW5nID0gdHJ1ZTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLnRpdGxlID0gJ05ldyBQcm9maWxlJzsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLm5hbWUgPSB0aGlzLl9wcm9maWxlcy5sZW5ndGggPT09IDAgPyAnZGVmYXVsdCcgOiBgcHJvZmlsZSR7dGhpcy5fcHJvZmlsZXMubGVuZ3RoICsgMX1gOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uYWNjb3VudElkID0gJyc7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5hcGlUb2tlbiA9ICcnOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uZGVsZXRlVmlzaWJsZSA9IGZhbHNlOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uZW5hYmxlZCA9IHRydWU7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5vdXRwdXRNZXNzYWdlID0gJyc7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5jb21wdXRlU2F2ZUVuYWJsZWQoKTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICB9CiAgICBlZGl0UHJvZmlsZShwcm9maWxlSWQpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgIGNvbnN0IHByb2ZpbGUgPSB0aGlzLnN0YXRlLnByb2ZpbGVzW3Byb2ZpbGVJZF07CiAgICAgICAgaWYgKCFwcm9maWxlKSB0aHJvdyBuZXcgRXJyb3IoYFByb2ZpbGUgJHtwcm9maWxlSWR9IG5vdCBmb3VuZGApOwogICAgICAgIHRoaXMuX3NlbGVjdGVkUHJvZmlsZUlkID0gcHJvZmlsZUlkOwogICAgICAgIGNvbnN0IHsgbmFtZSAsIGFjY291bnRJZCAsIGFwaVRva2VuICB9ID0gcHJvZmlsZTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLnByb2ZpbGVJZCA9IHByb2ZpbGVJZDsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLnNob3dpbmcgPSB0cnVlOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0udGl0bGUgPSAnRWRpdCBQcm9maWxlJzsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLm5hbWUgPSBuYW1lOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uYWNjb3VudElkID0gYWNjb3VudElkOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uYXBpVG9rZW4gPSBhcGlUb2tlbjsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmRlbGV0ZVZpc2libGUgPSB0cnVlOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uZW5hYmxlZCA9IHRydWU7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5vdXRwdXRNZXNzYWdlID0gJyc7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5jb21wdXRlU2F2ZUVuYWJsZWQoKTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICB9CiAgICBkZWxldGVQcm9maWxlKHByb2ZpbGVJZCkgewogICAgICAgIGNvbnNvbGUubG9nKCdkZWxldGUgcHJvZmlsZScsIHByb2ZpbGVJZCk7CiAgICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuc3RhdGUucHJvZmlsZXNbcHJvZmlsZUlkXTsKICAgICAgICBpZiAoIXByb2ZpbGUpIHRocm93IG5ldyBFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVJZH0gbm90IGZvdW5kYCk7CiAgICAgICAgZGVsZXRlIHRoaXMuc3RhdGUucHJvZmlsZXNbcHJvZmlsZUlkXTsKICAgICAgICBzYXZlU3RhdGUodGhpcy5zdGF0ZSk7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5zaG93aW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy5yZWxvYWRQcm9maWxlcygpOwogICAgICAgIHRoaXMucmVjb21wdXRlV2VsY29tZVNob3dpbmcoKTsKICAgICAgICB0aGlzLnBlcmZvcm1Jbml0aWFsU2VsZWN0aW9uKCk7CiAgICB9CiAgICBjYW5jZWxQcm9maWxlKCkgewogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uc2hvd2luZyA9IGZhbHNlOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIHNldFByb2ZpbGVOYW1lKG5hbWUpIHsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLm5hbWUgPSBuYW1lOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uY29tcHV0ZVNhdmVFbmFibGVkKCk7CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgc2V0UHJvZmlsZUFjY291bnRJZChhY2NvdW50SWQpIHsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmFjY291bnRJZCA9IGFjY291bnRJZDsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmNvbXB1dGVTYXZlRW5hYmxlZCgpOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIHNldFByb2ZpbGVBcGlUb2tlbihhcGlUb2tlbikgewogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uYXBpVG9rZW4gPSBhcGlUb2tlbjsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmNvbXB1dGVTYXZlRW5hYmxlZCgpOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIHNhdmVQcm9maWxlKCkgewogICAgICAgIGNvbnN0IHsgcHJvZmlsZUZvcm0gIH0gPSB0aGlzOwogICAgICAgIGNvbnN0IHsgcHJvZmlsZUlkICB9ID0gcHJvZmlsZUZvcm07CiAgICAgICAgY29uc3QgbmV3UHJvZmlsZSA9IHsKICAgICAgICAgICAgbmFtZTogcHJvZmlsZUZvcm0ubmFtZS50cmltKCksCiAgICAgICAgICAgIGFjY291bnRJZDogcHJvZmlsZUZvcm0uYWNjb3VudElkLnRyaW0oKSwKICAgICAgICAgICAgYXBpVG9rZW46IHByb2ZpbGVGb3JtLmFwaVRva2VuLnRyaW0oKQogICAgICAgIH07CiAgICAgICAgdGhpcy50cnlTYXZlUHJvZmlsZShwcm9maWxlSWQsIG5ld1Byb2ZpbGUpOwogICAgfQogICAgZWRpdEV2ZW50RmlsdGVyKCkgewogICAgICAgIGlmICh0aGlzLmRlbW9Nb2RlKSByZXR1cm47CiAgICAgICAgY29uc3QgeyBmaWx0ZXIgLCBmaWx0ZXJGb3JtICB9ID0gdGhpczsKICAgICAgICBmaWx0ZXJGb3JtLnNob3dpbmcgPSB0cnVlOwogICAgICAgIGZpbHRlckZvcm0uZW5hYmxlZCA9IHRydWU7CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZE5hbWUgPSAnRXZlbnQgdHlwZTonOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlkOiAnYWxsJywKICAgICAgICAgICAgICAgIHRleHQ6ICdBbGwnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlkOiAnY3JvbicsCiAgICAgICAgICAgICAgICB0ZXh0OiAnQ1JPTiB0cmlnZ2VyJwogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZDogJ2h0dHAnLAogICAgICAgICAgICAgICAgdGV4dDogJ0hUVFAgcmVxdWVzdCcKICAgICAgICAgICAgfSwgCiAgICAgICAgXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWVPcHRpb25zID0gW107CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlID0gZmlsdGVyLmV2ZW50MSA9PT0gJ2h0dHAnID8gJ2h0dHAnIDogZmlsdGVyLmV2ZW50MSA9PT0gJ2Nyb24nID8gJ2Nyb24nIDogJ2FsbCc7CiAgICAgICAgZmlsdGVyRm9ybS5oZWxwVGV4dCA9ICdDaG9vc2Ugd2hpY2ggdHlwZXMgb2YgZXZlbnRzIHRvIHNob3cnOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGlmIChmaWx0ZXIuZXZlbnQxID09PSBmaWx0ZXJGb3JtLmZpZWxkVmFsdWUpIHJldHVybjsKICAgICAgICAgICAgZmlsdGVyLmV2ZW50MSA9IGZpbHRlckZvcm0uZmllbGRWYWx1ZTsKICAgICAgICAgICAgdGhpcy5hcHBseUZpbHRlcih7CiAgICAgICAgICAgICAgICBzYXZlOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCBzZWxlY3RlZENob2ljZVRleHQgPSBmaWx0ZXJGb3JtLmZpZWxkVmFsdWVDaG9pY2VzLmZpbmQoKHYpPT52LmlkID09PSBmaWx0ZXJGb3JtLmZpZWxkVmFsdWUKICAgICAgICAgICAgKS50ZXh0OwogICAgICAgICAgICB0aGlzLmxvZ1dpdGhQcmVmaXgoYEV2ZW50IHR5cGUgZmlsdGVyIGNoYW5nZWQgdG86ICR7c2VsZWN0ZWRDaG9pY2VUZXh0fWApOwogICAgICAgIH07CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgZWRpdFN0YXR1c0ZpbHRlcigpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgIGNvbnN0IHsgZmlsdGVyICwgZmlsdGVyRm9ybSAgfSA9IHRoaXM7CiAgICAgICAgZmlsdGVyRm9ybS5zaG93aW5nID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmVuYWJsZWQgPSB0cnVlOwogICAgICAgIGZpbHRlckZvcm0uZmllbGROYW1lID0gJ1N0YXR1czonOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMgPSBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlkOiAnYWxsJywKICAgICAgICAgICAgICAgIHRleHQ6ICdBbGwnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlkOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgICB0ZXh0OiAnU3VjY2VzcycKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWQ6ICdlcnJvcicsCiAgICAgICAgICAgICAgICB0ZXh0OiAnRXJyb3InCiAgICAgICAgICAgIH0sIAogICAgICAgIF07CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlT3B0aW9ucyA9IFtdOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZSA9IGZpbHRlci5zdGF0dXMxID09PSAnc3VjY2VzcycgPyAnc3VjY2VzcycgOiBmaWx0ZXIuc3RhdHVzMSA9PT0gJ2Vycm9yJyA/ICdlcnJvcicgOiAnYWxsJzsKICAgICAgICBmaWx0ZXJGb3JtLmhlbHBUZXh0ID0gJ1Nob3cgZXZlbnRzIHRoaXMgdGhpcyBzdGF0dXMnOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGlmIChmaWx0ZXIuc3RhdHVzMSA9PT0gZmlsdGVyRm9ybS5maWVsZFZhbHVlKSByZXR1cm47CiAgICAgICAgICAgIGZpbHRlci5zdGF0dXMxID0gZmlsdGVyRm9ybS5maWVsZFZhbHVlOwogICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKHsKICAgICAgICAgICAgICAgIHNhdmU6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hvaWNlVGV4dCA9IGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMuZmluZCgodik9PnYuaWQgPT09IGZpbHRlckZvcm0uZmllbGRWYWx1ZQogICAgICAgICAgICApLnRleHQ7CiAgICAgICAgICAgIHRoaXMubG9nV2l0aFByZWZpeChgU3RhdHVzIGZpbHRlciBjaGFuZ2VkIHRvOiAke3NlbGVjdGVkQ2hvaWNlVGV4dH1gKTsKICAgICAgICB9OwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIGVkaXRJcEFkZHJlc3NGaWx0ZXIoKSB7CiAgICAgICAgaWYgKHRoaXMuZGVtb01vZGUpIHJldHVybjsKICAgICAgICBjb25zdCB7IGZpbHRlciAsIGZpbHRlckZvcm0gIH0gPSB0aGlzOwogICAgICAgIGNvbnN0IGlzVmFsaWRJcEFkZHJlc3MgPSAoaXBBZGRyZXNzKT0+ewogICAgICAgICAgICByZXR1cm4gL14oc2VsZnxbXGRcLjphLWZdezMsfSkkLy50ZXN0KGlwQWRkcmVzcyk7CiAgICAgICAgfTsKICAgICAgICBjb25zdCBjaGVja1ZhbGlkSXBBZGRyZXNzID0gKGlwQWRkcmVzcyk9PnsKICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSXBBZGRyZXNzKGlwQWRkcmVzcykpIHRocm93IG5ldyBFcnJvcihgQmFkIGlwIGFkZHJlc3M6ICR7aXBBZGRyZXNzfWApOwogICAgICAgICAgICByZXR1cm4gaXBBZGRyZXNzOwogICAgICAgIH07CiAgICAgICAgY29uc3QgcGFyc2VGaWx0ZXJJcEFkZHJlc3Nlc0Zyb21GaWVsZFZhbHVlID0gKCk9PnsKICAgICAgICAgICAgY29uc3QgeyBmaWVsZFZhbHVlICB9ID0gZmlsdGVyRm9ybTsKICAgICAgICAgICAgY29uc3QgdiA9IChmaWVsZFZhbHVlIHx8ICcnKS50cmltKCk7CiAgICAgICAgICAgIGlmICh2ID09PSAnJykgcmV0dXJuIFtdOwogICAgICAgICAgICByZXR1cm4gZGlzdGluY3Qodi5zcGxpdCgnLCcpLm1hcCgodik9PnYudHJpbSgpLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgKS5maWx0ZXIoKHYpPT52ICE9PSAnJwogICAgICAgICAgICApLm1hcChjaGVja1ZhbGlkSXBBZGRyZXNzKSk7CiAgICAgICAgfTsKICAgICAgICBjb25zdCBjb21wdXRlRmllbGRWYWx1ZUZyb21GaWx0ZXJJcEFkZHJlc3NlcyA9ICgpPT57CiAgICAgICAgICAgIHJldHVybiBkaXN0aW5jdChmaWx0ZXIuaXBBZGRyZXNzMSB8fCBbXSkuam9pbignLCAnKTsKICAgICAgICB9OwogICAgICAgIGZpbHRlckZvcm0uc2hvd2luZyA9IHRydWU7CiAgICAgICAgZmlsdGVyRm9ybS5lbmFibGVkID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkTmFtZSA9ICdJUCBhZGRyZXNzKHMpOic7CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlQ2hvaWNlcyA9IFtdOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZU9wdGlvbnMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWUgPSBjb21wdXRlRmllbGRWYWx1ZUZyb21GaWx0ZXJJcEFkZHJlc3NlcygpOwogICAgICAgIGZpbHRlckZvcm0uaGVscFRleHQgPSBgJ3NlbGYnIHRvIGZpbHRlciB5b3VyIG93biBhZGRyZXNzLCBjb21tYS1zZXBhcmF0ZWQgaWYgbXVsdGlwbGUsIGUuZy4gc2VsZiwgMS4xLjEuMWA7CiAgICAgICAgZmlsdGVyRm9ybS5hcHBseVZhbHVlID0gKCk9PnsKICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBwYXJzZUZpbHRlcklwQWRkcmVzc2VzRnJvbUZpZWxkVmFsdWUoKTsKICAgICAgICAgICAgaWYgKHNldEVxdWFsKG5ldyBTZXQoZmlsdGVyLmlwQWRkcmVzczEgfHwgW10pLCBuZXcgU2V0KG5ld1ZhbHVlKSkpIHJldHVybjsKICAgICAgICAgICAgZmlsdGVyLmlwQWRkcmVzczEgPSBuZXdWYWx1ZTsKICAgICAgICAgICAgdGhpcy5hcHBseUZpbHRlcih7CiAgICAgICAgICAgICAgICBzYXZlOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCB0ZXh0ID0gbmV3VmFsdWUubGVuZ3RoID09PSAwID8gJ2FueSBJUCBhZGRyZXNzJyA6IG5ld1ZhbHVlLmpvaW4oJywgJyk7CiAgICAgICAgICAgIHRoaXMubG9nV2l0aFByZWZpeChgSVAgYWRkcmVzcyBmaWx0ZXIgY2hhbmdlZCB0bzogJHt0ZXh0fWApOwogICAgICAgIH07CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgZWRpdE1ldGhvZEZpbHRlcigpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgIGNvbnN0IHsgZmlsdGVyICwgZmlsdGVyRm9ybSAgfSA9IHRoaXM7CiAgICAgICAgY29uc3QgcGFyc2VGaWx0ZXJNZXRob2RzRnJvbUZpZWxkVmFsdWUgPSAoKT0+ewogICAgICAgICAgICBjb25zdCB7IGZpZWxkVmFsdWUgIH0gPSBmaWx0ZXJGb3JtOwogICAgICAgICAgICBjb25zdCB2ID0gKGZpZWxkVmFsdWUgfHwgJycpLnRyaW0oKTsKICAgICAgICAgICAgaWYgKHYgPT09ICcnKSByZXR1cm4gW107CiAgICAgICAgICAgIHJldHVybiBkaXN0aW5jdCh2LnNwbGl0KCcsJykubWFwKCh2KT0+di50cmltKCkudG9VcHBlckNhc2UoKQogICAgICAgICAgICApLmZpbHRlcigodik9PnYgIT09ICcnCiAgICAgICAgICAgICkpOwogICAgICAgIH07CiAgICAgICAgY29uc3QgY29tcHV0ZUZpZWxkVmFsdWVGcm9tRmlsdGVyTWV0aG9kcyA9ICgpPT57CiAgICAgICAgICAgIHJldHVybiBkaXN0aW5jdChmaWx0ZXIubWV0aG9kMSB8fCBbXSkubWFwKCh2KT0+di50b1VwcGVyQ2FzZSgpCiAgICAgICAgICAgICkuam9pbignLCAnKTsKICAgICAgICB9OwogICAgICAgIGZpbHRlckZvcm0uc2hvd2luZyA9IHRydWU7CiAgICAgICAgZmlsdGVyRm9ybS5lbmFibGVkID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkTmFtZSA9ICdIVFRQIE1ldGhvZChzKTonOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWVPcHRpb25zID0gW107CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlID0gY29tcHV0ZUZpZWxkVmFsdWVGcm9tRmlsdGVyTWV0aG9kcygpOwogICAgICAgIGZpbHRlckZvcm0uaGVscFRleHQgPSAnY29tbWEtc2VwYXJhdGVkIGlmIG11bHRpcGxlLCBlLmcuIEdFVCwgUE9TVCc7CiAgICAgICAgZmlsdGVyRm9ybS5hcHBseVZhbHVlID0gKCk9PnsKICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBwYXJzZUZpbHRlck1ldGhvZHNGcm9tRmllbGRWYWx1ZSgpOwogICAgICAgICAgICBpZiAoc2V0RXF1YWwobmV3IFNldChmaWx0ZXIubWV0aG9kMSB8fCBbXSksIG5ldyBTZXQobmV3VmFsdWUpKSkgcmV0dXJuOwogICAgICAgICAgICBmaWx0ZXIubWV0aG9kMSA9IG5ld1ZhbHVlOwogICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKHsKICAgICAgICAgICAgICAgIHNhdmU6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBuZXdWYWx1ZS5sZW5ndGggPT09IDAgPyAnYW55IG1ldGhvZCcgOiBuZXdWYWx1ZS5qb2luKCcsICcpOwogICAgICAgICAgICB0aGlzLmxvZ1dpdGhQcmVmaXgoYE1ldGhvZCBmaWx0ZXIgY2hhbmdlZCB0bzogJHt0ZXh0fWApOwogICAgICAgIH07CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgZWRpdFNhbXBsaW5nUmF0ZUZpbHRlcigpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgIGNvbnN0IHBhcnNlU2FtcGxlUmF0ZUZyb21GaWVsZFZhbHVlID0gKCk9PnsKICAgICAgICAgICAgY29uc3QgeyBmaWVsZFZhbHVlICB9ID0gZmlsdGVyRm9ybTsKICAgICAgICAgICAgY29uc3QgdiA9IChmaWVsZFZhbHVlIHx8ICcnKS50cmltKCk7CiAgICAgICAgICAgIGlmICh2ID09PSAnJykgcmV0dXJuIDE7CiAgICAgICAgICAgIGNvbnN0IG51bSA9IHBhcnNlRmxvYXQodik7CiAgICAgICAgICAgIGlmICghaXNWYWxpZFNhbXBsaW5nUmF0ZShudW0pKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmF0ZTogJHt2fWApOwogICAgICAgICAgICByZXR1cm4gbnVtOwogICAgICAgIH07CiAgICAgICAgY29uc3QgeyBmaWx0ZXIgLCBmaWx0ZXJGb3JtICB9ID0gdGhpczsKICAgICAgICBmaWx0ZXJGb3JtLnNob3dpbmcgPSB0cnVlOwogICAgICAgIGZpbHRlckZvcm0uZW5hYmxlZCA9IHRydWU7CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZE5hbWUgPSAnU2FtcGxpbmcgcmF0ZTonOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWVPcHRpb25zID0gW107CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlID0gKHR5cGVvZiBmaWx0ZXIuc2FtcGxpbmdSYXRlMSA9PT0gJ251bWJlcicgJiYgaXNWYWxpZFNhbXBsaW5nUmF0ZShmaWx0ZXIuc2FtcGxpbmdSYXRlMSkgPyBmaWx0ZXIuc2FtcGxpbmdSYXRlMSA6IDEpLnRvRml4ZWQoMik7CiAgICAgICAgZmlsdGVyRm9ybS5oZWxwVGV4dCA9ICdDYW4gcmFuZ2UgZnJvbSAwICgwJSkgdG8gMSAoMTAwJSknOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFyc2VTYW1wbGVSYXRlRnJvbUZpZWxkVmFsdWUoKTsKICAgICAgICAgICAgaWYgKGZpbHRlci5zYW1wbGluZ1JhdGUxID09PSBuZXdWYWx1ZSkgcmV0dXJuOwogICAgICAgICAgICBmaWx0ZXIuc2FtcGxpbmdSYXRlMSA9IG5ld1ZhbHVlOwogICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKHsKICAgICAgICAgICAgICAgIHNhdmU6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBuZXdWYWx1ZSA9PT0gMSA/ICdubyBzYW1wbGluZycgOiBgJHtuZXdWYWx1ZX0gKCR7KG5ld1ZhbHVlICogMTAwKS50b0ZpeGVkKDIpfSUpYDsKICAgICAgICAgICAgdGhpcy5sb2dXaXRoUHJlZml4KGBTYW1wbGUgcmF0ZSBmaWx0ZXIgY2hhbmdlZCB0bzogJHt0ZXh0fWApOwogICAgICAgIH07CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgZWRpdFNlYXJjaEZpbHRlcigpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgIGNvbnN0IHsgZmlsdGVyICwgZmlsdGVyRm9ybSAgfSA9IHRoaXM7CiAgICAgICAgZmlsdGVyRm9ybS5zaG93aW5nID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmVuYWJsZWQgPSB0cnVlOwogICAgICAgIGZpbHRlckZvcm0uZmllbGROYW1lID0gJ1NlYXJjaCB0ZXh0Oic7CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlQ2hvaWNlcyA9IFtdOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZU9wdGlvbnMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWUgPSBmaWx0ZXIuc2VhcmNoMSB8fCAnJzsKICAgICAgICBmaWx0ZXJGb3JtLmhlbHBUZXh0ID0gJ0ZpbHRlciBieSBhIHRleHQgbWF0Y2ggaW4gY29uc29sZS5sb2cgbWVzc2FnZXMnOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGlmIChmaWx0ZXIuc2VhcmNoMSA9PT0gZmlsdGVyRm9ybS5maWVsZFZhbHVlKSByZXR1cm47CiAgICAgICAgICAgIGZpbHRlci5zZWFyY2gxID0gZmlsdGVyRm9ybS5maWVsZFZhbHVlOwogICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKHsKICAgICAgICAgICAgICAgIHNhdmU6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IHRleHQgPSAoZmlsdGVyLnNlYXJjaDEgfHwgJycpLmxlbmd0aCA9PT0gMCA/ICdubyBzZWFyY2ggZmlsdGVyJyA6IGAnJHtmaWx0ZXIuc2VhcmNoMX0nYDsKICAgICAgICAgICAgdGhpcy5sb2dXaXRoUHJlZml4KGBTZWFyY2ggZmlsdGVyIGNoYW5nZWQgdG86ICR7dGV4dH1gKTsKICAgICAgICB9OwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIGVkaXRIZWFkZXJGaWx0ZXIoKSB7CiAgICAgICAgaWYgKHRoaXMuZGVtb01vZGUpIHJldHVybjsKICAgICAgICBjb25zdCB7IGZpbHRlciAsIGZpbHRlckZvcm0gIH0gPSB0aGlzOwogICAgICAgIGNvbnN0IHBhcnNlRmlsdGVySGVhZGVyc0Zyb21GaWVsZFZhbHVlID0gKCk9PnsKICAgICAgICAgICAgY29uc3QgeyBmaWVsZFZhbHVlICB9ID0gZmlsdGVyRm9ybTsKICAgICAgICAgICAgY29uc3QgdiA9IChmaWVsZFZhbHVlIHx8ICcnKS50cmltKCk7CiAgICAgICAgICAgIGlmICh2ID09PSAnJykgcmV0dXJuIFtdOwogICAgICAgICAgICByZXR1cm4gZGlzdGluY3Qodi5zcGxpdCgnLCcpLm1hcCgodik9PnYudHJpbSgpCiAgICAgICAgICAgICkuZmlsdGVyKCh2KT0+diAhPT0gJycKICAgICAgICAgICAgKSk7CiAgICAgICAgfTsKICAgICAgICBjb25zdCBjb21wdXRlRmllbGRWYWx1ZUZyb21GaWx0ZXJIZWFkZXJzID0gKCk9PnsKICAgICAgICAgICAgcmV0dXJuIGRpc3RpbmN0KGZpbHRlci5oZWFkZXIxIHx8IFtdKS5qb2luKCcsICcpOwogICAgICAgIH07CiAgICAgICAgZmlsdGVyRm9ybS5zaG93aW5nID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmVuYWJsZWQgPSB0cnVlOwogICAgICAgIGZpbHRlckZvcm0uZmllbGROYW1lID0gJ0hlYWRlcihzKTonOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWVPcHRpb25zID0gW107CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlID0gY29tcHV0ZUZpZWxkVmFsdWVGcm9tRmlsdGVySGVhZGVycygpOwogICAgICAgIGZpbHRlckZvcm0uaGVscFRleHQgPSBgJ2tleScsIG9yICdrZXk6cXVlcnknLCBjb21tYS1zZXBhcmF0ZWQgaWYgbXVsdGlwbGVgOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFyc2VGaWx0ZXJIZWFkZXJzRnJvbUZpZWxkVmFsdWUoKTsKICAgICAgICAgICAgaWYgKHNldEVxdWFsKG5ldyBTZXQoZmlsdGVyLmhlYWRlcjEgfHwgW10pLCBuZXcgU2V0KG5ld1ZhbHVlKSkpIHJldHVybjsKICAgICAgICAgICAgZmlsdGVyLmhlYWRlcjEgPSBuZXdWYWx1ZTsKICAgICAgICAgICAgdGhpcy5hcHBseUZpbHRlcih7CiAgICAgICAgICAgICAgICBzYXZlOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCB0ZXh0ID0gbmV3VmFsdWUubGVuZ3RoID09PSAwID8gJ25vIGhlYWRlciBmaWx0ZXInIDogbmV3VmFsdWUuam9pbignLCAnKTsKICAgICAgICAgICAgdGhpcy5sb2dXaXRoUHJlZml4KGBIZWFkZXIgZmlsdGVyIGNoYW5nZWQgdG86ICR7dGV4dH1gKTsKICAgICAgICB9OwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIGVkaXRMb2dwcm9wRmlsdGVyKCkgewogICAgICAgIGlmICh0aGlzLmRlbW9Nb2RlKSByZXR1cm47CiAgICAgICAgY29uc3QgeyBmaWx0ZXIgLCBmaWx0ZXJGb3JtICB9ID0gdGhpczsKICAgICAgICBjb25zdCBwYXJzZUxvZ3Byb3BGaWx0ZXJzRnJvbUZpZWxkVmFsdWUgPSAoKT0+ewogICAgICAgICAgICBjb25zdCB7IGZpZWxkVmFsdWUgIH0gPSBmaWx0ZXJGb3JtOwogICAgICAgICAgICBjb25zdCB2ID0gKGZpZWxkVmFsdWUgfHwgJycpLnRyaW0oKTsKICAgICAgICAgICAgaWYgKHYgPT09ICcnKSByZXR1cm4gW107CiAgICAgICAgICAgIHJldHVybiBkaXN0aW5jdCh2LnNwbGl0KCcsJykubWFwKCh2KT0+di50cmltKCkKICAgICAgICAgICAgKS5maWx0ZXIoKHYpPT52ICE9PSAnJwogICAgICAgICAgICApKTsKICAgICAgICB9OwogICAgICAgIGNvbnN0IGNvbXB1dGVGaWVsZFZhbHVlRnJvbUxvZ1Byb3BGaWx0ZXJzID0gKCk9PnsKICAgICAgICAgICAgcmV0dXJuIGRpc3RpbmN0KGZpbHRlci5sb2dwcm9wMSB8fCBbXSkuam9pbignLCAnKTsKICAgICAgICB9OwogICAgICAgIGZpbHRlckZvcm0uc2hvd2luZyA9IHRydWU7CiAgICAgICAgZmlsdGVyRm9ybS5lbmFibGVkID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkTmFtZSA9ICdMb2dwcm9wKHMpOic7CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlQ2hvaWNlcyA9IFtdOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZU9wdGlvbnMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWUgPSBjb21wdXRlRmllbGRWYWx1ZUZyb21Mb2dQcm9wRmlsdGVycygpOwogICAgICAgIGZpbHRlckZvcm0uaGVscFRleHQgPSBgJ2tleScsIG9yICdrZXk6dmFsdWUnLCBjb21tYS1zZXBhcmF0ZWQgaWYgbXVsdGlwbGUsIHZhbHVlIG1heSBpbmNsdWRlICpgOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFyc2VMb2dwcm9wRmlsdGVyc0Zyb21GaWVsZFZhbHVlKCk7CiAgICAgICAgICAgIHRoaXMuc2V0TG9ncHJvcEZpbHRlcihuZXdWYWx1ZSk7CiAgICAgICAgfTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICB9CiAgICBzZXRMb2dwcm9wRmlsdGVyKGxvZ3Byb3BGaWx0ZXJzKSB7CiAgICAgICAgY29uc3QgeyBmaWx0ZXIgIH0gPSB0aGlzOwogICAgICAgIGlmIChzZXRFcXVhbChuZXcgU2V0KGZpbHRlci5sb2dwcm9wMSB8fCBbXSksIG5ldyBTZXQobG9ncHJvcEZpbHRlcnMpKSkgcmV0dXJuOwogICAgICAgIGZpbHRlci5sb2dwcm9wMSA9IGxvZ3Byb3BGaWx0ZXJzOwogICAgICAgIHRoaXMuYXBwbHlGaWx0ZXIoewogICAgICAgICAgICBzYXZlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgY29uc3QgdGV4dCA9IGxvZ3Byb3BGaWx0ZXJzLmxlbmd0aCA9PT0gMCA/ICdubyBsb2dwcm9wIGZpbHRlcicgOiBsb2dwcm9wRmlsdGVycy5qb2luKCcsICcpOwogICAgICAgIHRoaXMubG9nV2l0aFByZWZpeChgTG9ncHJvcCBmaWx0ZXIgY2hhbmdlZCB0bzogJHt0ZXh0fWApOwogICAgfQogICAgaGFzQW55RmlsdGVycygpIHsKICAgICAgICBjb25zdCB7IGZpbHRlciAgfSA9IHRoaXM7CiAgICAgICAgY29uc3QgeyBldmVudDEgIH0gPSBmaWx0ZXI7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVUYWlsT3B0aW9uc0ZvckZpbHRlcihmaWx0ZXIpLmZpbHRlcnMubGVuZ3RoID4gMCB8fCB0eXBlb2YgZXZlbnQxID09PSAnc3RyaW5nJyAmJiBldmVudDEgIT09ICcnICYmIGV2ZW50MSAhPT0gJ2FsbCc7CiAgICB9CiAgICByZXNldEZpbHRlcnMoKSB7CiAgICAgICAgaWYgKHRoaXMuZGVtb01vZGUpIHJldHVybjsKICAgICAgICB0aGlzLmZpbHRlciA9IHsKICAgICAgICB9OwogICAgICAgIHRoaXMuYXBwbHlGaWx0ZXIoewogICAgICAgICAgICBzYXZlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5sb2dXaXRoUHJlZml4KGBGaWx0ZXJzIHJlc2V0YCk7CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgY2FuY2VsRmlsdGVyKCkgewogICAgICAgIGNvbnNvbGUubG9nKCdjYW5jZWxGaWx0ZXInKTsKICAgICAgICB0aGlzLmZpbHRlckZvcm0uc2hvd2luZyA9IGZhbHNlOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIHNhdmVGaWx0ZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ3NhdmVGaWx0ZXInKTsKICAgICAgICBjb25zdCB7IGZpbHRlckZvcm0gIH0gPSB0aGlzOwogICAgICAgIGZpbHRlckZvcm0uZW5hYmxlZCA9IGZhbHNlOwogICAgICAgIGZpbHRlckZvcm0ub3V0cHV0TWVzc2FnZSA9ICdDaGVja2luZyBmaWx0ZXIuLi4nOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBmaWx0ZXJGb3JtLmFwcGx5VmFsdWUoKTsKICAgICAgICAgICAgZmlsdGVyRm9ybS5vdXRwdXRNZXNzYWdlID0gYGA7CiAgICAgICAgICAgIGZpbHRlckZvcm0uc2hvd2luZyA9IGZhbHNlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgZmlsdGVyRm9ybS5vdXRwdXRNZXNzYWdlID0gYEVycm9yOiAke2UubWVzc2FnZX1gOwogICAgICAgIH0gZmluYWxseXsKICAgICAgICAgICAgZmlsdGVyRm9ybS5lbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgICAgIH0KICAgIH0KICAgIHNlbGVjdEZpbHRlckNob2ljZShpZCkgewogICAgICAgIGlmICh0aGlzLmZpbHRlckZvcm0uZmllbGRWYWx1ZSA9PT0gaWQpIHJldHVybjsKICAgICAgICB0aGlzLmZpbHRlckZvcm0uZmllbGRWYWx1ZSA9IGlkOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIGVkaXRTZWxlY3Rpb25GaWVsZHMoKSB7CiAgICAgICAgaWYgKHRoaXMuZGVtb01vZGUpIHJldHVybjsKICAgICAgICBjb25zdCB7IGZpbHRlckZvcm0gIH0gPSB0aGlzOwogICAgICAgIGZpbHRlckZvcm0uc2hvd2luZyA9IHRydWU7CiAgICAgICAgZmlsdGVyRm9ybS5lbmFibGVkID0gdHJ1ZTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkTmFtZSA9ICdBZGRpdGlvbmFsIGZpZWxkczonOwogICAgICAgIGZpbHRlckZvcm0uZmllbGRWYWx1ZUNob2ljZXMgPSBbXTsKICAgICAgICBmaWx0ZXJGb3JtLmZpZWxkVmFsdWVPcHRpb25zID0gRVhUUkFfRklFTERTX09QVElPTlM7CiAgICAgICAgZmlsdGVyRm9ybS5maWVsZFZhbHVlID0gKHRoaXMuZXh0cmFGaWVsZHMgfHwgW10pLmpvaW4oJywnKTsKICAgICAgICBmaWx0ZXJGb3JtLmhlbHBUZXh0ID0gJ1NlbGVjdCBhZGRpdGlvbmFsIGZpZWxkcyB0byBzaG93IGluIHRoZSBvdXRwdXQnOwogICAgICAgIGZpbHRlckZvcm0uYXBwbHlWYWx1ZSA9ICgpPT57CiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlcyA9IGRpc3RpbmN0KChmaWx0ZXJGb3JtLmZpZWxkVmFsdWUgfHwgJycpLnNwbGl0KCcsJykubWFwKCh2KT0+di50cmltKCkKICAgICAgICAgICAgKS5maWx0ZXIoKHYpPT52ICE9PSAnJwogICAgICAgICAgICApKTsKICAgICAgICAgICAgaWYgKHNldEVxdWFsKG5ldyBTZXQodGhpcy5leHRyYUZpZWxkcyB8fCBbXSksIG5ldyBTZXQobmV3VmFsdWVzKSkpIHJldHVybjsKICAgICAgICAgICAgdGhpcy5leHRyYUZpZWxkcyA9IG5ld1ZhbHVlczsKICAgICAgICAgICAgdGhpcy5hcHBseUZpbHRlcih7CiAgICAgICAgICAgICAgICBzYXZlOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCBleHRyYUZpZWxkc1RleHQgPSB0aGlzLmNvbXB1dGVTZWxlY3Rpb25GaWVsZHNUZXh0KCk7CiAgICAgICAgICAgIHRoaXMubG9nV2l0aFByZWZpeChgT3V0cHV0IGZpZWxkcyBjaGFuZ2VkIHRvOiAke2V4dHJhRmllbGRzVGV4dH1gKTsKICAgICAgICB9OwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgIH0KICAgIGNvbXB1dGVTZWxlY3Rpb25GaWVsZHNUZXh0KCkgewogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICdzdGFuZGFyZCBmaWVsZHMnLAogICAgICAgICAgICAuLi50aGlzLmV4dHJhRmllbGRzLm1hcCgoaWQpPT5FWFRSQV9GSUVMRFNfT1BUSU9OUy5maW5kKCh2KT0+di5pZCA9PT0gaWQKICAgICAgICAgICAgICAgICk/LnRleHQgfHwgaWQKICAgICAgICAgICAgKQogICAgICAgIF0uam9pbignLCAnKTsKICAgIH0KICAgIHRvZ2dsZUZpbHRlck9wdGlvbihpZCkgewogICAgICAgIGNvbnN0IGV4dHJhRmllbGRzID0gZGlzdGluY3QoKHRoaXMuZmlsdGVyRm9ybS5maWVsZFZhbHVlIHx8ICcnKS5zcGxpdCgnLCcpLm1hcCgodik9PnYudHJpbSgpCiAgICAgICAgKS5maWx0ZXIoKHYpPT52ICE9PSAnJwogICAgICAgICkpOwogICAgICAgIGNvbnN0IGkgPSBleHRyYUZpZWxkcy5pbmRleE9mKGlkKTsKICAgICAgICBpZiAoaSA+PSAwKSB7CiAgICAgICAgICAgIGV4dHJhRmllbGRzLnNwbGljZShpLCAxKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBleHRyYUZpZWxkcy5wdXNoKGlkKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGV4dHJhRmllbGRzLmpvaW4oJywnKTsKICAgICAgICBpZiAodGhpcy5maWx0ZXJGb3JtLmZpZWxkVmFsdWUgPT09IGZpZWxkVmFsdWUpIHJldHVybjsKICAgICAgICB0aGlzLmZpbHRlckZvcm0uZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgdG9nZ2xlRGVtb01vZGUoKSB7CiAgICAgICAgdGhpcy5zZXREZW1vTW9kZSghdGhpcy5kZW1vTW9kZSk7CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgcmVzZXRPdXRwdXQoKSB7CiAgICAgICAgaWYgKHRoaXMuZGVtb01vZGUpIHJldHVybjsKICAgICAgICB0aGlzLm9uUmVzZXRPdXRwdXQoKTsKICAgIH0KICAgIHNob3dBYm91dCgpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSkgcmV0dXJuOwogICAgICAgIHRoaXMuYWJvdXRTaG93aW5nID0gdHJ1ZTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICB9CiAgICBjbG9zZUFib3V0KCkgewogICAgICAgIHRoaXMuYWJvdXRTaG93aW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgfQogICAgc2V0RGVtb01vZGUoZGVtb01vZGUpIHsKICAgICAgICBpZiAodGhpcy5kZW1vTW9kZSA9PT0gZGVtb01vZGUpIHJldHVybjsKICAgICAgICB0aGlzLmRlbW9Nb2RlID0gZGVtb01vZGU7CiAgICAgICAgaWYgKGRlbW9Nb2RlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFbmFibGUgZGVtbyBtb2RlJyk7CiAgICAgICAgICAgIHRoaXMub25RcHNDaGFuZ2UoMTIuMzQpOwogICAgICAgICAgICB0aGlzLm9uUmVzZXRPdXRwdXQoKTsKICAgICAgICAgICAgRGVtb01vZGUubG9nRmFrZU91dHB1dCh0aGlzLnRhaWxDb250cm9sbGVyQ2FsbGJhY2tzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmxvZygnRGlzYWJsZSBkZW1vIG1vZGUnKTsKICAgICAgICAgICAgdGhpcy5vblFwc0NoYW5nZSh0aGlzLnFwc0NvbnRyb2xsZXIucXBzKTsKICAgICAgICAgICAgdGhpcy5vblJlc2V0T3V0cHV0KCk7CiAgICAgICAgfQogICAgfQogICAgYXBwbHlGaWx0ZXIob3B0cykgewogICAgICAgIGNvbnN0IHsgc2F2ZSAgfSA9IG9wdHM7CiAgICAgICAgdGhpcy5zdGF0ZS5maWx0ZXIgPSB0aGlzLmZpbHRlcjsKICAgICAgICB0aGlzLnN0YXRlLmV4dHJhRmllbGRzID0gdGhpcy5leHRyYUZpZWxkczsKICAgICAgICBpZiAoc2F2ZSkgc2F2ZVN0YXRlKHRoaXMuc3RhdGUpOwogICAgICAgIGNvbnN0IHRhaWxPcHRpb25zID0gY29tcHV0ZVRhaWxPcHRpb25zRm9yRmlsdGVyKHRoaXMuZmlsdGVyKTsKICAgICAgICB0aGlzLnRhaWxDb250cm9sbGVyLnNldFRhaWxPcHRpb25zKHRhaWxPcHRpb25zKTsKICAgIH0KICAgIGxvZ1dpdGhQcmVmaXgoLi4uZGF0YSkgewogICAgICAgIGNvbnN0IHRpbWUgPSBmb3JtYXRMb2NhbFl5eXlNbURkSGhNbVNzKG5ldyBEYXRlKCkpOwogICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGRhdGFbMF0gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGRhdGEgPSBbCiAgICAgICAgICAgICAgICBgWyVjJHt0aW1lfSVjXSAke2RhdGFbMF19YCwKICAgICAgICAgICAgICAgICdjb2xvcjogZ3JheScsCiAgICAgICAgICAgICAgICAnJywKICAgICAgICAgICAgICAgIC4uLmRhdGEuc2xpY2UoMSkKICAgICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgdGhpcy5sb2dnZXIoLi4uZGF0YSk7CiAgICB9CiAgICB2ZXJib3NlV2l0aFByZWZpeChtZXNzYWdlKSB7CiAgICAgICAgY29uc3QgdGltZSA9IGZvcm1hdExvY2FsWXl5eU1tRGRIaE1tU3MobmV3IERhdGUoKSk7CiAgICAgICAgdGhpcy5sb2dnZXIoYFslYyR7dGltZX0lY10gJWMke21lc3NhZ2V9JWNgLCAnY29sb3I6IGdyYXknLCAnJywgJ2NvbG9yOiBncmF5Jyk7CiAgICB9CiAgICBwZXJmb3JtSW5pdGlhbFNlbGVjdGlvbigpIHsKICAgICAgICBjb25zdCBpbml0aWFsbHlTZWxlY3RlZFByb2ZpbGVJZCA9IGNvbXB1dGVJbml0aWFsbHlTZWxlY3RlZFByb2ZpbGVJZCh0aGlzLnN0YXRlLCB0aGlzLl9wcm9maWxlcyk7CiAgICAgICAgaWYgKGluaXRpYWxseVNlbGVjdGVkUHJvZmlsZUlkKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBJbml0aWFsbHkgc2VsZWN0aW5nIHByb2ZpbGU6ICR7dGhpcy5zdGF0ZS5wcm9maWxlc1tpbml0aWFsbHlTZWxlY3RlZFByb2ZpbGVJZF0ubmFtZX1gKTsKICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFByb2ZpbGVJZCA9IGluaXRpYWxseVNlbGVjdGVkUHJvZmlsZUlkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICB9CiAgICB9CiAgICBhc3luYyB0cnlTYXZlUHJvZmlsZShwcm9maWxlSWQsIHByb2ZpbGUpIHsKICAgICAgICBjb25zdCB7IHByb2ZpbGVGb3JtICB9ID0gdGhpczsKICAgICAgICBwcm9maWxlRm9ybS5lbmFibGVkID0gZmFsc2U7CiAgICAgICAgcHJvZmlsZUZvcm0ucHJvZ3Jlc3NWaXNpYmxlID0gdHJ1ZTsKICAgICAgICBwcm9maWxlRm9ybS5vdXRwdXRNZXNzYWdlID0gJ0NoZWNraW5nIHByb2ZpbGUuLi4nOwogICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCBjYW5MaXN0VGFpbHMgPSBhd2FpdCBjb21wdXRlQ2FuTGlzdFRhaWxzKHByb2ZpbGUuYWNjb3VudElkLCBwcm9maWxlLmFwaVRva2VuKTsKICAgICAgICAgICAgaWYgKGNhbkxpc3RUYWlscykgewogICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wcm9maWxlc1twcm9maWxlSWRdID0gcHJvZmlsZTsKICAgICAgICAgICAgICAgIHNhdmVTdGF0ZSh0aGlzLnN0YXRlKTsKICAgICAgICAgICAgICAgIHByb2ZpbGVGb3JtLm91dHB1dE1lc3NhZ2UgPSAnJzsKICAgICAgICAgICAgICAgIHRoaXMucmVsb2FkUHJvZmlsZXMoKTsKICAgICAgICAgICAgICAgIHRoaXMucmVjb21wdXRlV2VsY29tZVNob3dpbmcoKTsKICAgICAgICAgICAgICAgIHByb2ZpbGVGb3JtLnNob3dpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRQcm9maWxlSWQgPSBwcm9maWxlSWQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwcm9maWxlRm9ybS5vdXRwdXRNZXNzYWdlID0gYFRoZXNlIGNyZWRlbnRpYWxzIGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gdGFpbGA7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHByb2ZpbGVGb3JtLm91dHB1dE1lc3NhZ2UgPSBgRXJyb3I6ICR7ZS5tZXNzYWdlfWA7CiAgICAgICAgfSBmaW5hbGx5ewogICAgICAgICAgICBwcm9maWxlRm9ybS5wcm9ncmVzc1Zpc2libGUgPSBmYWxzZTsKICAgICAgICAgICAgcHJvZmlsZUZvcm0uZW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICB9CiAgICB9CiAgICByZWxvYWRQcm9maWxlcygpIHsKICAgICAgICBjb25zdCB7IHN0YXRlICB9ID0gdGhpczsKICAgICAgICB0aGlzLl9wcm9maWxlcy5zcGxpY2UoMCk7CiAgICAgICAgZm9yIChjb25zdCBbcHJvZmlsZUlkLCBwcm9maWxlXSBvZiBPYmplY3QuZW50cmllcyhzdGF0ZS5wcm9maWxlcykpewogICAgICAgICAgICBjb25zdCBuYW1lID0gcHJvZmlsZS5uYW1lIHx8ICcodW5uYW1lZCknOwogICAgICAgICAgICB0aGlzLl9wcm9maWxlcy5wdXNoKHsKICAgICAgICAgICAgICAgIGlkOiBwcm9maWxlSWQsCiAgICAgICAgICAgICAgICB0ZXh0OiBuYW1lCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KICAgIGFzeW5jIGZpbmRTY3JpcHRzKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUHJvZmlsZUlkID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuc3RhdGUucHJvZmlsZXNbdGhpcy5zZWxlY3RlZFByb2ZpbGVJZF07CiAgICAgICAgICAgIGlmIChwcm9maWxlID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgeyBhY2NvdW50SWQgLCBhcGlUb2tlbiAgfSA9IHByb2ZpbGU7CiAgICAgICAgICAgIHRoaXMudmVyYm9zZVdpdGhQcmVmaXgoYEZpbmRpbmcgc2NyaXB0cyBmb3IgJHtwcm9maWxlLm5hbWUudG9VcHBlckNhc2UoKX0uLi5gKTsKICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpOwogICAgICAgICAgICBjb25zdCBzY3JpcHRzID0gYXdhaXQgbGlzdFNjcmlwdHMoYWNjb3VudElkLCBhcGlUb2tlbik7CiAgICAgICAgICAgIGlmICghdGhpcy5kZW1vTW9kZSkgdGhpcy52ZXJib3NlV2l0aFByZWZpeChgRm91bmQgJHtzY3JpcHRzLmxlbmd0aH0gc2NyaXB0cyBpbiAke0RhdGUubm93KCkgLSBzdGFydH1tc2ApOwogICAgICAgICAgICB0aGlzLl9zY3JpcHRzLnNwbGljZSgwKTsKICAgICAgICAgICAgZm9yIChjb25zdCBzY3JpcHQgb2Ygc2NyaXB0cyl7CiAgICAgICAgICAgICAgICB0aGlzLl9zY3JpcHRzLnB1c2goewogICAgICAgICAgICAgICAgICAgIGlkOiBzY3JpcHQuaWQsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogc2NyaXB0LmlkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9zY3JpcHRzLnNvcnQoKGxocywgcmhzKT0+bGhzLnRleHQubG9jYWxlQ29tcGFyZShyaHMudGV4dCkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRTY3JpcHRJZHMgPSB0aGlzLmNvbXB1dGVTZWxlY3RlZFNjcmlwdElkc0FmdGVyRmluZFNjcmlwdHMoKTsKICAgICAgICAgICAgaWYgKHNlbGVjdGVkU2NyaXB0SWRzLnNpemUgPiAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkU2NyaXB0SWRzID0gc2VsZWN0ZWRTY3JpcHRJZHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF0aGlzLmRlbW9Nb2RlKSB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBpZiAoIXRoaXMuZGVtb01vZGUpIHRoaXMubG9nZ2VyKGBFcnJvciBpbiBmaW5kU2NyaXB0czogJHtlLnN0YWNrfWApOwogICAgICAgIH0KICAgIH0KICAgIGNvbXB1dGVTZWxlY3RlZFNjcmlwdElkc0FmdGVyRmluZFNjcmlwdHMoKSB7CiAgICAgICAgaWYgKHRoaXMuX3NjcmlwdHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsbHkgc2VsZWN0aW5nIG5vIHNjcmlwdHMsIG5vIHNjcmlwdHMgdG8gc2VsZWN0Jyk7CiAgICAgICAgICAgIHJldHVybiBuZXcgU2V0KCk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUHJvZmlsZUlkICYmIHRoaXMuc2VsZWN0ZWRQcm9maWxlSWQgJiYgdGhpcy5zZWxlY3RlZFByb2ZpbGVJZCA9PT0gdGhpcy5zdGF0ZS5zZWxlY3RlZFByb2ZpbGVJZCkgewogICAgICAgICAgICBjb25zdCBpbml0aWFsUHJvZmlsZSA9IHRoaXMuc3RhdGUucHJvZmlsZXNbdGhpcy5zZWxlY3RlZFByb2ZpbGVJZF07CiAgICAgICAgICAgIGlmIChpbml0aWFsUHJvZmlsZSAmJiBpbml0aWFsUHJvZmlsZS5zZWxlY3RlZFNjcmlwdElkcyAmJiBpbml0aWFsUHJvZmlsZS5zZWxlY3RlZFNjcmlwdElkcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2NyaXB0SWRzID0gbmV3IFNldCh0aGlzLl9zY3JpcHRzLm1hcCgodik9PnYuaWQKICAgICAgICAgICAgICAgICkpOwogICAgICAgICAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IHNldEludGVyc2VjdChjdXJyZW50U2NyaXB0SWRzLCBuZXcgU2V0KGluaXRpYWxQcm9maWxlLnNlbGVjdGVkU2NyaXB0SWRzKSk7CiAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlcy5zaXplID4gMCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBJbml0aWFsbHkgc2VsZWN0aW5nIHNjcmlwdCR7Y2FuZGlkYXRlcy5zaXplID09PSAxID8gJycgOiAncyd9ICR7WwogICAgICAgICAgICAgICAgICAgICAgICAuLi5jYW5kaWRhdGVzCiAgICAgICAgICAgICAgICAgICAgXS5zb3J0KCkuam9pbignLCAnKX06IHJlbWVtYmVyZWQgZnJvbSBsYXN0IHRpbWVgKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBmaXJzdFNjcmlwdElkID0gdGhpcy5fc2NyaXB0c1swXS5pZDsKICAgICAgICBjb25zb2xlLmxvZyhgSW5pdGlhbGx5IHNlbGVjdGluZyBzY3JpcHQgJHtmaXJzdFNjcmlwdElkfTogZmlyc3Qgb25lIGluIHRoZSBsaXN0YCk7CiAgICAgICAgcmV0dXJuIG5ldyBTZXQoWwogICAgICAgICAgICB0aGlzLl9zY3JpcHRzWzBdLmlkCiAgICAgICAgXSk7CiAgICB9CiAgICBhc3luYyBzZXRUYWlscygpIHsKICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFByb2ZpbGVJZCA9PT0gdW5kZWZpbmVkKSByZXR1cm47CiAgICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuc3RhdGUucHJvZmlsZXNbdGhpcy5zZWxlY3RlZFByb2ZpbGVJZF07CiAgICAgICAgaWYgKHByb2ZpbGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuOwogICAgICAgIGNvbnN0IHsgYWNjb3VudElkICwgYXBpVG9rZW4gIH0gPSBwcm9maWxlOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGF3YWl0IHRoaXMudGFpbENvbnRyb2xsZXIuc2V0VGFpbHMoYWNjb3VudElkLCBhcGlUb2tlbiwgdGhpcy5fc2VsZWN0ZWRTY3JpcHRJZHMpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ0Vycm9yIGluIHNldFRhaWxzJywgZS5zdGFjayB8fCBlLm1lc3NhZ2UpOwogICAgICAgIH0KICAgIH0KICAgIGNvbXB1dGVBZGRpdGlvbmFsTG9ncyhtZXNzYWdlKSB7CiAgICAgICAgY29uc3QgcnQgPSBbXTsKICAgICAgICBjb25zdCBpbmNsdWRlSXBBZGRyZXNzID0gdGhpcy5leHRyYUZpZWxkcy5pbmNsdWRlcygnaXAtYWRkcmVzcycpOwogICAgICAgIGNvbnN0IGluY2x1ZGVVc2VyQWdlbnQgPSB0aGlzLmV4dHJhRmllbGRzLmluY2x1ZGVzKCd1c2VyLWFnZW50Jyk7CiAgICAgICAgY29uc3QgaW5jbHVkZVJlZmVyZXIgPSB0aGlzLmV4dHJhRmllbGRzLmluY2x1ZGVzKCdyZWZlcmVyJyk7CiAgICAgICAgaWYgKGluY2x1ZGVJcEFkZHJlc3MgfHwgaW5jbHVkZVVzZXJBZ2VudCB8fCBpbmNsdWRlUmVmZXJlcikgewogICAgICAgICAgICBpZiAoIWlzVGFpbE1lc3NhZ2VDcm9uRXZlbnQobWVzc2FnZS5ldmVudCkpIHsKICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlSXBBZGRyZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXBBZGRyZXNzID0gbWVzc2FnZS5ldmVudC5yZXF1ZXN0LmhlYWRlcnNbJ2NmLWNvbm5lY3RpbmctaXAnXSB8fCB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlwQWRkcmVzcykgcnQucHVzaChjb21wdXRlQWRkaXRpb25hbExvZ0ZvckV4dHJhRmllbGQoJ0lQIGFkZHJlc3MnLCBpcEFkZHJlc3MpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlVXNlckFnZW50KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlckFnZW50ID0gbWVzc2FnZS5ldmVudC5yZXF1ZXN0LmhlYWRlcnNbJ3VzZXItYWdlbnQnXSB8fCB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJBZ2VudCkgcnQucHVzaChjb21wdXRlQWRkaXRpb25hbExvZ0ZvckV4dHJhRmllbGQoJ1VzZXIgYWdlbnQnLCB1c2VyQWdlbnQpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlUmVmZXJlcikgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZXIgPSBtZXNzYWdlLmV2ZW50LnJlcXVlc3QuaGVhZGVyc1sncmVmZXJlciddIHx8IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICBpZiAocmVmZXJlcikgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVyVXJsID0gdHJ5UGFyc2VVcmwocmVmZXJlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb2cgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmZXJlclVybCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0VXJsID0gdHJ5UGFyc2VVcmwobWVzc2FnZS5ldmVudC5yZXF1ZXN0LnVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFVybCAmJiByZXF1ZXN0VXJsLm9yaWdpbiA9PT0gcmVmZXJlclVybC5vcmlnaW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nKSBydC5wdXNoKGNvbXB1dGVBZGRpdGlvbmFsTG9nRm9yRXh0cmFGaWVsZCgnUmVmZXJlcicsIHJlZmVyZXIpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJ0OwogICAgfQogICAgcmVjb21wdXRlV2VsY29tZVNob3dpbmcoKSB7CiAgICAgICAgY29uc3Qgc2hvdWxkU2hvdyA9IHRoaXMucHJvZmlsZXMubGVuZ3RoID09PSAwOwogICAgICAgIGlmIChzaG91bGRTaG93ID09PSB0aGlzLndlbGNvbWVTaG93aW5nKSByZXR1cm47CiAgICAgICAgdGhpcy5zZXREZW1vTW9kZShzaG91bGRTaG93KTsKICAgICAgICB0aGlzLndlbGNvbWVTaG93aW5nID0gc2hvdWxkU2hvdzsKICAgIH0KfQpmdW5jdGlvbiBjb21wdXRlQWRkaXRpb25hbExvZ0ZvckV4dHJhRmllbGQobmFtZSwgdmFsdWUpIHsKICAgIHJldHVybiB7CiAgICAgICAgZGF0YTogWwogICAgICAgICAgICBgICVjfCVjIFslYyR7bmFtZX0lY10gJHt2YWx1ZX1gLAogICAgICAgICAgICAnY29sb3I6Z3JheScsCiAgICAgICAgICAgICcnLAogICAgICAgICAgICAnY29sb3I6Z3JheScKICAgICAgICBdCiAgICB9Owp9CmNsYXNzIFByb2ZpbGVGb3JtVk0gewogICAgc2hvd2luZyA9IGZhbHNlOwogICAgZW5hYmxlZCA9IGZhbHNlOwogICAgbmFtZSA9ICcnOwogICAgYWNjb3VudElkID0gJyc7CiAgICBhcGlUb2tlbiA9ICcnOwogICAgZGVsZXRlVmlzaWJsZSA9IGZhbHNlOwogICAgc2F2ZUVuYWJsZWQgPSBmYWxzZTsKICAgIHByb2ZpbGVJZCA9ICcnOwogICAgdGl0bGUgPSAnJzsKICAgIHByb2dyZXNzVmlzaWJsZSA9IGZhbHNlOwogICAgb3V0cHV0TWVzc2FnZSA9ICcnOwogICAgY29tcHV0ZVNhdmVFbmFibGVkKCkgewogICAgICAgIHRoaXMuc2F2ZUVuYWJsZWQgPSB0aGlzLm5hbWUudHJpbSgpLmxlbmd0aCA+IDAgJiYgdGhpcy5hcGlUb2tlbi50cmltKCkubGVuZ3RoID4gMCAmJiB0aGlzLmFjY291bnRJZC50cmltKCkubGVuZ3RoID4gMDsKICAgIH0KfQpjbGFzcyBGaWx0ZXJGb3JtVk0gewogICAgc2hvd2luZyA9IGZhbHNlOwogICAgZW5hYmxlZCA9IGZhbHNlOwogICAgZmllbGROYW1lID0gJyc7CiAgICBmaWVsZFZhbHVlQ2hvaWNlcyA9IFtdOwogICAgZmllbGRWYWx1ZU9wdGlvbnMgPSBbXTsKICAgIGZpZWxkVmFsdWU7CiAgICBoZWxwVGV4dCA9ICcnOwogICAgb3V0cHV0TWVzc2FnZSA9ICcnOwogICAgYXBwbHlWYWx1ZSA9ICgpPT57CiAgICB9Owp9CmNvbnN0IEVYVFJBX0ZJRUxEU19PUFRJT05TID0gWwogICAgewogICAgICAgIGlkOiAnaXAtYWRkcmVzcycsCiAgICAgICAgdGV4dDogJ0lQIGFkZHJlc3MnCiAgICB9LAogICAgewogICAgICAgIGlkOiAndXNlci1hZ2VudCcsCiAgICAgICAgdGV4dDogJ1VzZXIgYWdlbnQnCiAgICB9LAogICAgewogICAgICAgIGlkOiAncmVmZXJlcicsCiAgICAgICAgdGV4dDogJ1JlZmVyZXInCiAgICB9LCAKXTsKY29uc3QgU1RBVEVfS0VZID0gJ3N0YXRlMSc7CmZ1bmN0aW9uIGxvYWRTdGF0ZSgpIHsKICAgIHRyeSB7CiAgICAgICAgY29uc3QganNvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNUQVRFX0tFWSkgfHwgdW5kZWZpbmVkOwogICAgICAgIGlmIChqc29uKSB7CiAgICAgICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UoanNvbik7CiAgICAgICAgICAgIGNvbnN0IHJ0ID0gcGFyc2VTdGF0ZShvYmopOwogICAgICAgICAgICByZXR1cm4gcnQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybignbG9hZFN0YXRlOiBFcnJvciBsb2FkaW5nIHN0YXRlJywgZS5zdGFjayB8fCBlKTsKICAgIH0KICAgIGNvbnNvbGUubG9nKCdsb2FkU3RhdGU6IHJldHVybmluZyBuZXcgc3RhdGUnKTsKICAgIHJldHVybiB7CiAgICAgICAgcHJvZmlsZXM6IHsKICAgICAgICB9CiAgICB9Owp9CmZ1bmN0aW9uIHBhcnNlU3RhdGUocGFyc2VkKSB7CiAgICBpZiAodHlwZW9mIHBhcnNlZCAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgb2JqZWN0YCk7CiAgICBjb25zdCB7IHByb2ZpbGVzICB9ID0gcGFyc2VkOwogICAgaWYgKHR5cGVvZiBwcm9maWxlcyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgcHJvZmlsZXMgb2JqZWN0YCk7CiAgICBmb3IgKGNvbnN0IFtwcm9maWxlSWQsIHByb2ZpbGVTdGF0ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvZmlsZXMpKXsKICAgICAgICBpZiAodHlwZW9mIHByb2ZpbGVJZCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignUHJvZmlsZSBpZCBtdXN0IGJlIHN0cmluZycpOwogICAgICAgIHBhcnNlUHJvZmlsZVN0YXRlKHByb2ZpbGVTdGF0ZSk7CiAgICB9CiAgICByZXR1cm4gcGFyc2VkOwp9CmZ1bmN0aW9uIHBhcnNlUHJvZmlsZVN0YXRlKHBhcnNlZCkgewogICAgaWYgKHR5cGVvZiBwYXJzZWQgIT09ICdvYmplY3QnIHx8IHBhcnNlZCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdQcm9maWxlIHN0YXRlIG11c3QgYmUgb2JqZWN0Jyk7CiAgICBjb25zdCB7IG5hbWUgLCBhY2NvdW50SWQgLCBhcGlUb2tlbiAgfSA9IHBhcnNlZDsKICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS50cmltKCkubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoYFByb2ZpbGUgc3RhdGUgbmFtZSBtdXN0IGV4aXN0YCk7CiAgICBpZiAodHlwZW9mIGFjY291bnRJZCAhPT0gJ3N0cmluZycgfHwgYWNjb3VudElkLnRyaW0oKS5sZW5ndGggPT09IDApIHRocm93IG5ldyBFcnJvcihgUHJvZmlsZSBzdGF0ZSBhY2NvdW50SWQgbXVzdCBleGlzdGApOwogICAgaWYgKHR5cGVvZiBhcGlUb2tlbiAhPT0gJ3N0cmluZycgfHwgYXBpVG9rZW4udHJpbSgpLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKGBQcm9maWxlIHN0YXRlIGFwaVRva2VuIG11c3QgZXhpc3RgKTsKICAgIHJldHVybiBwYXJzZWQ7Cn0KZnVuY3Rpb24gc2F2ZVN0YXRlKHN0YXRlKSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTVEFURV9LRVksIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7Cn0KYXN5bmMgZnVuY3Rpb24gY29tcHV0ZUNhbkxpc3RUYWlscyhhY2NvdW50SWQsIGFwaVRva2VuKSB7CiAgICB0cnkgewogICAgICAgIGF3YWl0IGxpc3RUYWlscyhhY2NvdW50SWQsICcnLCBhcGlUb2tlbik7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBDbG91ZGZsYXJlQXBpRXJyb3IgJiYgZS5zdGF0dXMgPT09IDQwNCkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9Cn0KZnVuY3Rpb24gaXNWYWxpZFNhbXBsaW5nUmF0ZShzYW1wbGluZ1JhdGUpIHsKICAgIHJldHVybiAhaXNOYU4oc2FtcGxpbmdSYXRlKSAmJiBzYW1wbGluZ1JhdGUgPj0gMCAmJiBzYW1wbGluZ1JhdGUgPD0gMTsKfQpmdW5jdGlvbiBjb21wdXRlSW5pdGlhbGx5U2VsZWN0ZWRQcm9maWxlSWQoc3RhdGUsIHByb2ZpbGVzKSB7CiAgICBpZiAoc3RhdGUuc2VsZWN0ZWRQcm9maWxlSWQgJiYgc3RhdGUucHJvZmlsZXNbc3RhdGUuc2VsZWN0ZWRQcm9maWxlSWRdKSByZXR1cm4gc3RhdGUuc2VsZWN0ZWRQcm9maWxlSWQ7CiAgICBpZiAocHJvZmlsZXMubGVuZ3RoID4gMCkgcmV0dXJuIHByb2ZpbGVzWzBdLmlkOwogICAgcmV0dXJuIHVuZGVmaW5lZDsKfQpmdW5jdGlvbiBjb21wdXRlVGFpbE9wdGlvbnNGb3JGaWx0ZXIoZmlsdGVyKSB7CiAgICBjb25zdCBmaWx0ZXJzID0gW107CiAgICBpZiAoZmlsdGVyLnN0YXR1czEgPT09ICdlcnJvcicpIHsKICAgICAgICBmaWx0ZXJzLnB1c2goewogICAgICAgICAgICBvdXRjb21lOiBbCiAgICAgICAgICAgICAgICAnZXhjZXB0aW9uJywKICAgICAgICAgICAgICAgICdleGNlZWRlZENwdScsCiAgICAgICAgICAgICAgICAnY2FuY2VsZWQnLAogICAgICAgICAgICAgICAgJ3Vua25vd24nCiAgICAgICAgICAgIF0KICAgICAgICB9KTsKICAgIH0gZWxzZSBpZiAoZmlsdGVyLnN0YXR1czEgPT09ICdzdWNjZXNzJykgewogICAgICAgIGZpbHRlcnMucHVzaCh7CiAgICAgICAgICAgIG91dGNvbWU6IFsKICAgICAgICAgICAgICAgICdvaycKICAgICAgICAgICAgXQogICAgICAgIH0pOwogICAgfQogICAgaWYgKGZpbHRlci5zYW1wbGluZ1JhdGUxICE9PSB1bmRlZmluZWQgJiYgaXNWYWxpZFNhbXBsaW5nUmF0ZShmaWx0ZXIuc2FtcGxpbmdSYXRlMSkgJiYgZmlsdGVyLnNhbXBsaW5nUmF0ZTEgPCAxKSB7CiAgICAgICAgZmlsdGVycy5wdXNoKHsKICAgICAgICAgICAgc2FtcGxpbmdfcmF0ZTogZmlsdGVyLnNhbXBsaW5nUmF0ZTEKICAgICAgICB9KTsKICAgIH0KICAgIGlmIChmaWx0ZXIuc2VhcmNoMSAhPT0gdW5kZWZpbmVkICYmIGZpbHRlci5zZWFyY2gxLmxlbmd0aCA+IDApIHsKICAgICAgICBmaWx0ZXJzLnB1c2goewogICAgICAgICAgICBxdWVyeTogZmlsdGVyLnNlYXJjaDEKICAgICAgICB9KTsKICAgIH0KICAgIGlmIChmaWx0ZXIubWV0aG9kMSAmJiBmaWx0ZXIubWV0aG9kMS5sZW5ndGggPiAwKSB7CiAgICAgICAgZmlsdGVycy5wdXNoKHsKICAgICAgICAgICAgbWV0aG9kOiBmaWx0ZXIubWV0aG9kMQogICAgICAgIH0pOwogICAgfQogICAgaWYgKGZpbHRlci5pcEFkZHJlc3MxICYmIGZpbHRlci5pcEFkZHJlc3MxLmxlbmd0aCA+IDApIHsKICAgICAgICBmaWx0ZXJzLnB1c2goewogICAgICAgICAgICBjbGllbnRfaXA6IGZpbHRlci5pcEFkZHJlc3MxCiAgICAgICAgfSk7CiAgICB9CiAgICBpZiAoZmlsdGVyLmhlYWRlcjEgJiYgZmlsdGVyLmhlYWRlcjEubGVuZ3RoID4gMCkgewogICAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGZpbHRlci5oZWFkZXIxKXsKICAgICAgICAgICAgZmlsdGVycy5wdXNoKHBhcnNlSGVhZGVyRmlsdGVyKGhlYWRlcikpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB7CiAgICAgICAgZmlsdGVycwogICAgfTsKfQpmdW5jdGlvbiBjb21wdXRlTWVzc2FnZVBhc3Nlc0ZpbHRlcihtZXNzYWdlLCBmaWx0ZXIpIHsKICAgIGlmICghY29tcHV0ZU1lc3NhZ2VQYXNzZXNMb2dQcm9wRmlsdGVyKG1lc3NhZ2UsIGZpbHRlci5sb2dwcm9wMSkpIHJldHVybiBmYWxzZTsKICAgIGlmIChmaWx0ZXIuZXZlbnQxID09PSAnY3JvbicgfHwgZmlsdGVyLmV2ZW50MSA9PT0gJ2h0dHAnKSB7CiAgICAgICAgY29uc3QgaXNDcm9uID0gaXNUYWlsTWVzc2FnZUNyb25FdmVudChtZXNzYWdlKTsKICAgICAgICByZXR1cm4gaXNDcm9uICYmIGZpbHRlci5ldmVudDEgPT09ICdjcm9uJyB8fCAhaXNDcm9uICYmIGZpbHRlci5ldmVudDEgPT09ICdodHRwJzsKICAgIH0KICAgIHJldHVybiB0cnVlOwp9CmZ1bmN0aW9uIGNvbXB1dGVNZXNzYWdlUGFzc2VzTG9nUHJvcEZpbHRlcihtZXNzYWdlLCBsb2dwcm9wMSkgewogICAgaWYgKGxvZ3Byb3AxID09PSB1bmRlZmluZWQgfHwgbG9ncHJvcDEubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTsKICAgIGNvbnN0IGxvZ3Byb3BGaWx0ZXJzID0gbG9ncHJvcDEubWFwKHBhcnNlSGVhZGVyRmlsdGVyKTsKICAgIGNvbnN0IHsgcHJvcHMgIH0gPSBwYXJzZUxvZ1Byb3BzKG1lc3NhZ2UubG9ncyk7CiAgICBmb3IgKGNvbnN0IGxvZ3Byb3BGaWx0ZXIgb2YgbG9ncHJvcEZpbHRlcnMpewogICAgICAgIGlmIChjb21wdXRlUHJvcHNQYXNzTG9ncHJvcEZpbHRlcihwcm9wcywgbG9ncHJvcEZpbHRlcikpIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwp9CmZ1bmN0aW9uIGNvbXB1dGVQcm9wc1Bhc3NMb2dwcm9wRmlsdGVyKHByb3BzLCBsb2dwcm9wRmlsdGVyKSB7CiAgICBjb25zdCB2YWwgPSBwcm9wc1tsb2dwcm9wRmlsdGVyLmtleV07CiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTsKICAgIGlmIChsb2dwcm9wRmlsdGVyLnF1ZXJ5ID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlOwogICAgY29uc3QgcSA9IGxvZ3Byb3BGaWx0ZXIucXVlcnkudHJpbSgpLnJlcGxhY2VBbGwoL1wqKy9nLCAnKicpOwogICAgaWYgKCFxLmluY2x1ZGVzKCcqJykpIHJldHVybiBxID09PSB2YWw7CiAgICBpZiAocSA9PT0gJyonKSByZXR1cm4gdHJ1ZTsKICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlOwogICAgY29uc3QgcGF0dGVybiA9ICdeJyArIGVzY2FwZUZvclJlZ2V4KHEpLnJlcGxhY2VBbGwoJ1xcKicsICcuKicpICsgJyQnOwogICAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybikudGVzdCh2YWwpOwp9CmZ1bmN0aW9uIGVzY2FwZUZvclJlZ2V4KHN0cikgewogICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLVwvXFxeJCorPy4oKXxbXF17fV0vZywgJ1xcJCYnKTsKfQpmdW5jdGlvbiBkaXN0aW5jdCh2YWx1ZXMpIHsKICAgIGNvbnN0IHJ0ID0gW107CiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcyl7CiAgICAgICAgaWYgKCFydC5pbmNsdWRlcyh2YWx1ZSkpIHsKICAgICAgICAgICAgcnQucHVzaCh2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJ0Owp9CmZ1bmN0aW9uIHRyeVBhcnNlVXJsKHVybCkgewogICAgdHJ5IHsKICAgICAgICByZXR1cm4gbmV3IFVSTCh1cmwpOwogICAgfSBjYXRjaCAgewogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9Cn0KY29uc3QgRklMVEVSX0VESVRPUl9IVE1MID0gaHRtbGAKPGZvcm0gaWQ9ImZpbHRlci1mb3JtIiBhdXRvY29tcGxldGU9Im9mZiI+CjxmaWVsZHNldCBpZD0iZmlsdGVyLWZpZWxkc2V0Ij4KICA8ZGl2IGlkPSJmaWx0ZXItZm9ybS10aXRsZSIgY2xhc3M9Img2IGhpZ2gtZW1waGFzaXMtdGV4dCBmb3JtLXJvdyI+RWRpdCBmaWx0ZXI8L2Rpdj4KCiAgPGxhYmVsIGlkPSJmaWx0ZXItZmllbGQtbGFiZWwiPkZpbHRlciBmaWVsZDo8L2xhYmVsPgogIDxpbnB1dCBpZD0iZmlsdGVyLWZpZWxkLXRleHQiIHR5cGU9InRleHQiPgogIDxkaXYgaWQ9ImZpbHRlci1maWVsZC1jaG9pY2UiPjwvZGl2PgogIDxkaXYgaWQ9ImZpbHRlci1maWVsZC1vcHRpb25zIj48L2Rpdj4KCiAgPGRpdiBpZD0iZmlsdGVyLWZvcm0taGVscCIgY2xhc3M9ImJvZHkyIG1lZGl1bS1lbXBoYXNpcy10ZXh0Ij4KICA8L2Rpdj4gIAoKICA8ZGl2IGlkPSJmaWx0ZXItZm9ybS1vdXRwdXQtcm93IiBjbGFzcz0iZm9ybS1yb3ciPgogICAgPG91dHB1dCBpZD0iZmlsdGVyLWZvcm0tb3V0cHV0Ij48L291dHB1dD4KICA8L2Rpdj4KCiAgPGRpdiBpZD0iZmlsdGVyLWZvcm0tYnV0dG9ucyIgY2xhc3M9ImZvcm0tcmhzIj4KICAgIDxidXR0b24gaWQ9ImZpbHRlci1hcHBseSIgdHlwZT0ic3VibWl0Ij5BcHBseTwvYnV0dG9uPjwhLS0gZmlyc3Qgc28gaXQgaXMgZGVmYXVsdCBidXR0b24gb24gcmV0dXJuIC0tPgogICAgPGJ1dHRvbiBpZD0iZmlsdGVyLWNhbmNlbCI+Q2FuY2VsPC9idXR0b24+CiAgPC9kaXY+CjwvZmllbGRzZXQ+CjwvZm9ybT4KYDsKY29uc3QgRklMVEVSX0VESVRPUl9DU1MgPSBjc3NgCgogICAgI2ZpbHRlci1mb3JtLWJ1dHRvbnMgewogICAgICAgIGp1c3RpZnktc2VsZjogZW5kOwogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlOwogICAgICAgIGdhcDogMXJlbTsKICAgIH0KCiAgICAjZmlsdGVyLWZpZWxkLWNob2ljZSB7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBnYXA6IDFweDsKICAgIH0KCiAgICAjZmlsdGVyLWZpZWxkLW9wdGlvbnMgewogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgZmxleC13cmFwOiB3cmFwOwogICAgICAgIGdhcDogMXB4OwogICAgfQoKICAgICNmaWx0ZXItZmllbGQtb3B0aW9ucyBidXR0b24gewogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBnYXA6IDAuNXJlbTsKICAgIH0KCiAgICAjZmlsdGVyLWZvcm0taGVscCB7CiAgICAgICAgZ3JpZC1jb2x1bW46IDI7CiAgICB9CgogICAgI2ZpbHRlci1mb3JtLW91dHB1dC1yb3cgewogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBnYXA6IDFyZW07CiAgICAgICAgbWluLWhlaWdodDogMi41cmVtOwogICAgfQoKICAgICNmaWx0ZXItZm9ybS1vdXRwdXQtcm93IG91dHB1dCB7CiAgICAgICAgZmxleC1ncm93OiAxOwogICAgfQoKYDsKZnVuY3Rpb24gaW5pdEZpbHRlckVkaXRvcihkb2N1bWVudCwgdm0pIHsKICAgIGNvbnN0IGZpbHRlckZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyLWZvcm0nKTsKICAgIGNvbnN0IGZpbHRlckZpZWxkc2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbHRlci1maWVsZHNldCcpOwogICAgY29uc3QgZmlsdGVyRmllbGRMYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItZmllbGQtbGFiZWwnKTsKICAgIGNvbnN0IGZpbHRlckZpZWxkVGV4dElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbHRlci1maWVsZC10ZXh0Jyk7CiAgICBjb25zdCBmaWx0ZXJGaWVsZENob2ljZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItZmllbGQtY2hvaWNlJyk7CiAgICBjb25zdCBmaWx0ZXJGaWVsZE9wdGlvbnNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyLWZpZWxkLW9wdGlvbnMnKTsKICAgIGNvbnN0IGZpbHRlckNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItY2FuY2VsJyk7CiAgICBjb25zdCBmaWx0ZXJBcHBseUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItYXBwbHknKTsKICAgIGNvbnN0IGZpbHRlckZvcm1PdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyLWZvcm0tb3V0cHV0Jyk7CiAgICBjb25zdCBmaWx0ZXJGb3JtSGVscERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItZm9ybS1oZWxwJyk7CiAgICBmaWx0ZXJDYW5jZWxCdXR0b24ub25jbGljayA9IChlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2bS5jYW5jZWxGaWx0ZXIoKTsKICAgIH07CiAgICBmaWx0ZXJBcHBseUJ1dHRvbi5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGNvbnN0IHR5cGUgPSBjb21wdXRlVHlwZSh2bSk7CiAgICAgICAgaWYgKHR5cGUgPT09ICd0ZXh0JykgewogICAgICAgICAgICB2bS5maWx0ZXJGb3JtLmZpZWxkVmFsdWUgPSBmaWx0ZXJGaWVsZFRleHRJbnB1dC52YWx1ZTsKICAgICAgICB9CiAgICAgICAgdm0uc2F2ZUZpbHRlcigpOwogICAgfTsKICAgIHJldHVybiAoKT0+ewogICAgICAgIGNvbnN0IHdhc0hpZGRlbiA9IGZpbHRlckZvcm0uc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnOwogICAgICAgIGZpbHRlckZvcm0uc3R5bGUuZGlzcGxheSA9IHZtLmZpbHRlckZvcm0uc2hvd2luZyA/ICdibG9jaycgOiAnbm9uZSc7CiAgICAgICAgZmlsdGVyRmllbGRzZXQuZGlzYWJsZWQgPSAhdm0uZmlsdGVyRm9ybS5lbmFibGVkOwogICAgICAgIGNvbnN0IHR5cGUgPSBjb21wdXRlVHlwZSh2bSk7CiAgICAgICAgZmlsdGVyRmllbGRMYWJlbC50ZXh0Q29udGVudCA9IHZtLmZpbHRlckZvcm0uZmllbGROYW1lOwogICAgICAgIGZpbHRlckZpZWxkTGFiZWwuaHRtbEZvciA9IHR5cGUgPT0gJ2Nob2ljZScgPyBmaWx0ZXJGaWVsZENob2ljZURpdi5pZCA6IHR5cGUgPT0gJ29wdGlvbnMnID8gZmlsdGVyRmllbGRPcHRpb25zRGl2LmlkIDogZmlsdGVyRmllbGRUZXh0SW5wdXQuaWQ7CiAgICAgICAgZmlsdGVyRmllbGRUZXh0SW5wdXQuc3R5bGUuZGlzcGxheSA9IHR5cGUgPT0gJ3RleHQnID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgICAgICBmaWx0ZXJGaWVsZENob2ljZURpdi5zdHlsZS5kaXNwbGF5ID0gdHlwZSA9PSAnY2hvaWNlJyA/ICdmbGV4JyA6ICdub25lJzsKICAgICAgICBMaXRFbGVtZW50LnJlbmRlcihDSE9JQ0VTX0hUTUwodm0pLCBmaWx0ZXJGaWVsZENob2ljZURpdik7CiAgICAgICAgZmlsdGVyRmllbGRPcHRpb25zRGl2LnN0eWxlLmRpc3BsYXkgPSB0eXBlID09ICdvcHRpb25zJyA/ICdmbGV4JyA6ICdub25lJzsKICAgICAgICBMaXRFbGVtZW50LnJlbmRlcihPUFRJT05TX0hUTUwodm0pLCBmaWx0ZXJGaWVsZE9wdGlvbnNEaXYpOwogICAgICAgIGZpbHRlckZvcm1IZWxwRGl2LnRleHRDb250ZW50ID0gdm0uZmlsdGVyRm9ybS5oZWxwVGV4dDsKICAgICAgICBmaWx0ZXJGb3JtT3V0cHV0LnRleHRDb250ZW50ID0gdm0uZmlsdGVyRm9ybS5vdXRwdXRNZXNzYWdlOwogICAgICAgIGlmICh3YXNIaWRkZW4gJiYgdm0uZmlsdGVyRm9ybS5zaG93aW5nKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaWx0ZXIgZm9ybSBvcGVuJyk7CiAgICAgICAgICAgIGlmICh0eXBlID09PSAndGV4dCcgJiYgdm0uZmlsdGVyRm9ybS5maWVsZFZhbHVlKSBmaWx0ZXJGaWVsZFRleHRJbnB1dC52YWx1ZSA9IHZtLmZpbHRlckZvcm0uZmllbGRWYWx1ZTsKICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgICAgICAgZmlsdGVyRmllbGRUZXh0SW5wdXQuZm9jdXMoKTsKICAgICAgICAgICAgICAgIGZpbHRlckZpZWxkVGV4dElucHV0LnNlbGVjdCgpOwogICAgICAgICAgICB9LCAwKTsKICAgICAgICB9CiAgICB9Owp9CmZ1bmN0aW9uIGNvbXB1dGVUeXBlKHZtKSB7CiAgICByZXR1cm4gdm0uZmlsdGVyRm9ybS5maWVsZFZhbHVlQ2hvaWNlcy5sZW5ndGggPiAwID8gJ2Nob2ljZScgOiB2bS5maWx0ZXJGb3JtLmZpZWxkVmFsdWVPcHRpb25zLmxlbmd0aCA/ICdvcHRpb25zJyA6ICd0ZXh0JzsKfQpjb25zdCBDSE9JQ0VTX0hUTUwgPSAodm0pPT57CiAgICByZXR1cm4gdm0uZmlsdGVyRm9ybS5maWVsZFZhbHVlQ2hvaWNlcy5tYXAoKGNob2ljZSk9Pmh0bWxgPGJ1dHRvbiBjbGFzcz0iJHtjaG9pY2UuaWQgPT09IHZtLmZpbHRlckZvcm0uZmllbGRWYWx1ZSA/ICdzZWxlY3RlZCcgOiAnJ30iIEBjbGljaz0keyhlKT0+ewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHZtLnNlbGVjdEZpbHRlckNob2ljZShjaG9pY2UuaWQpOwogICAgICAgIH19ID9kaXNhYmxlZD0iJHshdm0uZmlsdGVyRm9ybS5zaG93aW5nfSI+JHtjaG9pY2UudGV4dH08L2J1dHRvbj5gCiAgICApOwp9Owpjb25zdCBPUFRJT05TX0hUTUwgPSAodm0pPT57CiAgICByZXR1cm4gdm0uZmlsdGVyRm9ybS5maWVsZFZhbHVlT3B0aW9ucy5tYXAoKG9wdGlvbik9PnsKICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGZpZWxkVmFsdWVTZXQodm0pLmhhcyhvcHRpb24uaWQpOwogICAgICAgIHJldHVybiBodG1sYDxidXR0b24gY2xhc3M9IiR7c2VsZWN0ZWQgPyAnc2VsZWN0ZWQnIDogJyd9IiBAY2xpY2s9JHsoZSk9PnsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2bS50b2dnbGVGaWx0ZXJPcHRpb24ob3B0aW9uLmlkKTsKICAgICAgICB9fSA/ZGlzYWJsZWQ9IiR7IXZtLmZpbHRlckZvcm0uc2hvd2luZ30iPiR7c2VsZWN0ZWQgPyBDSEVDS19CT1hfQ0hFQ0tFRF9JQ09OIDogQ0hFQ0tfQk9YX1VOQ0hFQ0tFRF9JQ09OfSAke29wdGlvbi50ZXh0fTwvYnV0dG9uPmA7CiAgICB9KTsKfTsKZnVuY3Rpb24gZmllbGRWYWx1ZVNldCh2bSkgewogICAgcmV0dXJuIG5ldyBTZXQoKHZtLmZpbHRlckZvcm0uZmllbGRWYWx1ZSB8fCAnJykuc3BsaXQoJywnKS5tYXAoKHYpPT52LnRyaW0oKQogICAgKS5maWx0ZXIoKHYpPT52Lmxlbmd0aCA+IDAKICAgICkpOwp9CmNvbnN0IFBST0ZJTEVfRURJVE9SX0hUTUwgPSBodG1sYAo8Zm9ybSBpZD0icHJvZmlsZS1mb3JtIiBhdXRvY29tcGxldGU9Im9mZiI+CjxmaWVsZHNldCBpZD0icHJvZmlsZS1maWVsZHNldCI+CiAgPGRpdiBpZD0icHJvZmlsZS1mb3JtLXRpdGxlIiBjbGFzcz0iaDYgaGlnaC1lbXBoYXNpcy10ZXh0IGZvcm0tcm93Ij5Qcm9maWxlPC9kaXY+CgogIDxsYWJlbCBmb3I9InByb2ZpbGUtbmFtZSI+UHJvZmlsZSBuYW1lOjwvbGFiZWw+CiAgPGlucHV0IGlkPSJwcm9maWxlLW5hbWUiIHR5cGU9InRleHQiPgoKICA8bGFiZWwgZm9yPSJhY2NvdW50LWlkIj5DbG91ZGZsYXJlIEFjY291bnQgSUQ6PC9sYWJlbD4KICA8aW5wdXQgaWQ9InByb2ZpbGUtYWNjb3VudC1pZCIgdHlwZT0idGV4dCI+CgogIDxsYWJlbCBmb3I9ImFwaS10b2tlbiI+Q2xvdWRmbGFyZSBBUEkgVG9rZW46PC9sYWJlbD4KICA8aW5wdXQgaWQ9InByb2ZpbGUtYXBpLXRva2VuIiB0eXBlPSJ0ZXh0Ij4KCiAgPGRldGFpbHMgaWQ9InByb2ZpbGUtZm9ybS1oZWxwLXJvdyIgY2xhc3M9ImZvcm0tcm93Ij4KICAgIDxzdW1tYXJ5PlVzZSBhIDxhIGhyZWY9Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ByaW5jaXBsZV9vZl9sZWFzdF9wcml2aWxlZ2UiIHRhcmdldD0iX2JsYW5rIj5sZWFzdCBwcml2aWxlZ2U8L2E+IHRva2VuIHdpdGggcGVybWlzc2lvbjogPGNvZGU+QWNjb3VudCAmZ3Q7IFdvcmtlcnMgVGFpbCAmZ3Q7IFJlYWQ8L2NvZGU+PC9zdW1tYXJ5PgogICAgPG9sPgogICAgICAgIDxsaT5TZWxlY3QgPHNwYW4gY2xhc3M9ImNmLWJ1dHRvbiI+Q3JlYXRlIFRva2VuPC9zcGFuPiBvbiB5b3VyIENsb3VkZmxhcmUgPGEgaHJlZj0iaHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL3Byb2ZpbGUvYXBpLXRva2VucyIgdGFyZ2V0PSJfYmxhbmsiPkFQSSBUb2tlbnM8L2E+IHBhZ2UuPC9saT4KICAgICAgICA8bGk+U2Nyb2xsIGRvd24gdG8gPHNwYW4gY2xhc3M9ImNmLXNlY3Rpb24iPkNyZWF0ZSBDdXN0b20gVG9rZW48L3NwYW4+LCB0aGVuIDxzcGFuIGNsYXNzPSJjZi1idXR0b24iPkdldCBzdGFydGVkPC9zcGFuPjwvbGk+CiAgICAgICAgPGxpPlVuZGVyIDxzcGFuIGNsYXNzPSJjZi1zZWN0aW9uIj5QZXJtaXNzaW9uczwvc3Bhbj4sIGdyYW50IHlvdXIgdG9rZW4gPHNwYW4gY2xhc3M9ImNmLXNlY3Rpb24iPkFjY291bnQ8L3NwYW4+IDxzcGFuIGNsYXNzPSJjZi1zZWN0aW9uIj5Xb3JrZXJzIFRhaWw8L3NwYW4+IDxzcGFuIGNsYXNzPSJjZi1zZWN0aW9uIj5SZWFkPC9zcGFuPjwvbGk+CiAgICA8L29sPgogIDwvZGV0YWlscz4gIAoKICA8ZGl2IGlkPSJwcm9maWxlLWZvcm0tb3V0cHV0LXJvdyIgY2xhc3M9ImZvcm0tcm93Ij4KICAgIDxvdXRwdXQgaWQ9InByb2ZpbGUtZm9ybS1vdXRwdXQiPjwvb3V0cHV0PgogICAgPHByb2dyZXNzIGlkPSJwcm9maWxlLWZvcm0tcHJvZ3Jlc3MiIGNsYXNzPSJwdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyIj48L3Byb2dyZXNzPgogIDwvZGl2PgoKICA8ZGl2IGNsYXNzPSJmb3JtLWxocyI+CiAgICA8YnV0dG9uIGlkPSJwcm9maWxlLWRlbGV0ZSI+RGVsZXRlPC9idXR0b24+CiAgPC9kaXY+CiAgPGRpdiBpZD0icHJvZmlsZS1mb3JtLWJ1dHRvbnMiIGNsYXNzPSJmb3JtLXJocyI+CiAgICA8YnV0dG9uIGlkPSJwcm9maWxlLWNhbmNlbCI+Q2FuY2VsPC9idXR0b24+CiAgICA8YnV0dG9uIGlkPSJwcm9maWxlLXNhdmUiPlNhdmU8L2J1dHRvbj4KICA8L2Rpdj4KPC9maWVsZHNldD4KPC9mb3JtPgpgOwpjb25zdCBQUk9GSUxFX0VESVRPUl9DU1MgPSBjc3NgCgogICAgI3Byb2ZpbGUtZm9ybS1idXR0b25zIHsKICAgICAgICBqdXN0aWZ5LXNlbGY6IGVuZDsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGdhcDogMXJlbTsKICAgIH0KCiAgICAjcHJvZmlsZS1mb3JtLWhlbHAtcm93IHsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICB9CgogICAgI3Byb2ZpbGUtZm9ybS1oZWxwLXJvdyBzdW1tYXJ5IHsKICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKICAgIH0KCiAgICAjcHJvZmlsZS1mb3JtLWhlbHAtcm93IG9sIHsKICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7CiAgICB9CgogICAgI3Byb2ZpbGUtZm9ybS1oZWxwLXJvdyBsaSB7CiAgICAgICAgcGFkZGluZzogMC41cmVtIDA7CiAgICB9CgogICAgLmNmLWJ1dHRvbiB7CiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7CiAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07CiAgICB9CgogICAgLmNmLXNlY3Rpb24gewogICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07CiAgICAgICAgb3V0bGluZTogc29saWQgMXB4IGdyYXk7CiAgICB9CgogICAgI3Byb2ZpbGUtZm9ybS1vdXRwdXQtcm93IHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgZ2FwOiAxcmVtOwogICAgICAgIG1pbi1oZWlnaHQ6IDIuNXJlbTsKICAgIH0KCiAgICAjcHJvZmlsZS1mb3JtLW91dHB1dC1yb3cgb3V0cHV0IHsKICAgICAgICBmbGV4LWdyb3c6IDE7CiAgICB9CgogICAgI3Byb2ZpbGUtZm9ybS1wcm9ncmVzcyB7CiAgICAgICAgZm9udC1zaXplOiAwLjVyZW07IC8qIGRlZmF1bHQgM2VtID0+IDEuNXJlbSAqLwogICAgfQoKYDsKZnVuY3Rpb24gaW5pdFByb2ZpbGVFZGl0b3IoZG9jdW1lbnQsIHZtKSB7CiAgICBjb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLWZvcm0nKTsKICAgIGNvbnN0IHByb2ZpbGVGb3JtVGl0bGVEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZS1mb3JtLXRpdGxlJyk7CiAgICBjb25zdCBwcm9maWxlRmllbGRzZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZS1maWVsZHNldCcpOwogICAgY29uc3QgcHJvZmlsZU5hbWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLW5hbWUnKTsKICAgIGNvbnN0IHByb2ZpbGVBY2NvdW50SWRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLWFjY291bnQtaWQnKTsKICAgIGNvbnN0IHByb2ZpbGVBcGlUb2tlbklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtYXBpLXRva2VuJyk7CiAgICBjb25zdCBwcm9maWxlRGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtZGVsZXRlJyk7CiAgICBjb25zdCBwcm9maWxlQ2FuY2VsQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtY2FuY2VsJyk7CiAgICBjb25zdCBwcm9maWxlU2F2ZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLXNhdmUnKTsKICAgIGNvbnN0IHByb2ZpbGVGb3JtUHJvZ3Jlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZS1mb3JtLXByb2dyZXNzJyk7CiAgICBjb25zdCBwcm9maWxlRm9ybU91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLWZvcm0tb3V0cHV0Jyk7CiAgICBjb25zdCBwcm9maWxlRm9ybUhlbHBEZXRhaWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtZm9ybS1oZWxwLXJvdycpOwogICAgcHJvZmlsZUNhbmNlbEJ1dHRvbi5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmNhbmNlbFByb2ZpbGUoKTsKICAgIH07CiAgICBwcm9maWxlTmFtZUlucHV0Lm9uaW5wdXQgPSAoKT0+ewogICAgICAgIHZtLnNldFByb2ZpbGVOYW1lKHByb2ZpbGVOYW1lSW5wdXQudmFsdWUpOwogICAgfTsKICAgIHByb2ZpbGVBY2NvdW50SWRJbnB1dC5vbmlucHV0ID0gKCk9PnsKICAgICAgICB2bS5zZXRQcm9maWxlQWNjb3VudElkKHByb2ZpbGVBY2NvdW50SWRJbnB1dC52YWx1ZSk7CiAgICB9OwogICAgcHJvZmlsZUFwaVRva2VuSW5wdXQub25pbnB1dCA9ICgpPT57CiAgICAgICAgdm0uc2V0UHJvZmlsZUFwaVRva2VuKHByb2ZpbGVBcGlUb2tlbklucHV0LnZhbHVlKTsKICAgIH07CiAgICBwcm9maWxlU2F2ZUJ1dHRvbi5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLnNhdmVQcm9maWxlKCk7CiAgICB9OwogICAgcHJvZmlsZURlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmRlbGV0ZVByb2ZpbGUodm0ucHJvZmlsZUZvcm0ucHJvZmlsZUlkKTsKICAgIH07CiAgICByZXR1cm4gKCk9PnsKICAgICAgICBjb25zdCB3YXNIaWRkZW4gPSBwcm9maWxlRm9ybS5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZSc7CiAgICAgICAgcHJvZmlsZUZvcm0uc3R5bGUuZGlzcGxheSA9IHZtLnByb2ZpbGVGb3JtLnNob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnOwogICAgICAgIHByb2ZpbGVGaWVsZHNldC5kaXNhYmxlZCA9ICF2bS5wcm9maWxlRm9ybS5lbmFibGVkOwogICAgICAgIHByb2ZpbGVGb3JtVGl0bGVEaXYudGV4dENvbnRlbnQgPSB2bS5wcm9maWxlRm9ybS50aXRsZTsKICAgICAgICBwcm9maWxlTmFtZUlucHV0LnZhbHVlID0gdm0ucHJvZmlsZUZvcm0ubmFtZTsKICAgICAgICBwcm9maWxlQWNjb3VudElkSW5wdXQudmFsdWUgPSB2bS5wcm9maWxlRm9ybS5hY2NvdW50SWQ7CiAgICAgICAgcHJvZmlsZUFwaVRva2VuSW5wdXQudmFsdWUgPSB2bS5wcm9maWxlRm9ybS5hcGlUb2tlbjsKICAgICAgICBwcm9maWxlRGVsZXRlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSB2bS5wcm9maWxlRm9ybS5kZWxldGVWaXNpYmxlID8gJ2lubGluZS1ibG9jaycgOiAnbm9uZSc7CiAgICAgICAgcHJvZmlsZVNhdmVCdXR0b24uZGlzYWJsZWQgPSAhdm0ucHJvZmlsZUZvcm0uc2F2ZUVuYWJsZWQ7CiAgICAgICAgcHJvZmlsZUZvcm1Qcm9ncmVzcy5zdHlsZS5kaXNwbGF5ID0gdm0ucHJvZmlsZUZvcm0ucHJvZ3Jlc3NWaXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgICAgICBwcm9maWxlRm9ybU91dHB1dC50ZXh0Q29udGVudCA9IHZtLnByb2ZpbGVGb3JtLm91dHB1dE1lc3NhZ2U7CiAgICAgICAgaWYgKHdhc0hpZGRlbiAmJiB2bS5wcm9maWxlRm9ybS5zaG93aW5nKSB7CiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxEZXRhaWxzT3BlbiA9IHZtLnJlYWxQcm9maWxlcy5sZW5ndGggPT09IDA7CiAgICAgICAgICAgIHByb2ZpbGVGb3JtSGVscERldGFpbHMub3BlbiA9IGluaXRpYWxEZXRhaWxzT3BlbjsKICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgICAgICAgcHJvZmlsZU5hbWVJbnB1dC5mb2N1cygpOwogICAgICAgICAgICAgICAgcHJvZmlsZU5hbWVJbnB1dC5zZWxlY3QoKTsKICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgfQogICAgfTsKfQpjb25zdCBXRUxDT01FX1BBTkVMX0hUTUwgPSBodG1sYAo8Zm9ybSBpZD0id2VsY29tZS1wYW5lbCIgYXV0b2NvbXBsZXRlPSJvZmYiPgo8ZmllbGRzZXQgaWQ9IndlbGNvbWUtcGFuZWwtZmllbGRzZXQiPgogIDxkaXYgaWQ9IndlbGNvbWUtcGFuZWwtZm9ybS10aXRsZSIgY2xhc3M9Img2IGhpZ2gtZW1waGFzaXMtdGV4dCBmb3JtLXJvdyI+dGl0bGU8L2Rpdj4KCiAgPGRpdiBjbGFzcz0iZm9ybS1yb3cgYm9keTIgbWVkaXVtLWVtcGhhc2lzLXRleHQiPgogICAgV2VsY29tZSB0byA8c3BhbiBjbGFzcz0iaGlnaC1lbXBoYXNpcy10ZXh0Ij5XZWJ0YWlsIGZvciBDbG91ZGZsYXJlIFdvcmtlcnM8L3NwYW4+IQogICAgPHA+VmlldyBsaXZlIHJlcXVlc3RzIGFuZCBsb2dzIGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93b3JrZXJzLmNsb3VkZmxhcmUuY29tLyIgdGFyZ2V0PSJfYmxhbmsiPkNsb3VkZmxhcmUgV29ya2VyczwvYT4gZnJvbSB0aGUgY29tZm9ydCBvZiB5b3VyIGJyb3dzZXIuIAogICAgQSBmZXcgZW5oYW5jZW1lbnRzIG92ZXIgd2hhdCdzIHByb3ZpZGVkIDxhIGhyZWY9Imh0dHBzOi8vYmxvZy5jbG91ZGZsYXJlLmNvbS9pbnRyb2R1Y2luZy13b3JrZXJzLWRhc2hib2FyZC1sb2dzLyIgdGFyZ2V0PSJfYmxhbmsiPmJ5IGRlZmF1bHQ8L2E+IGluIHRoZSBDbG91ZGZsYXJlIGRhc2hib2FyZDo8L3A+CiAgICA8dWw+CiAgICAgICAgPGxpPlRhaWwgbXVsdGlwbGUgd29ya2VycyBhdCB0aGUgc2FtZSB0aW1lPC9saT4KICAgICAgICA8bGk+QWR2YW5jZWQgZmlsdGVyaW5nIGFuZCBtdWx0aS1jb2xvciBvdXRwdXQgc2ltaWxhciB0byA8YSBocmVmPSJodHRwczovL2RldmVsb3BlcnMuY2xvdWRmbGFyZS5jb20vd29ya2Vycy9jbGktd3JhbmdsZXIvY29tbWFuZHMjdGFpbCIgdGFyZ2V0PSJfYmxhbmsiPndyYW5nbGVyIHRhaWw8L2E+PC9saT4KICAgICAgICA8bGk+RHVyYWJsZSBvYmplY3QgY2xhc3MvbmFtZS9pZCBhbmQgY29sbyBpbmZvcm1hdGlvbiBjYW4gYmUgc3VyZmFjZWQgd2l0aCA8YSBocmVmPSJodHRwczovL2Rlbm9mbGFyZS5kZXYvZXhhbXBsZXMvd2VidGFpbCNsb2dwcm9wcyIgdGFyZ2V0PSJfYmxhbmsiPmxvZ3Byb3BzPC9hPjwvbGk+CiAgICAgICAgPGxpPk11bHRpcGxlIHByb2ZpbGVzLCBzd2l0Y2ggZWFzaWx5IGJldHdlZW4gbXVsdGlwbGUgYWNjb3VudHM8L2xpPgogICAgICAgIDxsaT5ObyBuZWVkIHRvIGxvZyBpbiB3aXRoIHlvdXIgZnVsbCBDbG91ZGZsYXJlIGNyZWRlbnRpYWxzLiAgUHJvZmlsZXMgYXJlIHN0b3JlZCBsb2NhbGx5IGluIHRoZSBicm93c2VyLCBhbmQgY2FuIGJlIHBlcm1pc3Npb25lZCBvbmx5IGZvciB0YWlsaW5nIHdvcmtlcnM8L2xpPgogICAgICAgIDxsaT5JbXBsZW1lbnRlZCBhcyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2t5bWV0aG9kL2Rlbm9mbGFyZS90cmVlL21hc3Rlci9leGFtcGxlcy93ZWJ0YWlsLXdvcmtlciIgdGFyZ2V0PSJfYmxhbmsiPmFuIG9wZW4tc291cmNlIENsb3VkZmxhcmUgV29ya2VyPC9hPiwgCiAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZW5vZmxhcmUuZGV2L2V4YW1wbGVzL3dlYnRhaWwjZGVwbG95LWl0LXRvLXlvdXItb3duLWFjY291bnQiIHRhcmdldD0iX2JsYW5rIj5kZXBsb3kgaXQgdG8geW91ciBvd24gYWNjb3VudDwvYT4sIAogICAgICAgICAgICBvciA8YSBocmVmPSJodHRwczovL2Rlbm9mbGFyZS5kZXYvZXhhbXBsZXMvd2VidGFpbCNob3N0LWl0LWxvY2FsbHkiIHRhcmdldD0iX2JsYW5rIj5ob3N0IGl0IGxvY2FsbHk8L2E+IHdpdGggPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3NreW1ldGhvZC9kZW5vZmxhcmUiIHRhcmdldD0iX2JsYW5rIj48Y29kZT5kZW5vZmxhcmU8L2NvZGU+PC9hPjwvbGk+CiAgICA8L3VsPgogICAgPHAgaWQ9IndlbGNvbWUtcGFuZWwtdHJhaWxlciI+Q3JlYXRlIGEgbmV3IHByb2ZpbGUgdG8gZ2V0IHN0YXJ0ZWQhPC9wPgogICAgPHAgaWQ9ImFib3V0LXBhbmVsLXRyYWlsZXIiPkhlYWQgb3ZlciB0byB0aGUgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3NreW1ldGhvZC9kZW5vZmxhcmUiIHRhcmdldD0iX2JsYW5rIj5EZW5vZmxhcmUgR2l0SHViIHJlcG88L2E+IHRvIHJlcXVlc3QgZmVhdHVyZXMsIHJlcG9ydCBidWdzLCBvciBjaGVjayBvdXQgdGhlIGNvZGUhPC9wPgogIDwvZGl2PgoKICA8ZGl2IGNsYXNzPSJmb3JtLXJocyI+CiAgICA8YnV0dG9uIGlkPSJ3ZWxjb21lLXBhbmVsLW5ldy1wcm9maWxlIiB0eXBlPSJzdWJtaXQiPk5ldyBwcm9maWxlPC9idXR0b24+CiAgICA8YnV0dG9uIGlkPSJ3ZWxjb21lLXBhbmVsLWNsb3NlIiB0eXBlPSJzdWJtaXQiPkNsb3NlPC9idXR0b24+CiAgPC9kaXY+CjwvZmllbGRzZXQ+CjwvZm9ybT4KYDsKY29uc3QgV0VMQ09NRV9QQU5FTF9DU1MgPSBjc3NgCgogICAgI3dlbGNvbWUtcGFuZWwtZm9ybS10aXRsZSB7CiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7IC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7CiAgICB9CgpgOwpmdW5jdGlvbiBpbml0V2VsY29tZVBhbmVsKGRvY3VtZW50LCB2bSkgewogICAgY29uc3Qgd2VsY29tZVBhbmVsRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3ZWxjb21lLXBhbmVsJyk7CiAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2VsY29tZS1wYW5lbC1mb3JtLXRpdGxlJyk7CiAgICBjb25zdCB3ZWxjb21lVHJhaWxlckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2VsY29tZS1wYW5lbC10cmFpbGVyJyk7CiAgICBjb25zdCBhYm91dFRyYWlsZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fib3V0LXBhbmVsLXRyYWlsZXInKTsKICAgIGNvbnN0IG5ld1Byb2ZpbGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2VsY29tZS1wYW5lbC1uZXctcHJvZmlsZScpOwogICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2VsY29tZS1wYW5lbC1jbG9zZScpOwogICAgbmV3UHJvZmlsZUJ1dHRvbi5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLm5ld1Byb2ZpbGUoKTsKICAgIH07CiAgICBjbG9zZUJ1dHRvbi5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmNsb3NlQWJvdXQoKTsKICAgIH07CiAgICByZXR1cm4gKCk9PnsKICAgICAgICBjb25zdCB3YXNIaWRkZW4gPSB3ZWxjb21lUGFuZWxFbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJzsKICAgICAgICBjb25zdCBzaG93ID0gdm0ud2VsY29tZVNob3dpbmcgJiYgIXZtLnByb2ZpbGVGb3JtLnNob3dpbmcgfHwgdm0uYWJvdXRTaG93aW5nOwogICAgICAgIHdlbGNvbWVQYW5lbEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHNob3cgPyAnYmxvY2snIDogJ25vbmUnOwogICAgICAgIGNvbnN0IHdlbGNvbWUgPSB2bS53ZWxjb21lU2hvd2luZzsKICAgICAgICB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSB3ZWxjb21lID8gJ0hlbGxvIPCfkYsnIDogJ0Fib3V0JzsKICAgICAgICB3ZWxjb21lVHJhaWxlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHdlbGNvbWUgPyAnYmxvY2snIDogJ25vbmUnOwogICAgICAgIGFib3V0VHJhaWxlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHdlbGNvbWUgPyAnbm9uZScgOiAnYmxvY2snOwogICAgICAgIG5ld1Byb2ZpbGVCdXR0b24uc3R5bGUuZGlzcGxheSA9IHdlbGNvbWUgPyAnYmxvY2snIDogJ25vbmUnOwogICAgICAgIGNsb3NlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSB3ZWxjb21lID8gJ25vbmUnIDogJ2Jsb2NrJzsKICAgICAgICBpZiAod2FzSGlkZGVuICYmIHNob3cpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coYCR7d2VsY29tZSA/ICd3ZWxjb21lJyA6ICdhYm91dCd9IHBhbmVsIG9wZW5gKTsKICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgICAgICAgKHdlbGNvbWUgPyBuZXdQcm9maWxlQnV0dG9uIDogY2xvc2VCdXR0b24pLmZvY3VzKCk7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgIH0KICAgIH07Cn0KY29uc3QgTU9EQUxfSFRNTCA9IGh0bWxgCjxkaXYgaWQ9Im1vZGFsIiBjbGFzcz0ibW9kYWwgaGlkZGVuLXZlcnRpY2FsLXNjcm9sbCI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICR7V0VMQ09NRV9QQU5FTF9IVE1MfQogICAgJHtQUk9GSUxFX0VESVRPUl9IVE1MfQogICAgJHtGSUxURVJfRURJVE9SX0hUTUx9CiAgICA8L2Rpdj4KPC9kaXY+CmA7CmNvbnN0IE1PREFMX0NTUyA9IGNzc2AKLm1vZGFsIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICB6LWluZGV4OiAxOwogICAgbGVmdDogMDsKICAgIHRvcDogMDsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpOwp9CgoubW9kYWwtY29udGVudCB7CiAgICBtYXJnaW46IDEwJSBhdXRvOwogICAgd2lkdGg6IDgwJTsKICAgIG1heC13aWR0aDogNDByZW07CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTsKfQoKQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHsKICAgIC5tb2RhbC1jb250ZW50IHsKICAgICAgICBtYXJnaW46IDEwJSAwOwogICAgICAgIHdpZHRoOiAxMDAlOwogICAgfQp9CgpgOwpmdW5jdGlvbiBpbml0TW9kYWwoZG9jdW1lbnQsIHZtKSB7CiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbCcpOwogICAgY29uc3QgdXBkYXRlUHJvZmlsZUVkaXRvciA9IGluaXRQcm9maWxlRWRpdG9yKGRvY3VtZW50LCB2bSk7CiAgICBjb25zdCB1cGRhdGVGaWx0ZXJFZGl0b3IgPSBpbml0RmlsdGVyRWRpdG9yKGRvY3VtZW50LCB2bSk7CiAgICBjb25zdCB1cGRhdGVXZWxjb21lUGFuZWwgPSBpbml0V2VsY29tZVBhbmVsKGRvY3VtZW50LCB2bSk7CiAgICBjb25zdCBjbG9zZU1vZGFsID0gKCk9PnsKICAgICAgICBpZiAoIXZtLnByb2ZpbGVGb3JtLnNob3dpbmcgJiYgIXZtLmZpbHRlckZvcm0uc2hvd2luZyAmJiAhdm0ud2VsY29tZVNob3dpbmcgJiYgIXZtLmFib3V0U2hvd2luZykgcmV0dXJuOwogICAgICAgIGlmICh2bS5wcm9maWxlRm9ybS5wcm9ncmVzc1Zpc2libGUpIHJldHVybjsKICAgICAgICB2bS5wcm9maWxlRm9ybS5zaG93aW5nID0gZmFsc2U7CiAgICAgICAgdm0uZmlsdGVyRm9ybS5zaG93aW5nID0gZmFsc2U7CiAgICAgICAgdm0uYWJvdXRTaG93aW5nID0gZmFsc2U7CiAgICAgICAgdm0ub25DaGFuZ2UoKTsKICAgIH07CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpPT57CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PSBtb2RhbCkgewogICAgICAgICAgICBjbG9zZU1vZGFsKCk7CiAgICAgICAgfQogICAgfSk7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KT0+ewogICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgd2luZG93LmV2ZW50OwogICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7CiAgICAgICAgICAgIGNsb3NlTW9kYWwoKTsKICAgICAgICB9CiAgICB9KTsKICAgIHJldHVybiAoKT0+ewogICAgICAgIHVwZGF0ZVByb2ZpbGVFZGl0b3IoKTsKICAgICAgICB1cGRhdGVGaWx0ZXJFZGl0b3IoKTsKICAgICAgICB1cGRhdGVXZWxjb21lUGFuZWwoKTsKICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gdm0ucHJvZmlsZUZvcm0uc2hvd2luZyB8fCB2bS5maWx0ZXJGb3JtLnNob3dpbmcgfHwgdm0ud2VsY29tZVNob3dpbmcgfHwgdm0uYWJvdXRTaG93aW5nID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgIH07Cn0KY29uc3QgQ0lSQ1VMQVJfUFJPR1JFU1NfQ1NTID0gY3NzYAoucHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhciB7CiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7CiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7CiAgICBhcHBlYXJhbmNlOiBub25lOwogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIHBhZGRpbmc6IDAuMjVlbTsKICAgIHdpZHRoOiAzZW07CiAgICBoZWlnaHQ6IDNlbTsKICAgIGNvbG9yOiB2YXIoLS1wdXJlLW1hdGVyaWFsLXByaW1hcnktcmdiLCByZ2IoMzMsIDE1MCwgMjQzKSk7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIG92ZXJmbG93OiBoaWRkZW47Cn0KCi5wdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyOjotd2Via2l0LXByb2dyZXNzLWJhciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKfQoKLyogSW5kZXRlcm1pbmF0ZSAqLwoucHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhcjppbmRldGVybWluYXRlIHsKICAgIC13ZWJraXQtbWFzay1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50IDUwJSwgYmxhY2sgNTAlKSwgbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCB0cmFuc3BhcmVudCA1MCUsIGJsYWNrIDUwJSk7CiAgICBtYXNrLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodHJhbnNwYXJlbnQgNTAlLCBibGFjayA1MCUpLCBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHRyYW5zcGFyZW50IDUwJSwgYmxhY2sgNTAlKTsKICAgIGFuaW1hdGlvbjogcHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhciA2cyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoMC4zLCAwLjYsIDEsIDEpOwp9Cgo6LW1zLWxhbmcoeCksIC5wdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyOmluZGV0ZXJtaW5hdGUgewogICAgYW5pbWF0aW9uOiBub25lOwp9CgoucHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhcjppbmRldGVybWluYXRlOjpiZWZvcmUsCi5wdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyOmluZGV0ZXJtaW5hdGU6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUgewogICAgY29udGVudDogIiI7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBtYXJnaW4tYm90dG9tOiAwLjI1ZW07CiAgICBib3JkZXI6IHNvbGlkIDAuMjVlbSB0cmFuc3BhcmVudDsKICAgIGJvcmRlci10b3AtY29sb3I6IGN1cnJlbnRDb2xvcjsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGFuaW1hdGlvbjogcHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhci1wc2V1ZG8gMC43NXMgaW5maW5pdGUgbGluZWFyIGFsdGVybmF0ZTsKfQoKLnB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXI6aW5kZXRlcm1pbmF0ZTo6LW1vei1wcm9ncmVzcy1iYXIgewogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGJvcmRlcjogc29saWQgMC4yNWVtIHRyYW5zcGFyZW50OwogICAgYm9yZGVyLXRvcC1jb2xvcjogY3VycmVudENvbG9yOwogICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGFuaW1hdGlvbjogcHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhci1wc2V1ZG8gMC43NXMgaW5maW5pdGUgbGluZWFyIGFsdGVybmF0ZTsKfQoKLnB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXI6aW5kZXRlcm1pbmF0ZTo6LW1zLWZpbGwgewogICAgYW5pbWF0aW9uLW5hbWU6IC1tcy1yaW5nOwp9CgpAa2V5ZnJhbWVzIHB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXIgewogICAgMCUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOwogICAgfQogICAgMTIuNSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7CiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwogICAgfQogICAgMjUlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg2MzBkZWcpOwogICAgfQogICAgMzcuNSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDgxMGRlZyk7CiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwogICAgfQogICAgNTAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMjYwZGVnKTsKICAgIH0KICAgIDYyLjUlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxNDQwZGVnKTsKICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7CiAgICB9CiAgICA3NSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4OTBkZWcpOwogICAgfQogICAgODcuNSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDIwNzBkZWcpOwogICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjsKICAgIH0KICAgIDEwMCUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDI1MjBkZWcpOwogICAgfQp9CgpAa2V5ZnJhbWVzIHB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXItcHNldWRvIHsKICAgIDAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMzBkZWcpOwogICAgfQogICAgMjkuNCUgewogICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIH0KICAgIDI5LjQxJSB7CiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IGN1cnJlbnRDb2xvcjsKICAgIH0KICAgIDY0LjclIHsKICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIH0KICAgIDY0LjcxJSB7CiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogY3VycmVudENvbG9yOwogICAgfQogICAgMTAwJSB7CiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IGN1cnJlbnRDb2xvcjsKICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiBjdXJyZW50Q29sb3I7CiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMjI1ZGVnKTsKICAgIH0KfQpgOwpjb25zdCBDT05TT0xFX0hUTUwgPSBodG1sYAo8ZGl2IGlkPSJjb25zb2xlIj4KICAgIDxkaXYgaWQ9ImNvbnNvbGUtaGVhZGVyIj4KICAgICAgICA8ZGl2IGlkPSJjb25zb2xlLWhlYWRlci1maWx0ZXJzIiBjbGFzcz0iYm9keTIiPjwvZGl2PgogICAgICAgIDxkaXYgaWQ9ImNvbnNvbGUtaGVhZGVyLXN0YXR1cyI+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNvbnNvbGUtaGVhZGVyLXRhaWxzIiBjbGFzcz0ib3ZlcmxpbmUgbWVkaXVtLWVtcGhhc2lzLXRleHQiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJjb25zb2xlLWhlYWRlci1xcHMiIGNsYXNzPSJvdmVybGluZSBtZWRpdW0tZW1waGFzaXMtdGV4dCI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9ImNvbnNvbGUtaGVhZGVyLWNsZWFyIj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGNvZGUgaWQ9ImNvbnNvbGUtbGFzdC1saW5lIiBjbGFzcz0ibGluZSI+c3BhY2VyPC9jb2RlPgo8L2Rpdj4KYDsKY29uc3QgQ09OU09MRV9DU1MgPSBjc3NgCgojY29uc29sZSB7CiAgICBjb2xvcjogdmFyKC0taGlnaC1lbXBoYXNpcy10ZXh0LWNvbG9yKTsKICAgIGhlaWdodDogMTAwdmg7CiAgICB3aWR0aDogMTAwJTsKICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3IpOwogICAgb3ZlcmZsb3cteTogc2Nyb2xsOwogICAgb3ZlcmZsb3cteDogaGlkZGVuOwogICAgZmxleC1ncm93OiAxOwp9CgojY29uc29sZTo6LXdlYmtpdC1zY3JvbGxiYXIgewogICAgd2lkdGg6IDFyZW07CiAgICBoZWlnaHQ6IDNyZW07CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTsKfQoKI2NvbnNvbGU6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1lZGl1bS1lbXBoYXNpcy10ZXh0LWNvbG9yKTsKfQoKI2NvbnNvbGUtaGVhZGVyIHsKICAgIHBvc2l0aW9uOiBzdGlja3k7CiAgICB0b3A6IDA7CiAgICBoZWlnaHQ6IDMuNzVyZW07CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBwYWRkaW5nOiAxLjI1cmVtIDFyZW0gMXJlbSAwOwp9CgojY29uc29sZS1oZWFkZXItZmlsdGVycyB7CiAgICBmbGV4LWdyb3c6IDE7CiAgICBjb2xvcjogdmFyKC0tbWVkaXVtLWVtcGhhc2lzLXRleHQtY29sb3IpOwogICAgZm9udC1mYW1pbHk6IHZhcigtLXNhbnMtc2VyaWYtZm9udC1mYW1pbHkpOwoKICAgIGRpc3BsYXk6IC13ZWJraXQtYm94OwogICAgLXdlYmtpdC1saW5lLWNsYW1wOiAzOwogICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDsgIAogICAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKI2NvbnNvbGUtaGVhZGVyLXN0YXR1cyB7CiAgICBoZWlnaHQ6IDFyZW07CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIG1pbi13aWR0aDogNnJlbTsKICAgIHRleHQtYWxpZ246IHJpZ2h0OwogICAgcGFkZGluZy10b3A6IDAuMjVyZW07CiAgICB1c2VyLXNlbGVjdDogbm9uZTsgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKfQoKI2NvbnNvbGUtaGVhZGVyLXRhaWxzIHsKICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7Cn0KCiNjb25zb2xlLWhlYWRlci1jbGVhciB7CiAgICBtYXJnaW4tcmlnaHQ6IC0wLjVyZW07CiAgICBtYXJnaW4tbGVmdDogMXJlbTsKICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKfQoKI2NvbnNvbGUtaGVhZGVyLWNsZWFyIC5hY3Rpb24taWNvbiB7CiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07CiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTsKfQoKI2NvbnNvbGUgLmxpbmUgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBmb250LXNpemU6IDAuNzVyZW07IC8qIDEycHggKi8KICAgIGxpbmUtaGVpZ2h0OiAxLjFyZW07CiAgICBmb250LWZhbWlseTogdmFyKC0tbW9ub3NwYWNlLWZvbnQtZmFtaWx5KTsKICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKfQoKI2NvbnNvbGUtbGFzdC1saW5lIHsKICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKfQoKYDsKZnVuY3Rpb24gaW5pdENvbnNvbGUoZG9jdW1lbnQsIHZtKSB7CiAgICBjb25zdCBjb25zb2xlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnNvbGUnKTsKICAgIGNvbnN0IGNvbnNvbGVIZWFkZXJGaWx0ZXJzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnNvbGUtaGVhZGVyLWZpbHRlcnMnKTsKICAgIGNvbnN0IGNvbnNvbGVIZWFkZXJUYWlsc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29uc29sZS1oZWFkZXItdGFpbHMnKTsKICAgIGNvbnN0IGNvbnNvbGVIZWFkZXJRcHNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnNvbGUtaGVhZGVyLXFwcycpOwogICAgY29uc3QgY29uc29sZUhlYWRlckNsZWFyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25zb2xlLWhlYWRlci1jbGVhcicpOwogICAgY29uc3QgY29uc29sZUxhc3RMaW5lRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25zb2xlLWxhc3QtbGluZScpOwogICAgbGV0IHNob3dpbmdDbGVhckJ1dHRvbiA9IGZhbHNlOwogICAgdm0ubG9nZ2VyID0gKC4uLmRhdGEpPT57CiAgICAgICAgY29uc3QgbGluZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjb2RlJyk7CiAgICAgICAgbGluZUVsZW1lbnQuY2xhc3NOYW1lID0gJ2xpbmUnOwogICAgICAgIGxldCBwb3MgPSAwOwogICAgICAgIHdoaWxlKHBvcyA8IGRhdGEubGVuZ3RoKXsKICAgICAgICAgICAgaWYgKHBvcyA+IDApIHsKICAgICAgICAgICAgICAgIGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcsICcpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBtc2cgPSBkYXRhW3Bvc107CiAgICAgICAgICAgIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gbXNnLnNwbGl0KCclYycpOwogICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgICAgICAgICBsZXQgcmVuZGVyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgaSA8IHRva2Vucy5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZGF0YVtwb3MgKyBpXTsKICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlLmluY2x1ZGVzKCd4LScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbSA9IC94LWR1cmFibGUtb2JqZWN0LShjbGFzc3xuYW1lfGlkKVxzKjpccyonKC4qPyknLy5leGVjKHN0eWxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gbVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2dwcm9wTmFtZSA9ICdkdXJhYmxlT2JqZWN0JyArIHR5cGUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5ocmVmID0gJyMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLm9uY2xpY2sgPSAoKT0+ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2V0TG9ncHJvcEZpbHRlcihbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ncHJvcE5hbWUgKyAnOicgKyB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5vbkNoYW5nZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRva2Vuc1tpXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuLmFwcGVuZENoaWxkKGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghcmVuZGVyZWQpIHJlbmRlclRleHRJbnRvU3Bhbih0b2tlbnNbaV0sIHNwYW4pOwogICAgICAgICAgICAgICAgICAgIGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKHNwYW4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcG9zICs9IDEgKyB0b2tlbnMubGVuZ3RoIC0gMTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEpTT04uc3RyaW5naWZ5KG1zZykpKTsKICAgICAgICAgICAgICAgIHBvcysrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnNvbGVEaXYuaW5zZXJ0QmVmb3JlKGxpbmVFbGVtZW50LCBjb25zb2xlTGFzdExpbmVFbGVtZW50KTsKICAgICAgICBjb25zdCB7IHNjcm9sbEhlaWdodCAsIHNjcm9sbFRvcCAsIGNsaWVudEhlaWdodCAgfSA9IGNvbnNvbGVEaXY7CiAgICAgICAgY29uc3QgZGlmZiA9IHNjcm9sbEhlaWdodCAtIHNjcm9sbFRvcDsKICAgICAgICBjb25zdCBhdXRvc2Nyb2xsID0gZGlmZiAtIDE2ICogNCA8PSBjbGllbnRIZWlnaHQ7CiAgICAgICAgaWYgKGF1dG9zY3JvbGwpIHsKICAgICAgICAgICAgY29uc29sZUxhc3RMaW5lRWxlbWVudC5zY3JvbGxJbnRvVmlldyhmYWxzZSk7CiAgICAgICAgfQogICAgICAgIGlmICghc2hvd2luZ0NsZWFyQnV0dG9uKSB7CiAgICAgICAgICAgIGNvbnNvbGVIZWFkZXJDbGVhckVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJzsKICAgICAgICAgICAgc2hvd2luZ0NsZWFyQnV0dG9uID0gdHJ1ZTsKICAgICAgICB9CiAgICB9OwogICAgdm0ub25SZXNldE91dHB1dCA9ICgpPT57CiAgICAgICAgY29uc3QgbGluZXMgPSBjb25zb2xlRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJy5saW5lJyk7CiAgICAgICAgbGluZXMuZm9yRWFjaCgobGluZSk9PnsKICAgICAgICAgICAgaWYgKGxpbmUuaWQgIT09ICdjb25zb2xlLWxhc3QtbGluZScpIGNvbnNvbGVEaXYucmVtb3ZlQ2hpbGQobGluZSk7CiAgICAgICAgfSk7CiAgICAgICAgY29uc29sZUhlYWRlckNsZWFyRWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CiAgICAgICAgc2hvd2luZ0NsZWFyQnV0dG9uID0gZmFsc2U7CiAgICB9OwogICAgY29uc29sZUhlYWRlclFwc0VsZW1lbnQudGV4dENvbnRlbnQgPSBjb21wdXRlUXBzVGV4dCgwKTsKICAgIHZtLm9uUXBzQ2hhbmdlID0gKHFwcyk9PnsKICAgICAgICBjb25zb2xlSGVhZGVyUXBzRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbXB1dGVRcHNUZXh0KHFwcyk7CiAgICB9OwogICAgTGl0RWxlbWVudC5yZW5kZXIoYWN0aW9uSWNvbihDTEVBUl9JQ09OLCB7CiAgICAgICAgdGV4dDogJ0NsZWFyJywKICAgICAgICBvbmNsaWNrOiAoKT0+dm0ucmVzZXRPdXRwdXQoKQogICAgfSksIGNvbnNvbGVIZWFkZXJDbGVhckVsZW1lbnQpOwogICAgcmV0dXJuICgpPT57CiAgICAgICAgY29uc29sZUhlYWRlckZpbHRlcnNEaXYuc3R5bGUudmlzaWJpbGl0eSA9IHZtLnByb2ZpbGVzLmxlbmd0aCA+IDAgPyAndmlzaWJsZScgOiAnaGlkZGVuJzsKICAgICAgICBjb25zb2xlSGVhZGVyVGFpbHNFbGVtZW50LnRleHRDb250ZW50ID0gY29tcHV0ZVRhaWxzVGV4dCh2bS50YWlscy5zaXplKTsKICAgICAgICBMaXRFbGVtZW50LnJlbmRlcihGSUxURVJTX0hUTUwodm0pLCBjb25zb2xlSGVhZGVyRmlsdGVyc0Rpdik7CiAgICB9Owp9CmNvbnN0IEZJTFRFUlNfSFRNTCA9ICh2bSk9PnsKICAgIHJldHVybiBodG1sYFNob3dpbmcgPGEgaHJlZj0iIyIgQGNsaWNrPSR7KGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmVkaXRTZWxlY3Rpb25GaWVsZHMoKTsKICAgIH19PiR7dm0uY29tcHV0ZVNlbGVjdGlvbkZpZWxkc1RleHQoKX08L2E+CiAgICAgZm9yIDxhIGhyZWY9IiMiIEBjbGljaz0keyhlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2bS5lZGl0RXZlbnRGaWx0ZXIoKTsKICAgIH19PiR7Y29tcHV0ZUV2ZW50RmlsdGVyVGV4dCh2bS5maWx0ZXIpfTwvYT4KICAgICB3aXRoIDxhIGhyZWY9IiMiIEBjbGljaz0keyhlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2bS5lZGl0U3RhdHVzRmlsdGVyKCk7CiAgICB9fT4ke2NvbXB1dGVTdGF0dXNGaWx0ZXJUZXh0KHZtLmZpbHRlcil9PC9hPiwKICAgICA8YSBocmVmPSIjIiBAY2xpY2s9JHsoZSk9PnsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdm0uZWRpdElwQWRkcmVzc0ZpbHRlcigpOwogICAgfX0+JHtjb21wdXRlSXBBZGRyZXNzRmlsdGVyVGV4dCh2bS5maWx0ZXIpfTwvYT4sCiAgICAgPGEgaHJlZj0iIyIgQGNsaWNrPSR7KGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmVkaXRNZXRob2RGaWx0ZXIoKTsKICAgIH19PiR7Y29tcHV0ZU1ldGhvZEZpbHRlclRleHQodm0uZmlsdGVyKX08L2E+LAogICAgIDxhIGhyZWY9IiMiIEBjbGljaz0keyhlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2bS5lZGl0U2FtcGxpbmdSYXRlRmlsdGVyKCk7CiAgICB9fT4ke2NvbXB1dGVTYW1wbGluZ1JhdGVGaWx0ZXJUZXh0KHZtLmZpbHRlcil9PC9hPiwgCiAgICAgPGEgaHJlZj0iIyIgQGNsaWNrPSR7KGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmVkaXRTZWFyY2hGaWx0ZXIoKTsKICAgIH19PiR7Y29tcHV0ZVNlYXJjaEZpbHRlclRleHQodm0uZmlsdGVyKX08L2E+LCAKICAgIDxhIGhyZWY9IiMiIEBjbGljaz0keyhlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2bS5lZGl0SGVhZGVyRmlsdGVyKCk7CiAgICB9fT4ke2NvbXB1dGVIZWFkZXJGaWx0ZXJUZXh0KHZtLmZpbHRlcil9PC9hPiwKICAgICBhbmQgPGEgaHJlZj0iIyIgQGNsaWNrPSR7KGUpPT57CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZtLmVkaXRMb2dwcm9wRmlsdGVyKCk7CiAgICB9fT4ke2NvbXB1dGVMb2dwcm9wRmlsdGVyVGV4dCh2bS5maWx0ZXIpfTwvYT4uCiAgICAgJHt2bS5oYXNBbnlGaWx0ZXJzKCkgPyBodG1sYCg8YSBocmVmPSIjIiBAY2xpY2s9JHsoZSk9PnsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdm0ucmVzZXRGaWx0ZXJzKCk7CiAgICB9fT5yZXNldDwvYT4pYCA6ICcnfWA7Cn07CmZ1bmN0aW9uIGNvbXB1dGVFdmVudEZpbHRlclRleHQoZmlsdGVyKSB7CiAgICBjb25zdCB7IGV2ZW50MSAgfSA9IGZpbHRlcjsKICAgIHJldHVybiBldmVudDEgPT09ICdjcm9uJyA/ICdDUk9OIHRyaWdnZXIgZXZlbnRzJyA6IGV2ZW50MSA9PT0gJ2h0dHAnID8gJ0hUVFAgcmVxdWVzdCBldmVudHMnIDogJ2FsbCBldmVudHMnOwp9CmZ1bmN0aW9uIGNvbXB1dGVTdGF0dXNGaWx0ZXJUZXh0KGZpbHRlcikgewogICAgY29uc3QgeyBzdGF0dXMxICB9ID0gZmlsdGVyOwogICAgcmV0dXJuIHN0YXR1czEgPT09ICdlcnJvcicgPyAnZXJyb3Igc3RhdHVzJyA6IHN0YXR1czEgPT09ICdzdWNjZXNzJyA/ICdzdWNjZXNzIHN0YXR1cycgOiAnYW55IHN0YXR1cyc7Cn0KZnVuY3Rpb24gY29tcHV0ZUlwQWRkcmVzc0ZpbHRlclRleHQoZmlsdGVyKSB7CiAgICBjb25zdCBpcEFkZHJlc3MxID0gZmlsdGVyLmlwQWRkcmVzczEgfHwgW107CiAgICByZXR1cm4gaXBBZGRyZXNzMS5sZW5ndGggPT09IDAgPyAnYW55IElQIGFkZHJlc3MnIDogaXBBZGRyZXNzMS5sZW5ndGggPT09IDEgPyBgSVAgYWRkcmVzcyBvZiAke2lwQWRkcmVzczFbMF19YCA6IGBJUCBhZGRyZXNzIGluIFske2lwQWRkcmVzczEuam9pbignLCAnKX1dYDsKfQpmdW5jdGlvbiBjb21wdXRlTWV0aG9kRmlsdGVyVGV4dChmaWx0ZXIpIHsKICAgIGNvbnN0IG1ldGhvZDEgPSBmaWx0ZXIubWV0aG9kMSB8fCBbXTsKICAgIHJldHVybiBtZXRob2QxLmxlbmd0aCA9PT0gMCA/ICdhbnkgbWV0aG9kJyA6IG1ldGhvZDEubGVuZ3RoID09PSAxID8gYG1ldGhvZCBvZiAke21ldGhvZDFbMF19YCA6IGBtZXRob2QgaW4gWyR7bWV0aG9kMS5qb2luKCcsICcpfV1gOwp9CmZ1bmN0aW9uIGNvbXB1dGVTYW1wbGluZ1JhdGVGaWx0ZXJUZXh0KGZpbHRlcikgewogICAgY29uc3Qgc2FtcGxpbmdSYXRlMSA9IHR5cGVvZiBmaWx0ZXIuc2FtcGxpbmdSYXRlMSA9PT0gJ251bWJlcicgPyBmaWx0ZXIuc2FtcGxpbmdSYXRlMSA6IDE7CiAgICByZXR1cm4gc2FtcGxpbmdSYXRlMSA+PSAxID8gJ25vIHNhbXBsaW5nJyA6IGAkeyhNYXRoLm1heCgwLCBzYW1wbGluZ1JhdGUxKSAqIDEwMCkudG9GaXhlZCgyKX0lIHNhbXBsaW5nIHJhdGVgOwp9CmZ1bmN0aW9uIGNvbXB1dGVTZWFyY2hGaWx0ZXJUZXh0KGZpbHRlcikgewogICAgY29uc3QgeyBzZWFyY2gxICB9ID0gZmlsdGVyOwogICAgcmV0dXJuIHR5cGVvZiBzZWFyY2gxID09PSAnc3RyaW5nJyAmJiBzZWFyY2gxLmxlbmd0aCA+IDAgPyBgY29uc29sZSBsb2dzIGNvbnRhaW5pbmcgIiR7c2VhcmNoMX0iYCA6ICdubyBzZWFyY2ggZmlsdGVyJzsKfQpmdW5jdGlvbiBjb21wdXRlSGVhZGVyRmlsdGVyVGV4dChmaWx0ZXIpIHsKICAgIGNvbnN0IGhlYWRlcjEgPSBmaWx0ZXIuaGVhZGVyMSB8fCBbXTsKICAgIHJldHVybiBoZWFkZXIxLmxlbmd0aCA9PT0gMCA/ICdubyBoZWFkZXIgZmlsdGVyJyA6IGhlYWRlcjEubGVuZ3RoID09PSAxID8gYGhlYWRlciBmaWx0ZXIgb2YgJHtoZWFkZXIxWzBdfWAgOiBgaGVhZGVyIGZpbHRlcnMgb2YgWyR7aGVhZGVyMS5qb2luKCcsICcpfV1gOwp9CmZ1bmN0aW9uIGNvbXB1dGVMb2dwcm9wRmlsdGVyVGV4dChmaWx0ZXIpIHsKICAgIGNvbnN0IGxvZ3Byb3AxID0gZmlsdGVyLmxvZ3Byb3AxIHx8IFtdOwogICAgcmV0dXJuIGxvZ3Byb3AxLmxlbmd0aCA9PT0gMCA/ICdubyBsb2dwcm9wIGZpbHRlcicgOiBsb2dwcm9wMS5sZW5ndGggPT09IDEgPyBgbG9ncHJvcCBmaWx0ZXIgb2YgJHtsb2dwcm9wMVswXX1gIDogYGxvZ3Byb3AgZmlsdGVycyBvZiBbJHtsb2dwcm9wMS5qb2luKCcsICcpfV1gOwp9CmZ1bmN0aW9uIGNvbXB1dGVUYWlsc1RleHQodGFpbENvdW50KSB7CiAgICByZXR1cm4gdGFpbENvdW50ID09PSAwID8gJ25vIHRhaWxzJyA6IHRhaWxDb3VudCA9PT0gMSA/ICcxIHRhaWwnIDogYCR7dGFpbENvdW50fSB0YWlsc2A7Cn0KZnVuY3Rpb24gY29tcHV0ZVFwc1RleHQocXBzKSB7CiAgICByZXR1cm4gYCR7cXBzLnRvRml4ZWQoMil9IHFwc2A7Cn0KZnVuY3Rpb24gcmVuZGVyVGV4dEludG9TcGFuKHRleHQsIHNwYW4pIHsKICAgIGNvbnN0IHBhdHRlcm4gPSAvKGh0dHBzOlwvXC9bXlxzKV0rfFxkezEsM31cLlxkezEsM31cLlxkezEsM31cLlxkezEsM318W1xkMC1mXSsoOltcZDAtZl17MCw0fSl7Niw3fSkvZzsKICAgIGxldCBtOwogICAgbGV0IGkgPSAwOwogICAgd2hpbGUobnVsbCAhPT0gKG0gPSBwYXR0ZXJuLmV4ZWModGV4dCkpKXsKICAgICAgICBpZiAobS5pbmRleCA+IGkpIHsKICAgICAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0LnN1YnN0cmluZyhpLCBtLmluZGV4KSkpOwogICAgICAgIH0KICAgICAgICBjb25zdCB1cmxPcklwID0gbVswXTsKICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgIGEuaHJlZiA9IHVybE9ySXAuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSA/IHVybE9ySXAgOiBgaHR0cHM6Ly9pcGluZm8uaW8vJHt1cmxPcklwfWA7CiAgICAgICAgYS50YXJnZXQgPSAnX2JsYW5rJzsKICAgICAgICBhLnJlbCA9ICdub3JlZmVycmVyIG5vb3BlbmVyIG5vZm9sbG93JzsKICAgICAgICBhLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHVybE9ySXApKTsKICAgICAgICBzcGFuLmFwcGVuZENoaWxkKGEpOwogICAgICAgIGkgPSBtLmluZGV4ICsgdXJsT3JJcC5sZW5ndGg7CiAgICB9CiAgICBpZiAoaSA8IHRleHQubGVuZ3RoKSB7CiAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0LnN1YnN0cmluZyhpKSkpOwogICAgfQp9CmNvbnN0IGFwcE1vZHVsZVNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAtbW9kdWxlLXNjcmlwdCcpOwpmdW5jdGlvbiBzZXRBcHBTdGF0ZShhcHBTdGF0ZSkgewogICAgYXBwTW9kdWxlU2NyaXB0LmRhdGFzZXQuc3RhdGUgPSBhcHBTdGF0ZTsKfQpzZXRBcHBTdGF0ZSgnc3RhcnRpbmcnKTsKY29uc3QgYXBwQ3NzID0gY3NzYAoKbWFpbiB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZ2FwOiAwLjVyZW07Cn0KCjpyb290IHsKICAgIC0tcHVyZS1tYXRlcmlhbC1wcmltYXJ5LXJnYjogcmdiKDE4NywgMTM0LCAyNTIpOwp9CgouaGlkZGVuLXZlcnRpY2FsLXNjcm9sbCB7CiAgICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7IC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsKICAgIG92ZXJmbG93LXk6IHNjcm9sbDsKfQoKLmhpZGRlbi12ZXJ0aWNhbC1zY3JvbGw6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICAgIGRpc3BsYXk6IG5vbmU7IC8qIGZvciBDaHJvbWUsIFNhZmFyaSwgYW5kIE9wZXJhICovCn0KCmA7CmNvbnN0IGFwcEh0bWwgPSBodG1sYAo8bWFpbj4KJHtTSURFQkFSX0hUTUx9CiR7Q09OU09MRV9IVE1MfQoke01PREFMX0hUTUx9CjwvbWFpbj5gOwpmdW5jdGlvbiBhcHBlbmRTdHlsZXNoZWV0cyhjc3NUZXh0cykgewogICAgY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICBzdHlsZVNoZWV0LnR5cGUgPSAndGV4dC9jc3MnOwogICAgc3R5bGVTaGVldC50ZXh0Q29udGVudCA9IGNzc1RleHRzLmpvaW4oJ1xuXG4nKTsKICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7Cn0KYXBwZW5kU3R5bGVzaGVldHMoWwogICAgTUFURVJJQUxfQ1NTLmNzc1RleHQsCiAgICBhcHBDc3MuY3NzVGV4dCwKICAgIEhFQURFUl9DU1MuY3NzVGV4dCwKICAgIFNJREVCQVJfQ1NTLmNzc1RleHQsCiAgICBDT05TT0xFX0NTUy5jc3NUZXh0LAogICAgTU9EQUxfQ1NTLmNzc1RleHQsCiAgICBXRUxDT01FX1BBTkVMX0NTUy5jc3NUZXh0LAogICAgUFJPRklMRV9FRElUT1JfQ1NTLmNzc1RleHQsCiAgICBGSUxURVJfRURJVE9SX0NTUy5jc3NUZXh0LAogICAgQ0lSQ1VMQVJfUFJPR1JFU1NfQ1NTLmNzc1RleHQsIApdKTsKTGl0RWxlbWVudC5yZW5kZXIoYXBwSHRtbCwgZG9jdW1lbnQuYm9keSk7CmZ1bmN0aW9uIHBhcnNlU3RhdGljRGF0YSgpIHsKICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0aWMtZGF0YS1zY3JpcHQnKTsKICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHNjcmlwdC50ZXh0KTsKICAgIGNvbnN0IHZlcnNpb24gPSB0eXBlb2YgZGF0YS52ZXJzaW9uID09PSAnc3RyaW5nJyA/IGRhdGEudmVyc2lvbiA6IHVuZGVmaW5lZDsKICAgIGNvbnN0IGZsYWdzID0gdHlwZW9mIGRhdGEuZmxhZ3MgPT09ICdzdHJpbmcnID8gZGF0YS5mbGFncyA6IHVuZGVmaW5lZDsKICAgIHJldHVybiB7CiAgICAgICAgdmVyc2lvbiwKICAgICAgICBmbGFncwogICAgfTsKfQpjb25zdCBkYXRhID0gcGFyc2VTdGF0aWNEYXRhKCk7CmNvbnN0IHZtID0gbmV3IFdlYnRhaWxBcHBWTSgpOwpjb25zdCB1cGRhdGVTaWRlYmFyID0gaW5pdFNpZGViYXIoZG9jdW1lbnQsIHZtLCBkYXRhKTsKY29uc3QgdXBkYXRlQ29uc29sZSA9IGluaXRDb25zb2xlKGRvY3VtZW50LCB2bSk7CmNvbnN0IHVwZGF0ZU1vZGFsID0gaW5pdE1vZGFsKGRvY3VtZW50LCB2bSk7CnZtLm9uQ2hhbmdlID0gKCk9PnsKICAgIHVwZGF0ZVNpZGViYXIoKTsKICAgIHVwZGF0ZUNvbnNvbGUoKTsKICAgIHVwZGF0ZU1vZGFsKCk7Cn07CkNsb3VkZmxhcmVBcGkuVVJMX1RSQU5TRk9STUVSID0gKHYpPT5gL2ZldGNoLyR7di5zdWJzdHJpbmcoJ2h0dHBzOi8vJy5sZW5ndGgpfWAKOwp2bS5zdGFydCgpOwpzZXRBcHBTdGF0ZSgnc3RhcnRlZCcpOwo=';