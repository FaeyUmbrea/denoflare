

export const TAILWEB_APP_HASH = 'a4d65b0958c56282d92ec910b0de85ae24afa5a7';
export const TAILWEB_APP_B64 = 'async function listScripts(accountId, apiToken) {
    const url = `${computeAccountBaseUrl(accountId)}/workers/scripts`;
    return (await execute('listScripts', 'GET', url, apiToken)).result;
}
async function listTails(accountId, scriptName, apiToken) {
    const url = `${computeAccountBaseUrl(accountId)}/workers/scripts/${scriptName}/tails`;
    return (await execute('listTails', 'GET', url, apiToken)).result;
}
async function createTail(accountId, scriptName, apiToken) {
    const url = `${computeAccountBaseUrl(accountId)}/workers/scripts/${scriptName}/tails`;
    return (await execute('createTail', 'POST', url, apiToken)).result;
}
class CloudflareApi {
    static DEBUG = false;
    static URL_TRANSFORMER = (v)=>v
    ;
}
const APPLICATION_JSON = 'application/json';
const APPLICATION_JSON_UTF8 = 'application/json; charset=UTF-8';
const APPLICATION_OCTET_STREAM = 'application/octet-stream';
function computeAccountBaseUrl(accountId) {
    return CloudflareApi.URL_TRANSFORMER(`https://api.cloudflare.com/client/v4/accounts/${accountId}`);
}
async function execute(op, method, url, apiToken, body, responseType = 'json') {
    const headers = new Headers({
        'Authorization': `Bearer ${apiToken}`
    });
    if (typeof body === 'string') {
        headers.set('Content-Type', APPLICATION_JSON_UTF8);
        if (CloudflareApi.DEBUG) console.log(body);
    }
    const fetchResponse = await fetch(url, {
        method,
        headers,
        body
    });
    const contentType = fetchResponse.headers.get('Content-Type') || '';
    if ((responseType === 'bytes' || responseType === 'bytes?') && contentType === APPLICATION_OCTET_STREAM) {
        const buffer = await fetchResponse.arrayBuffer();
        return new Uint8Array(buffer);
    }
    if (![
        APPLICATION_JSON_UTF8,
        APPLICATION_JSON
    ].includes(contentType)) {
        throw new Error(`Unexpected content-type: ${contentType},  fetchResponse=${fetchResponse}, body=${await fetchResponse.text()}`);
    }
    const apiResponse = await fetchResponse.json();
    if (CloudflareApi.DEBUG) console.log(apiResponse);
    if (!apiResponse.success) {
        if (fetchResponse.status === 404 && responseType === 'bytes?') return undefined;
        throw new CloudflareApiError(`${op} failed: status=${fetchResponse.status}, errors=${apiResponse.errors.map((v)=>`${v.code} ${v.message}`
        ).join(', ')}`, fetchResponse.status, apiResponse.errors);
    }
    return apiResponse;
}
class CloudflareApiError extends Error {
    status;
    errors;
    constructor(message1, status, errors){
        super(message1);
        this.status = status;
        this.errors = errors;
    }
}
const directives = new WeakMap();
const directive = (f)=>(...args)=>{
        const d = f(...args);
        directives.set(d, true);
        return d;
    }
;
const isDirective = (o)=>{
    return typeof o === "function" && directives.has(o);
};
const isCEPolyfill = typeof window !== "undefined" && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== void 0;
const reparentNodes = (container, start, end = null, before = null)=>{
    while(start !== end){
        const n = start.nextSibling;
        container.insertBefore(start, before);
        start = n;
    }
};
const removeNodes = (container, start, end = null)=>{
    while(start !== end){
        const n = start.nextSibling;
        container.removeChild(start);
        start = n;
    }
};
const noChange = {
};
const nothing = {
};
const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
const nodeMarker = `<!--${marker}-->`;
const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
const boundAttributeSuffix = "$lit$";
class Template {
    constructor(result, element5){
        this.parts = [];
        this.element = element5;
        const nodesToRemove = [];
        const stack = [];
        const walker = document.createTreeWalker(element5.content, 133, null, false);
        let lastPartIndex = 0;
        let index = -1;
        let partIndex = 0;
        const { strings: strings5 , values: { length  }  } = result;
        while(partIndex < length){
            const node = walker.nextNode();
            if (node === null) {
                walker.currentNode = stack.pop();
                continue;
            }
            index++;
            if (node.nodeType === 1) {
                if (node.hasAttributes()) {
                    const attributes = node.attributes;
                    const { length: length2  } = attributes;
                    let count = 0;
                    for(let i = 0; i < length2; i++){
                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                            count++;
                        }
                    }
                    while(count-- > 0){
                        const stringForPart = strings5[partIndex];
                        const name = lastAttributeNameRegex.exec(stringForPart)[2];
                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                        const attributeValue = node.getAttribute(attributeLookupName);
                        node.removeAttribute(attributeLookupName);
                        const statics = attributeValue.split(markerRegex);
                        this.parts.push({
                            type: "attribute",
                            index,
                            name,
                            strings: statics
                        });
                        partIndex += statics.length - 1;
                    }
                }
                if (node.tagName === "TEMPLATE") {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
            } else if (node.nodeType === 3) {
                const data = node.data;
                if (data.indexOf(marker) >= 0) {
                    const parent = node.parentNode;
                    const strings2 = data.split(markerRegex);
                    const lastIndex = strings2.length - 1;
                    for(let i = 0; i < lastIndex; i++){
                        let insert;
                        let s = strings2[i];
                        if (s === "") {
                            insert = createMarker();
                        } else {
                            const match = lastAttributeNameRegex.exec(s);
                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                            }
                            insert = document.createTextNode(s);
                        }
                        parent.insertBefore(insert, node);
                        this.parts.push({
                            type: "node",
                            index: ++index
                        });
                    }
                    if (strings2[lastIndex] === "") {
                        parent.insertBefore(createMarker(), node);
                        nodesToRemove.push(node);
                    } else {
                        node.data = strings2[lastIndex];
                    }
                    partIndex += lastIndex;
                }
            } else if (node.nodeType === 8) {
                if (node.data === marker) {
                    const parent = node.parentNode;
                    if (node.previousSibling === null || index === lastPartIndex) {
                        index++;
                        parent.insertBefore(createMarker(), node);
                    }
                    lastPartIndex = index;
                    this.parts.push({
                        type: "node",
                        index
                    });
                    if (node.nextSibling === null) {
                        node.data = "";
                    } else {
                        nodesToRemove.push(node);
                        index--;
                    }
                    partIndex++;
                } else {
                    let i = -1;
                    while((i = node.data.indexOf(marker, i + 1)) !== -1){
                        this.parts.push({
                            type: "node",
                            index: -1
                        });
                        partIndex++;
                    }
                }
            }
        }
        for (const n of nodesToRemove){
            n.parentNode.removeChild(n);
        }
    }
}
const endsWith = (str, suffix)=>{
    const index1 = str.length - suffix.length;
    return index1 >= 0 && str.slice(index1) === suffix;
};
const isTemplatePartActive = (part)=>part.index !== -1
;
const createMarker = ()=>document.createComment("")
;
const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
class TemplateInstance {
    constructor(template, processor, options2){
        this.__parts = [];
        this.template = template;
        this.processor = processor;
        this.options = options2;
    }
    update(values) {
        let i = 0;
        for (const part of this.__parts){
            if (part !== void 0) {
                part.setValue(values[i]);
            }
            i++;
        }
        for (const part1 of this.__parts){
            if (part1 !== void 0) {
                part1.commit();
            }
        }
    }
    _clone() {
        const fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
        const stack1 = [];
        const parts2 = this.template.parts;
        const walker1 = document.createTreeWalker(fragment, 133, null, false);
        let partIndex1 = 0;
        let nodeIndex = 0;
        let part;
        let node = walker1.nextNode();
        while(partIndex1 < parts2.length){
            part = parts2[partIndex1];
            if (!isTemplatePartActive(part)) {
                this.__parts.push(void 0);
                partIndex1++;
                continue;
            }
            while(nodeIndex < part.index){
                nodeIndex++;
                if (node.nodeName === "TEMPLATE") {
                    stack1.push(node);
                    walker1.currentNode = node.content;
                }
                if ((node = walker1.nextNode()) === null) {
                    walker1.currentNode = stack1.pop();
                    node = walker1.nextNode();
                }
            }
            if (part.type === "node") {
                const part2 = this.processor.handleTextExpression(this.options);
                part2.insertAfterNode(node.previousSibling);
                this.__parts.push(part2);
            } else {
                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
            }
            partIndex1++;
        }
        if (isCEPolyfill) {
            document.adoptNode(fragment);
            customElements.upgrade(fragment);
        }
        return fragment;
    }
}
const policy = window.trustedTypes && trustedTypes.createPolicy("lit-html", {
    createHTML: (s)=>s
});
const commentMarker = ` ${marker} `;
class TemplateResult {
    constructor(strings1, values, type1, processor1){
        this.strings = strings1;
        this.values = values;
        this.type = type1;
        this.processor = processor1;
    }
    getHTML() {
        const l = this.strings.length - 1;
        let html2 = "";
        let isCommentBinding = false;
        for(let i = 0; i < l; i++){
            const s = this.strings[i];
            const commentOpen = s.lastIndexOf("<!--");
            isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf("-->", commentOpen + 1) === -1;
            const attributeMatch = lastAttributeNameRegex.exec(s);
            if (attributeMatch === null) {
                html2 += s + (isCommentBinding ? commentMarker : nodeMarker);
            } else {
                html2 += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;
            }
        }
        html2 += this.strings[l];
        return html2;
    }
    getTemplateElement() {
        const template1 = document.createElement("template");
        let value = this.getHTML();
        if (policy !== void 0) {
            value = policy.createHTML(value);
        }
        template1.innerHTML = value;
        return template1;
    }
}
class SVGTemplateResult extends TemplateResult {
    getHTML() {
        return `<svg>${super.getHTML()}</svg>`;
    }
    getTemplateElement() {
        const template1 = super.getTemplateElement();
        const content = template1.content;
        const svgElement = content.firstChild;
        content.removeChild(svgElement);
        reparentNodes(content, svgElement.firstChild);
        return template1;
    }
}
const isPrimitive = (value)=>{
    return value === null || !(typeof value === "object" || typeof value === "function");
};
const isIterable = (value)=>{
    return Array.isArray(value) || !!(value && value[Symbol.iterator]);
};
class AttributeCommitter {
    constructor(element1, name3, strings2){
        this.dirty = true;
        this.element = element1;
        this.name = name3;
        this.strings = strings2;
        this.parts = [];
        for(let i = 0; i < strings2.length - 1; i++){
            this.parts[i] = this._createPart();
        }
    }
    _createPart() {
        return new AttributePart(this);
    }
    _getValue() {
        const strings3 = this.strings;
        const l = strings3.length - 1;
        const parts2 = this.parts;
        if (l === 1 && strings3[0] === "" && strings3[1] === "") {
            const v = parts2[0].value;
            if (typeof v === "symbol") {
                return String(v);
            }
            if (typeof v === "string" || !isIterable(v)) {
                return v;
            }
        }
        let text = "";
        for(let i1 = 0; i1 < l; i1++){
            text += strings3[i1];
            const part = parts2[i1];
            if (part !== void 0) {
                const v = part.value;
                if (isPrimitive(v) || !isIterable(v)) {
                    text += typeof v === "string" ? v : String(v);
                } else {
                    for (const t of v){
                        text += typeof t === "string" ? t : String(t);
                    }
                }
            }
        }
        text += strings3[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
class AttributePart {
    constructor(committer){
        this.value = void 0;
        this.committer = committer;
    }
    setValue(value) {
        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
            this.value = value;
            if (!isDirective(value)) {
                this.committer.dirty = true;
            }
        }
    }
    commit() {
        while(isDirective(this.value)){
            const directive2 = this.value;
            this.value = noChange;
            directive2(this);
        }
        if (this.value === noChange) {
            return;
        }
        this.committer.commit();
    }
}
class NodePart {
    constructor(options1){
        this.value = void 0;
        this.__pendingValue = void 0;
        this.options = options1;
    }
    appendInto(container) {
        this.startNode = container.appendChild(createMarker());
        this.endNode = container.appendChild(createMarker());
    }
    insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    appendIntoPart(part) {
        part.__insert(this.startNode = createMarker());
        part.__insert(this.endNode = createMarker());
    }
    insertAfterPart(ref) {
        ref.__insert(this.startNode = createMarker());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        if (this.startNode.parentNode === null) {
            return;
        }
        while(isDirective(this.__pendingValue)){
            const directive2 = this.__pendingValue;
            this.__pendingValue = noChange;
            directive2(this);
        }
        const value = this.__pendingValue;
        if (value === noChange) {
            return;
        }
        if (isPrimitive(value)) {
            if (value !== this.value) {
                this.__commitText(value);
            }
        } else if (value instanceof TemplateResult) {
            this.__commitTemplateResult(value);
        } else if (value instanceof Node) {
            this.__commitNode(value);
        } else if (isIterable(value)) {
            this.__commitIterable(value);
        } else if (value === nothing) {
            this.value = nothing;
            this.clear();
        } else {
            this.__commitText(value);
        }
    }
    __insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
        if (this.value === value) {
            return;
        }
        this.clear();
        this.__insert(value);
        this.value = value;
    }
    __commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? "" : value;
        const valueAsString = typeof value === "string" ? value : String(value);
        if (node === this.endNode.previousSibling && node.nodeType === 3) {
            node.data = valueAsString;
        } else {
            this.__commitNode(document.createTextNode(valueAsString));
        }
        this.value = value;
    }
    __commitTemplateResult(value) {
        const template1 = this.options.templateFactory(value);
        if (this.value instanceof TemplateInstance && this.value.template === template1) {
            this.value.update(value.values);
        } else {
            const instance = new TemplateInstance(template1, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this.__commitNode(fragment);
            this.value = instance;
        }
    }
    __commitIterable(value) {
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        const itemParts = this.value;
        let partIndex1 = 0;
        let itemPart;
        for (const item of value){
            itemPart = itemParts[partIndex1];
            if (itemPart === void 0) {
                itemPart = new NodePart(this.options);
                itemParts.push(itemPart);
                if (partIndex1 === 0) {
                    itemPart.appendIntoPart(this);
                } else {
                    itemPart.insertAfterPart(itemParts[partIndex1 - 1]);
                }
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex1++;
        }
        if (partIndex1 < itemParts.length) {
            itemParts.length = partIndex1;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    clear(startNode = this.startNode) {
        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
class BooleanAttributePart {
    constructor(element2, name1, strings3){
        this.value = void 0;
        this.__pendingValue = void 0;
        if (strings3.length !== 2 || strings3[0] !== "" || strings3[1] !== "") {
            throw new Error("Boolean attributes can only contain a single expression");
        }
        this.element = element2;
        this.name = name1;
        this.strings = strings3;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while(isDirective(this.__pendingValue)){
            const directive2 = this.__pendingValue;
            this.__pendingValue = noChange;
            directive2(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const value = !!this.__pendingValue;
        if (this.value !== value) {
            if (value) {
                this.element.setAttribute(this.name, "");
            } else {
                this.element.removeAttribute(this.name);
            }
            this.value = value;
        }
        this.__pendingValue = noChange;
    }
}
class PropertyCommitter extends AttributeCommitter {
    constructor(element3, name2, strings4){
        super(element3, name2, strings4);
        this.single = strings4.length === 2 && strings4[0] === "" && strings4[1] === "";
    }
    _createPart() {
        return new PropertyPart(this);
    }
    _getValue() {
        if (this.single) {
            return this.parts[0].value;
        }
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element[this.name] = this._getValue();
        }
    }
}
class PropertyPart extends AttributePart {
}
let eventOptionsSupported = false;
(()=>{
    try {
        const options2 = {
            get capture () {
                eventOptionsSupported = true;
                return false;
            }
        };
        window.addEventListener("test", options2, options2);
        window.removeEventListener("test", options2, options2);
    } catch (_e) {
    }
})();
class EventPart {
    constructor(element4, eventName, eventContext){
        this.value = void 0;
        this.__pendingValue = void 0;
        this.element = element4;
        this.eventName = eventName;
        this.eventContext = eventContext;
        this.__boundHandleEvent = (e)=>this.handleEvent(e)
        ;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while(isDirective(this.__pendingValue)){
            const directive2 = this.__pendingValue;
            this.__pendingValue = noChange;
            directive2(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const newListener = this.__pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        if (shouldAddListener) {
            this.__options = getOptions(newListener);
            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        this.value = newListener;
        this.__pendingValue = noChange;
    }
    handleEvent(event) {
        if (typeof this.value === "function") {
            this.value.call(this.eventContext || this.element, event);
        } else {
            this.value.handleEvent(event);
        }
    }
}
const getOptions = (o)=>o && (eventOptionsSupported ? {
        capture: o.capture,
        passive: o.passive,
        once: o.once
    } : o.capture)
;
class DefaultTemplateProcessor {
    handleAttributeExpressions(element, name, strings, options) {
        const prefix = name[0];
        if (prefix === ".") {
            const committer2 = new PropertyCommitter(element, name.slice(1), strings);
            return committer2.parts;
        }
        if (prefix === "@") {
            return [
                new EventPart(element, name.slice(1), options.eventContext)
            ];
        }
        if (prefix === "?") {
            return [
                new BooleanAttributePart(element, name.slice(1), strings)
            ];
        }
        const committer1 = new AttributeCommitter(element, name, strings);
        return committer1.parts;
    }
    handleTextExpression(options) {
        return new NodePart(options);
    }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();
function templateFactory(result1) {
    let templateCache = templateCaches.get(result1.type);
    if (templateCache === void 0) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        templateCaches.set(result1.type, templateCache);
    }
    let template1 = templateCache.stringsArray.get(result1.strings);
    if (template1 !== void 0) {
        return template1;
    }
    const key = result1.strings.join(marker);
    template1 = templateCache.keyString.get(key);
    if (template1 === void 0) {
        template1 = new Template(result1, result1.getTemplateElement());
        templateCache.keyString.set(key, template1);
    }
    templateCache.stringsArray.set(result1.strings, template1);
    return template1;
}
const templateCaches = new Map();
const parts = new WeakMap();
const render = (result1, container, options3)=>{
    let part = parts.get(container);
    if (part === void 0) {
        removeNodes(container, container.firstChild);
        parts.set(container, part = new NodePart(Object.assign({
            templateFactory
        }, options3)));
        part.appendInto(container);
    }
    part.setValue(result1);
    part.commit();
};
if (typeof window !== "undefined") {
    (window["litHtmlVersions"] || (window["litHtmlVersions"] = [])).push("1.4.1");
}
const html = (strings6, ...values1)=>new TemplateResult(strings6, values1, "html", defaultTemplateProcessor)
;
const svg = (strings6, ...values1)=>new SVGTemplateResult(strings6, values1, "svg", defaultTemplateProcessor)
;
var _a;
window.JSCompiler_renameProperty = (prop, _obj)=>prop
;
const defaultConverter = {
    toAttribute (value, type) {
        switch(type){
            case Boolean:
                return value ? "" : null;
            case Object:
            case Array:
                return value == null ? value : JSON.stringify(value);
        }
        return value;
    },
    fromAttribute (value, type) {
        switch(type){
            case Boolean:
                return value !== null;
            case Number:
                return value === null ? null : Number(value);
            case Object:
            case Array:
                return JSON.parse(value);
        }
        return value;
    }
};
const notEqual = (value, old)=>{
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual
};
const STATE_HAS_UPDATED = 1;
const STATE_UPDATE_REQUESTED = 1 << 2;
const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
const finalized = "finalized";
class UpdatingElement extends HTMLElement {
    constructor(){
        super();
        this.initialize();
    }
    static get observedAttributes() {
        this.finalize();
        const attributes = [];
        this._classProperties.forEach((v, p)=>{
            const attr = this._attributeNameForProperty(p, v);
            if (attr !== void 0) {
                this._attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        });
        return attributes;
    }
    static _ensureClassProperties() {
        if (!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties", this))) {
            this._classProperties = new Map();
            const superProperties = Object.getPrototypeOf(this)._classProperties;
            if (superProperties !== void 0) {
                superProperties.forEach((v, k)=>this._classProperties.set(k, v)
                );
            }
        }
    }
    static createProperty(name, options = defaultPropertyDeclaration) {
        this._ensureClassProperties();
        this._classProperties.set(name, options);
        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
            return;
        }
        const key = typeof name === "symbol" ? Symbol() : `__${name}`;
        const descriptor = this.getPropertyDescriptor(name, key, options);
        if (descriptor !== void 0) {
            Object.defineProperty(this.prototype, name, descriptor);
        }
    }
    static getPropertyDescriptor(name, key, options) {
        return {
            get () {
                return this[key];
            },
            set (value) {
                const oldValue = this[name];
                this[key] = value;
                this.requestUpdateInternal(name, oldValue, options);
            },
            configurable: true,
            enumerable: true
        };
    }
    static getPropertyOptions(name) {
        return this._classProperties && this._classProperties.get(name) || defaultPropertyDeclaration;
    }
    static finalize() {
        const superCtor = Object.getPrototypeOf(this);
        if (!superCtor.hasOwnProperty(finalized)) {
            superCtor.finalize();
        }
        this[finalized] = true;
        this._ensureClassProperties();
        this._attributeToPropertyMap = new Map();
        if (this.hasOwnProperty(JSCompiler_renameProperty("properties", this))) {
            const props = this.properties;
            const propKeys = [
                ...Object.getOwnPropertyNames(props),
                ...typeof Object.getOwnPropertySymbols === "function" ? Object.getOwnPropertySymbols(props) : []
            ];
            for (const p of propKeys){
                this.createProperty(p, props[p]);
            }
        }
    }
    static _attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false ? void 0 : typeof attribute === "string" ? attribute : typeof name === "string" ? name.toLowerCase() : void 0;
    }
    static _valueHasChanged(value, old, hasChanged = notEqual) {
        return hasChanged(value, old);
    }
    static _propertyValueFromAttribute(value, options) {
        const type2 = options.type;
        const converter = options.converter || defaultConverter;
        const fromAttribute = typeof converter === "function" ? converter : converter.fromAttribute;
        return fromAttribute ? fromAttribute(value, type2) : value;
    }
    static _propertyValueToAttribute(value, options) {
        if (options.reflect === void 0) {
            return;
        }
        const type2 = options.type;
        const converter = options.converter;
        const toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;
        return toAttribute(value, type2);
    }
    initialize() {
        this._updateState = 0;
        this._updatePromise = new Promise((res)=>this._enableUpdatingResolver = res
        );
        this._changedProperties = new Map();
        this._saveInstanceProperties();
        this.requestUpdateInternal();
    }
    _saveInstanceProperties() {
        this.constructor._classProperties.forEach((_v, p)=>{
            if (this.hasOwnProperty(p)) {
                const value = this[p];
                delete this[p];
                if (!this._instanceProperties) {
                    this._instanceProperties = new Map();
                }
                this._instanceProperties.set(p, value);
            }
        });
    }
    _applyInstanceProperties() {
        this._instanceProperties.forEach((v, p)=>this[p] = v
        );
        this._instanceProperties = void 0;
    }
    connectedCallback() {
        this.enableUpdating();
    }
    enableUpdating() {
        if (this._enableUpdatingResolver !== void 0) {
            this._enableUpdatingResolver();
            this._enableUpdatingResolver = void 0;
        }
    }
    disconnectedCallback() {
    }
    attributeChangedCallback(name, old, value) {
        if (old !== value) {
            this._attributeToProperty(name, value);
        }
    }
    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        const ctor = this.constructor;
        const attr = ctor._attributeNameForProperty(name, options);
        if (attr !== void 0) {
            const attrValue = ctor._propertyValueToAttribute(value, options);
            if (attrValue === void 0) {
                return;
            }
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
            if (attrValue == null) {
                this.removeAttribute(attr);
            } else {
                this.setAttribute(attr, attrValue);
            }
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
        }
    }
    _attributeToProperty(name, value) {
        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
            return;
        }
        const ctor = this.constructor;
        const propName = ctor._attributeToPropertyMap.get(name);
        if (propName !== void 0) {
            const options3 = ctor.getPropertyOptions(propName);
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
            this[propName] = ctor._propertyValueFromAttribute(value, options3);
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
        }
    }
    requestUpdateInternal(name, oldValue, options) {
        let shouldRequestUpdate = true;
        if (name !== void 0) {
            const ctor = this.constructor;
            options = options || ctor.getPropertyOptions(name);
            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                if (!this._changedProperties.has(name)) {
                    this._changedProperties.set(name, oldValue);
                }
                if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                    if (this._reflectingProperties === void 0) {
                        this._reflectingProperties = new Map();
                    }
                    this._reflectingProperties.set(name, options);
                }
            } else {
                shouldRequestUpdate = false;
            }
        }
        if (!this._hasRequestedUpdate && shouldRequestUpdate) {
            this._updatePromise = this._enqueueUpdate();
        }
    }
    requestUpdate(name, oldValue) {
        this.requestUpdateInternal(name, oldValue);
        return this.updateComplete;
    }
    async _enqueueUpdate() {
        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
        try {
            await this._updatePromise;
        } catch (e) {
        }
        const result1 = this.performUpdate();
        if (result1 != null) {
            await result1;
        }
        return !this._hasRequestedUpdate;
    }
    get _hasRequestedUpdate() {
        return this._updateState & STATE_UPDATE_REQUESTED;
    }
    get hasUpdated() {
        return this._updateState & 1;
    }
    performUpdate() {
        if (!this._hasRequestedUpdate) {
            return;
        }
        if (this._instanceProperties) {
            this._applyInstanceProperties();
        }
        let shouldUpdate = false;
        const changedProperties = this._changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.update(changedProperties);
            } else {
                this._markUpdated();
            }
        } catch (e) {
            shouldUpdate = false;
            this._markUpdated();
            throw e;
        }
        if (shouldUpdate) {
            if (!(this._updateState & 1)) {
                this._updateState = this._updateState | STATE_HAS_UPDATED;
                this.firstUpdated(changedProperties);
            }
            this.updated(changedProperties);
        }
    }
    _markUpdated() {
        this._changedProperties = new Map();
        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
    }
    get updateComplete() {
        return this._getUpdateComplete();
    }
    _getUpdateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._updatePromise;
    }
    shouldUpdate(_changedProperties) {
        return true;
    }
    update(_changedProperties) {
        if (this._reflectingProperties !== void 0 && this._reflectingProperties.size > 0) {
            this._reflectingProperties.forEach((v, k)=>this._propertyToAttribute(k, this[k], v)
            );
            this._reflectingProperties = void 0;
        }
        this._markUpdated();
    }
    updated(_changedProperties) {
    }
    firstUpdated(_changedProperties) {
    }
}
_a = finalized;
UpdatingElement[_a] = true;
const legacyCustomElement = (tagName, clazz)=>{
    window.customElements.define(tagName, clazz);
    return clazz;
};
const standardCustomElement = (tagName, descriptor)=>{
    const { kind , elements  } = descriptor;
    return {
        kind,
        elements,
        finisher (clazz) {
            window.customElements.define(tagName, clazz);
        }
    };
};
const standardProperty = (options3, element6)=>{
    if (element6.kind === "method" && element6.descriptor && !("value" in element6.descriptor)) {
        return Object.assign(Object.assign({
        }, element6), {
            finisher (clazz) {
                clazz.createProperty(element6.key, options3);
            }
        });
    } else {
        return {
            kind: "field",
            key: Symbol(),
            placement: "own",
            descriptor: {
            },
            initializer () {
                if (typeof element6.initializer === "function") {
                    this[element6.key] = element6.initializer.call(this);
                }
            },
            finisher (clazz) {
                clazz.createProperty(element6.key, options3);
            }
        };
    }
};
const legacyProperty = (options3, proto, name4)=>{
    proto.constructor.createProperty(name4, options3);
};
const legacyQuery = (descriptor, proto, name4)=>{
    Object.defineProperty(proto, name4, descriptor);
};
const standardEventOptions = (options3, element6)=>{
    return Object.assign(Object.assign({
    }, element6), {
        finisher (clazz) {
            Object.assign(clazz.prototype[element6.key], options3);
        }
    });
};
const legacyEventOptions = (options3, proto, name4)=>{
    Object.assign(proto[name4], options3);
};
const supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === void 0 || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
const constructionToken = Symbol();
class CSSResult {
    constructor(cssText, safeToken){
        if (safeToken !== constructionToken) {
            throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        }
        this.cssText = cssText;
    }
    get styleSheet() {
        if (this._styleSheet === void 0) {
            if (supportsAdoptingStyleSheets) {
                this._styleSheet = new CSSStyleSheet();
                this._styleSheet.replaceSync(this.cssText);
            } else {
                this._styleSheet = null;
            }
        }
        return this._styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
const unsafeCSS = (value)=>{
    return new CSSResult(String(value), constructionToken);
};
const textFromCSSResult = (value)=>{
    if (value instanceof CSSResult) {
        return value.cssText;
    } else if (typeof value === "number") {
        return value;
    } else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
    }
};
const css = (strings6, ...values1)=>{
    const cssText1 = values1.reduce((acc, v, idx)=>acc + textFromCSSResult(v) + strings6[idx + 1]
    , strings6[0]);
    return new CSSResult(cssText1, constructionToken);
};
(window["litElementVersions"] || (window["litElementVersions"] = [])).push("2.5.1");
const renderNotImplemented = {
};
class LitElement extends UpdatingElement {
    static getStyles() {
        return this.styles;
    }
    static _getUniqueStyles() {
        if (this.hasOwnProperty(JSCompiler_renameProperty("_styles", this))) {
            return;
        }
        const userStyles = this.getStyles();
        if (Array.isArray(userStyles)) {
            const addStyles = (styles2, set2)=>styles2.reduceRight((set3, s)=>Array.isArray(s) ? addStyles(s, set3) : (set3.add(s), set3)
                , set2)
            ;
            const set = addStyles(userStyles, new Set());
            const styles = [];
            set.forEach((v)=>styles.unshift(v)
            );
            this._styles = styles;
        } else {
            this._styles = userStyles === void 0 ? [] : [
                userStyles
            ];
        }
        this._styles = this._styles.map((s)=>{
            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
                const cssText1 = Array.prototype.slice.call(s.cssRules).reduce((css2, rule)=>css2 + rule.cssText
                , "");
                return unsafeCSS(cssText1);
            }
            return s;
        });
    }
    initialize() {
        super.initialize();
        this.constructor._getUniqueStyles();
        this.renderRoot = this.createRenderRoot();
        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
            this.adoptStyles();
        }
    }
    createRenderRoot() {
        return this.attachShadow(this.constructor.shadowRootOptions);
    }
    adoptStyles() {
        const styles = this.constructor._styles;
        if (styles.length === 0) {
            return;
        }
        if (window.ShadyCSS !== void 0 && !window.ShadyCSS.nativeShadow) {
            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s)=>s.cssText
            ), this.localName);
        } else if (supportsAdoptingStyleSheets) {
            this.renderRoot.adoptedStyleSheets = styles.map((s)=>s instanceof CSSStyleSheet ? s : s.styleSheet
            );
        } else {
            this._needsShimAdoptedStyleSheets = true;
        }
    }
    connectedCallback() {
        super.connectedCallback();
        if (this.hasUpdated && window.ShadyCSS !== void 0) {
            window.ShadyCSS.styleElement(this);
        }
    }
    update(changedProperties) {
        const templateResult = this.render();
        super.update(changedProperties);
        if (templateResult !== renderNotImplemented) {
            this.constructor.render(templateResult, this.renderRoot, {
                scopeName: this.localName,
                eventContext: this
            });
        }
        if (this._needsShimAdoptedStyleSheets) {
            this._needsShimAdoptedStyleSheets = false;
            this.constructor._styles.forEach((s)=>{
                const style = document.createElement("style");
                style.textContent = s.cssText;
                this.renderRoot.appendChild(style);
            });
        }
    }
    render() {
        return renderNotImplemented;
    }
}
LitElement["finalized"] = true;
LitElement.render = render;
LitElement.shadowRootOptions = {
    mode: "open"
};
class Material {
    static highEmphasisTextColor = 'rgba(255, 255, 255, 0.87)';
    static mediumEmphasisTextColor = 'rgba(255, 255, 255, 0.60)';
}
const MATERIAL_CSS = css`

:root {
  --surface-01-background-color: rgb(30.75, 30.75, 30.75);
  --surface-04-background-color: rgb(40.95, 40.95, 40.95);
  --high-emphasis-text-color: rgba(255, 255, 255, 0.87);
  --medium-emphasis-text-color: rgba(255, 255, 255, 0.60);
  --disabled-text-color: rgba(255, 255, 255, 0.38);
  --button-border-radius: 0.25rem;
}

/** text size classes */

.h6 {
    font-size: 1.25rem;
    letter-spacing: 0.00750rem;
    font-weight: bolder;
}

.body2, fieldset label, fieldset output, fieldset details {
    font-size: 0.875rem;
    letter-spacing: 0.01786rem;
    font-weight: normal;
}

.button, button, .action-icon {
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.08929rem;
    font-weight: bolder;
}

.overline {
    font-size: 0.625rem;
    text-transform: uppercase;
    letter-spacing: 0.15000rem;
    font-weight: normal;
}

/* light text on dark background colors */

.high-emphasis-text {
    color: var(--high-emphasis-text-color);
}

.medium-emphasis-text, fieldset label {
    color: var(--medium-emphasis-text-color);
}

.disabled-emphasis-text {
    color: var(--disabled-text-color);
}

/** elevation backgrounds */

.surface-01 {
    background-color: var(--surface-01-background-color);
}

.surface-04 {
    background-color: var(--surface-04-background-color);
}

/** action-icon */

.action-icon {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 2rem;
    min-width: 2rem;
    border-radius: var(--button-border-radius);
    color: var(--high-emphasis-text-color);
    opacity: 0.69;  /** medium-emphasis / high-emphasis */
    user-select: none;
}

.action-icon:hover {
    background-color: var(--surface-04-background-color);
    opacity: 1;
}

/** button */

button {
    border: none;
    background-color: var(--surface-01-background-color);
    color: var(--medium-emphasis-text-color);
    padding: 0.5rem 1rem;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    user-select: none;
    min-width: 8rem;
    border-radius: var(--button-border-radius);
}

button.selected {
    background-color: var(--surface-04-background-color);
    color: var(--high-emphasis-text-color);
}

button:hover {
    background-color: var(--surface-04-background-color);
    color: var(--high-emphasis-text-color);
}

button:disabled {
    color: var(--disabled-text-color);
}

button:disabled:hover {
    background-color: var(--surface-01-background-color);
    cursor: default;
}

/** forms */
fieldset {
    border: solid 1px rgba(255, 255, 255, 0.60);
    border-radius: var(--button-border-radius);
    display: grid;
    grid-row-gap: 1rem;
    grid-column-gap: 1rem;
    padding: 1rem;
}

label {
    grid-column: 1;
    /* background-color: red; */
    padding: 0.5rem 0;
}

.form-lhs {
    grid-column: 1;
}

input, .form-rhs {
    grid-column: 2;
}

.form-row {
    grid-column: 1 / span 2;
}

fieldset input[type=text] {
    padding: 0.5rem;
    background-color: var(--surface-01-background-color);
    color: var(--high-emphasis-text-color);
    border: solid 1px var(--medium-emphasis-text-color);
    border-radius: var(--button-border-radius);
}

fieldset output {
    padding: 0.5rem 0;
    color: var(--medium-emphasis-text-color);
}

fieldset details {
    color: var(--medium-emphasis-text-color);
}

`;
const HEADER_HTML = html`
<header class="h6 high-emphasis-text">
    <div style="flex-grow: 1;">Denoflare Tail</div>
</header>
`;
const HEADER_CSS = css`
header {
    display: flex;
    padding: 1rem 0;
}
`;
function initHeader(_document, _vm) {
    return ()=>{
    };
}
const SIDEBAR_HTML = html`
<div id="sidebar">
    ${HEADER_HTML}
    <div id="profiles"></div>
    <div id="scripts"></div>
</div>
`;
const SIDEBAR_CSS = css`

#sidebar {
    margin-left: 1rem;
    height: 100vh;
    overflow-y: hidden;
}

#sidebar .button-grid {
    display: grid;
    grid-template-columns: 1fr 2rem;
    grid-gap: 1px;
    margin-left: 1px;
    margin-top: 1rem;
}

#sidebar .button-grid-new {
    grid-column: 1;
    min-width: 8rem;
}

#sidebar button {
    grid-column: 1;
}

`;
function initSidebar(document, vm) {
    const updateHeader = initHeader(document, vm);
    const profilesDiv = document.getElementById('profiles');
    const scriptsDiv = document.getElementById('scripts');
    return ()=>{
        updateHeader();
        LitElement.render(PROFILES_HTML(vm), profilesDiv);
        LitElement.render(SCRIPTS_HTML(vm), scriptsDiv);
    };
}
const PROFILES_HTML = (vm)=>html`
    <div class="overline medium-emphasis-text">Profiles</div>
    <div class="button-grid">
    ${vm.profiles.map((profile)=>html`<button class="${profile.id === vm.selectedProfileId ? 'selected' : ''}" @click=${()=>{
            vm.selectedProfileId = profile.id;
        }}>${profile.text}</button>
    ${profile.id === vm.selectedProfileId ? html`${actionIcon(editIcon, {
            onclick: ()=>vm.editProfile(profile.id)
        })}` : ''}`
    )}
    <div class="button-grid-new">${actionIcon(addIcon, {
        text: 'New',
        onclick: ()=>vm.newProfile()
    })}</div>
    </div>
`
;
const SCRIPTS_HTML = (vm)=>html`
    <div class="overline medium-emphasis-text">Scripts</div>
    <div class="button-grid">
    ${vm.scripts.map((script)=>html`<button class="${script.id === vm.selectedScriptId ? 'selected' : ''}" @click=${()=>{
            vm.selectedScriptId = script.id;
        }}>${script.text}</button>
    `
    )}
    </div>
`
;
function actionIcon(icon, opts = {
}) {
    const { text , onclick  } = opts;
    return html`<div class="action-icon" @click=${(e)=>{
        e.preventDefault();
        onclick && onclick();
    }}>${icon}${text || ''}</div>`;
}
const editIcon = svg`<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" fill="${Material.highEmphasisTextColor}"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M14.06 9.02l.92.92L5.92 19H5v-.92l9.06-9.06M17.66 3c-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29zm-3.6 3.19L3 17.25V21h3.75L17.81 9.94l-3.75-3.75z"/></svg>`;
const addIcon = svg`<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" fill="${Material.highEmphasisTextColor}">><path d="M0 0h24v24H0V0z" fill="none"/><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>`;
const REQUIRED_TAIL_MESSAGE_KEYS = new Set([
    'outcome',
    'scriptName',
    'exceptions',
    'logs',
    'eventTimestamp',
    'event'
]);
const KNOWN_OUTCOMES = new Set([
    'ok',
    'exception',
    'exceededCpu',
    'canceled',
    'unknown'
]);
function parseTailMessage(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad tailMessage: Expected object, found ${JSON.stringify(obj)}`);
    checkKeys(obj, REQUIRED_TAIL_MESSAGE_KEYS);
    const objAsAny = obj;
    const { outcome , scriptName , eventTimestamp  } = objAsAny;
    if (!KNOWN_OUTCOMES.has(outcome)) throw new Error(`Bad outcome: expected one of [${[
        ...KNOWN_OUTCOMES
    ].join(', ')}], found ${JSON.stringify(outcome)}`);
    if (scriptName !== null) throw new Error(`Bad scriptName: expected null, found ${JSON.stringify(scriptName)}`);
    const logs = parseLogs(objAsAny.logs);
    const exceptions = parseExceptions(objAsAny.exceptions);
    if (!(typeof eventTimestamp === 'number' && eventTimestamp > 0)) throw new Error(`Bad eventTimestamp: expected positive number, found ${JSON.stringify(eventTimestamp)}`);
    const event = objAsAny.event && objAsAny.event.request ? parseTailMessageRequestEvent(objAsAny.event) : parseTailMessageCronEvent(objAsAny.event);
    return {
        outcome,
        scriptName,
        exceptions,
        logs,
        eventTimestamp,
        event
    };
}
function parseLogs(obj) {
    if (!Array.isArray(obj)) throw new Error(`Bad logs: expected array, found ${JSON.stringify(obj)}`);
    return [
        ...obj
    ].map(parseTailMessageLog);
}
function parseExceptions(obj) {
    if (!Array.isArray(obj)) throw new Error(`Bad exceptions: expected array, found ${JSON.stringify(obj)}`);
    return [
        ...obj
    ].map(parseTailMessageException);
}
const REQUIRED_TAIL_MESSAGE_LOG_KEYS = new Set([
    'message',
    'level',
    'timestamp'
]);
function parseTailMessageLog(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad tailMessageLog: Expected object, found ${JSON.stringify(obj)}`);
    checkKeys(obj, REQUIRED_TAIL_MESSAGE_LOG_KEYS);
    const objAsAny = obj;
    const message1 = parseStringArray(objAsAny.message, 'message');
    const { level , timestamp  } = objAsAny;
    if (!(typeof level === 'string')) throw new Error(`Bad level: expected string, found ${JSON.stringify(level)}`);
    if (!(typeof timestamp === 'number' && timestamp > 0)) throw new Error(`Bad timestamp: expected positive number, found ${JSON.stringify(timestamp)}`);
    return {
        message: message1,
        level,
        timestamp
    };
}
const REQUIRED_TAIL_MESSAGE_EXCEPTION_KEYS = new Set([
    'name',
    'message',
    'timestamp'
]);
function parseTailMessageException(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad tailMessageException: Expected object, found ${JSON.stringify(obj)}`);
    checkKeys(obj, REQUIRED_TAIL_MESSAGE_EXCEPTION_KEYS);
    const objAsAny = obj;
    const { name: name4 , message: message1 , timestamp  } = objAsAny;
    if (!(typeof name4 === 'string')) throw new Error(`Bad name: expected string, found ${JSON.stringify(name4)}`);
    if (!(typeof message1 === 'string')) throw new Error(`Bad message: expected string, found ${JSON.stringify(message1)}`);
    if (!(typeof timestamp === 'number' && timestamp > 0)) throw new Error(`Bad timestamp: expected positive number, found ${JSON.stringify(timestamp)}`);
    return {
        name: name4,
        message: message1,
        timestamp
    };
}
const REQUIRED_TAIL_MESSAGE_CRON_EVENT_KEYS = new Set([
    'cron',
    'scheduledTime'
]);
function isTailMessageCronEvent(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) return false;
    const keys = new Set(Object.keys(obj));
    return setEqual(keys, REQUIRED_TAIL_MESSAGE_CRON_EVENT_KEYS);
}
function parseTailMessageCronEvent(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad tailMessageCronEvent: Expected object, found ${JSON.stringify(obj)}`);
    checkKeys(obj, REQUIRED_TAIL_MESSAGE_CRON_EVENT_KEYS);
    const objAsAny = obj;
    const { cron , scheduledTime  } = objAsAny;
    if (!(typeof cron === 'string')) throw new Error(`Bad cron: expected string, found ${JSON.stringify(cron)}`);
    if (!(typeof scheduledTime === 'number' && scheduledTime > 0)) throw new Error(`Bad scheduledTime: expected positive number, found ${JSON.stringify(scheduledTime)}`);
    return {
        cron,
        scheduledTime
    };
}
const REQUIRED_TAIL_MESSAGE_REQUEST_EVENT_KEYS = new Set([
    'request'
]);
function parseTailMessageRequestEvent(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad tailMessageRequestEvent: Expected object, found ${JSON.stringify(obj)}`);
    checkKeys(obj, REQUIRED_TAIL_MESSAGE_REQUEST_EVENT_KEYS);
    const objAsAny = obj;
    const request = parseTailMessageEventRequest(objAsAny.request);
    return {
        request
    };
}
const REQUIRED_TAIL_MESSAGE_EVENT_REQUEST_KEYS = new Set([
    'url',
    'method',
    'headers'
]);
const OPTIONAL_TAIL_MESSAGE_EVENT_REQUEST_KEYS = new Set([
    'cf'
]);
const ALL_TAIL_MESSAGE_EVENT_REQUEST_KEYS = setUnion(REQUIRED_TAIL_MESSAGE_EVENT_REQUEST_KEYS, OPTIONAL_TAIL_MESSAGE_EVENT_REQUEST_KEYS);
function parseTailMessageEventRequest(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad tailMessageEventRequest: Expected object, found ${JSON.stringify(obj)}`);
    checkKeys(obj, REQUIRED_TAIL_MESSAGE_EVENT_REQUEST_KEYS, ALL_TAIL_MESSAGE_EVENT_REQUEST_KEYS);
    const objAsAny = obj;
    const { url , method  } = objAsAny;
    if (!(typeof url === 'string')) throw new Error(`Bad url: expected string, found ${JSON.stringify(url)}`);
    if (!(typeof method === 'string')) throw new Error(`Bad method: expected string, found ${JSON.stringify(method)}`);
    const headers = parseStringRecord(objAsAny.headers, 'headers');
    const cf = objAsAny.cf === undefined ? undefined : parseIncomingRequestCfProperties(objAsAny.cf);
    return {
        url,
        method,
        headers,
        cf
    };
}
function checkKeys(obj, requiredKeys, allKeys) {
    const keys = new Set(Object.keys(obj));
    const missingKeys = setSubtract(requiredKeys, keys);
    if (missingKeys.size > 0) throw new Error(`Missing keys: ${[
        ...missingKeys
    ].join(', ')}`);
    const extraKeys = setSubtract(keys, allKeys || requiredKeys);
    if (extraKeys.size > 0) throw new Error(`Extra keys: ${[
        ...extraKeys
    ].join(', ')}`);
}
function parseStringRecord(obj, name4) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad ${name4}: Expected string record, found ${JSON.stringify(obj)}`);
    for (const [_, value] of Object.entries(obj)){
        if (typeof value !== 'string') throw new Error(`Bad ${name4}: Expected string record, found ${JSON.stringify(obj)}`);
    }
    return obj;
}
function parseStringArray(obj, name4) {
    if (typeof obj !== 'object' || !Array.isArray(obj)) throw new Error(`Bad ${name4}: Expected string array, found ${JSON.stringify(obj)}`);
    for (const value of obj){
        if (typeof value !== 'string') throw new Error(`Bad ${name4}: Expected string array, found ${JSON.stringify(obj)}`);
    }
    return obj;
}
function parseIncomingRequestCfProperties(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) throw new Error(`Bad cf: Expected object, found ${JSON.stringify(obj)}`);
    return obj;
}
function setSubtract(lhs, rhs) {
    const rt = new Set(lhs);
    for (const item of rhs){
        rt.delete(item);
    }
    return rt;
}
function setUnion(lhs, rhs) {
    const rt = new Set(lhs);
    for (const item of rhs){
        rt.add(item);
    }
    return rt;
}
function setEqual(lhs, rhs) {
    return lhs.size === rhs.size && [
        ...lhs
    ].every((v)=>rhs.has(v)
    );
}
class TailConnection {
    static VERBOSE = false;
    ws;
    callbacks;
    options;
    constructor(webSocketUrl, callbacks){
        this.ws = new WebSocket(webSocketUrl, 'trace-v1');
        this.callbacks = callbacks;
        this.ws.addEventListener('open', (event)=>{
            const { timeStamp  } = event;
            this.sendOptionsIfOpen();
            if (callbacks.onOpen) {
                callbacks.onOpen(this, timeStamp);
            }
        });
        this.ws.addEventListener('close', (event)=>{
            const { code , reason , wasClean , timeStamp  } = event;
            if (callbacks.onClose) {
                callbacks.onClose(this, timeStamp, code, reason, wasClean);
            }
        });
        this.ws.addEventListener('error', (event)=>{
            const { timeStamp  } = event;
            const errorInfo = computeErrorInfo(event);
            if (callbacks.onError) {
                callbacks.onError(this, timeStamp, errorInfo);
            }
        });
        this.ws.addEventListener('message', async (event)=>{
            const { timeStamp  } = event;
            if (event.data instanceof Blob) {
                const text = await event.data.text();
                const obj = JSON.parse(text);
                let message1;
                try {
                    message1 = parseTailMessage(obj);
                } catch (e) {
                    callbacks.onUnparsedMessage(this, timeStamp, obj, e);
                    return;
                }
                callbacks.onTailMessage(this, timeStamp, message1);
            } else {
                callbacks.onUnparsedMessage(this, timeStamp, event.data, new Error(`Expected event.data to be Blob`));
            }
        });
    }
    setOptions(options) {
        this.options = options;
        this.sendOptionsIfOpen();
        return this;
    }
    close(code, reason) {
        this.ws.close(code, reason);
    }
    sendOptionsIfOpen() {
        if (this.options && this.ws.readyState === WebSocket.OPEN) {
            const payload = JSON.stringify(this.options);
            if (TailConnection.VERBOSE) console.log(`sendOptionsIfOpen: sending ${payload}`);
            this.ws.send(payload);
        }
    }
}
function computeErrorInfo(event) {
    if (event.type === 'error') {
        const { message: message1 , filename , lineno , colno , error  } = event;
        return {
            message: message1,
            filename,
            lineno,
            colno,
            error
        };
    }
    return undefined;
}
function dumpMessagePretty(message1, logger) {
    const time = formatLocalYyyyMmDdHhMmSs(new Date(message1.eventTimestamp));
    const outcome = PRETTY_OUTCOMES.get(message1.outcome) || message1.outcome;
    const outcomeColor = message1.outcome === 'ok' ? 'green' : 'red';
    if (isTailMessageCronEvent(message1.event)) {
        logger(`[%c${time}%c] [%c$???%c] [%c${outcome}%c] %c${message1.event.cron}`, 'color: gray', '', 'color: gray', '', `color: ${outcomeColor}`, '', 'color: red; font-style: bold;');
    } else {
        const { method , url , cf  } = message1.event.request;
        const colo = cf?.colo || '???';
        logger(`[%c${time}%c] [%c${colo}%c] [%c${outcome}%c] ${method} %c${url}`, 'color: gray', '', 'color: gray', '', `color: ${outcomeColor}`, '', 'color: red; font-style: bold;');
    }
    for (const { level , message: logMessage  } of message1.logs){
        const levelColor = LOG_LEVEL_COLORS.get(level) || 'gray';
        logger(` %c|%c [%c${level}%c] ${logMessage}`, 'color: gray', '', `color: ${levelColor}`, '');
    }
    for (const { name: name4 , message: exceptionMessage  } of message1.exceptions){
        logger(` %c|%c [%c${name4}%c] %c${exceptionMessage}`, 'color: gray', '', `color: red; font-style: bold`, '', 'color: red');
    }
}
function pad2(num) {
    return num.toString().padStart(2, '0');
}
function formatLocalYyyyMmDdHhMmSs(date) {
    return [
        date.getFullYear(),
        '-',
        pad2(date.getMonth() + 1),
        '-',
        pad2(date.getDate()),
        ' ',
        pad2(date.getHours()),
        ':',
        pad2(date.getMinutes()),
        ':',
        pad2(date.getSeconds())
    ].join('');
}
const PRETTY_OUTCOMES = new Map([
    [
        'ok',
        'Ok'
    ],
    [
        'exception',
        'Error'
    ],
    [
        'exceededCpu',
        'Exceeded Limit'
    ],
    [
        'canceled',
        'Canceled'
    ],
    [
        'unknown',
        'Unknown'
    ], 
]);
const LOG_LEVEL_COLORS = new Map([
    [
        'trace',
        'gray'
    ],
    [
        'debug',
        'purple'
    ],
    [
        'log',
        'gray'
    ],
    [
        'info',
        'gray'
    ],
    [
        'warn',
        'red'
    ],
    [
        'error',
        'red'
    ], 
]);
function generateUuid() {
    const cryptoAsAny = crypto;
    if (typeof cryptoAsAny.randomUUID === 'function') {
        return cryptoAsAny.randomUUID();
    }
    const rnds = crypto.getRandomValues(new Uint8Array(16));
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    return bytesToUuid(rnds);
}
function bytesToUuid(bytes) {
    const bits = [
        ...bytes
    ].map((bit)=>{
        const s = bit.toString(16);
        return bit < 16 ? "0" + s : s;
    });
    return [
        ...bits.slice(0, 4),
        "-",
        ...bits.slice(4, 6),
        "-",
        ...bits.slice(6, 8),
        "-",
        ...bits.slice(8, 10),
        "-",
        ...bits.slice(10, 16), 
    ].join("");
}
class TailwebAppVM {
    profiles = [];
    get selectedProfileId() {
        return this._selectedProfileId;
    }
    set selectedProfileId(value) {
        if (this._selectedProfileId === value) return;
        this._selectedProfileId = value;
        this.onchange();
        this.findScripts();
    }
    scripts = [];
    get selectedScriptId() {
        return this._selectedScriptId;
    }
    set selectedScriptId(value) {
        if (this._selectedScriptId === value) return;
        this._selectedScriptId = value;
        this.onchange();
        if (this._selectedScriptId) {
            this.startTail(this._selectedScriptId);
        }
    }
    profileForm = new ProfileFormVM();
    state = loadState();
    _selectedProfileId;
    _selectedScriptId;
    onchange = ()=>{
    };
    logger = ()=>{
    };
    constructor(){
    }
    start() {
        this.reloadProfiles();
        if (this.profiles.length > 0) {
            this.selectedProfileId = this.profiles[0].id;
        } else {
            this.onchange();
        }
    }
    newProfile() {
        this.profileForm.profileId = generateUuid();
        this.profileForm.showing = true;
        this.profileForm.title = 'New Profile';
        this.profileForm.name = this.profiles.length === 0 ? 'default' : `profile${this.profiles.length + 1}`;
        this.profileForm.accountId = '';
        this.profileForm.apiToken = '';
        this.profileForm.deleteVisible = false;
        this.profileForm.enabled = true;
        this.profileForm.outputMessage = '';
        this.profileForm.computeSaveEnabled();
        this.onchange();
    }
    editProfile(profileId) {
        const profile = this.state.profiles[profileId];
        if (!profile) throw new Error(`Profile ${profileId} not found`);
        this._selectedProfileId = profileId;
        const { name: name4 , accountId , apiToken  } = profile;
        this.profileForm.profileId = profileId;
        this.profileForm.showing = true;
        this.profileForm.title = 'Edit Profile';
        this.profileForm.name = name4;
        this.profileForm.accountId = accountId;
        this.profileForm.apiToken = apiToken;
        this.profileForm.deleteVisible = true;
        this.profileForm.enabled = true;
        this.profileForm.outputMessage = '';
        this.profileForm.computeSaveEnabled();
        this.onchange();
    }
    deleteProfile(profileId) {
        console.log('delete profile', profileId);
        const profile = this.state.profiles[profileId];
        if (!profile) throw new Error(`Profile ${profileId} not found`);
        delete this.state.profiles[profileId];
        saveState(this.state);
        this.profileForm.showing = false;
        this.reloadProfiles();
        this.onchange();
    }
    cancelProfile() {
        this.profileForm.showing = false;
        this.onchange();
    }
    setProfileName(name) {
        this.profileForm.name = name;
        this.profileForm.computeSaveEnabled();
        this.onchange();
    }
    setProfileAccountId(accountId) {
        this.profileForm.accountId = accountId;
        this.profileForm.computeSaveEnabled();
        this.onchange();
    }
    setProfileApiToken(apiToken) {
        this.profileForm.apiToken = apiToken;
        this.profileForm.computeSaveEnabled();
        this.onchange();
    }
    saveProfile() {
        const { profileForm  } = this;
        const { profileId  } = profileForm;
        const newProfile = {
            name: profileForm.name.trim(),
            accountId: profileForm.accountId.trim(),
            apiToken: profileForm.apiToken.trim()
        };
        this.trySaveProfile(profileId, newProfile);
    }
    async trySaveProfile(profileId, profile) {
        const { profileForm  } = this;
        profileForm.enabled = false;
        profileForm.progressVisible = true;
        profileForm.outputMessage = 'Checking profile...';
        this.onchange();
        try {
            const canListTails = await computeCanListTails(profile.accountId, profile.apiToken);
            if (canListTails) {
                this.state.profiles[profileId] = profile;
                saveState(this.state);
                profileForm.outputMessage = '';
                this.reloadProfiles();
                profileForm.showing = false;
            } else {
                profileForm.outputMessage = `These credentials do not have permission to tail`;
            }
        } catch (e) {
            profileForm.outputMessage = `Error: ${e.message}`;
        } finally{
            profileForm.progressVisible = false;
            profileForm.enabled = true;
            this.onchange();
        }
    }
    reloadProfiles() {
        const { state  } = this;
        this.profiles.splice(0);
        for (const [profileId, profile] of Object.entries(state.profiles)){
            const name4 = profile.name || '(unnamed)';
            this.profiles.push({
                id: profileId,
                text: name4
            });
        }
    }
    async findScripts() {
        try {
            if (this.selectedProfileId === undefined) return;
            const profile = this.state.profiles[this.selectedProfileId];
            if (profile === undefined) return;
            const { accountId , apiToken  } = profile;
            const scripts = await listScripts(accountId, apiToken);
            this.logger(`Found ${scripts.length} scripts`);
            this.scripts.splice(0);
            this.selectedScriptId = undefined;
            for (const script of scripts){
                this.logger(`Found script ${script.id}`);
                this.scripts.push({
                    id: script.id,
                    text: script.id
                });
            }
            this.scripts.sort((lhs, rhs)=>lhs.text.localeCompare(rhs.text)
            );
            if (this.scripts.length > 0) {
                this.selectedScriptId = this.scripts[0].id;
            } else {
                this.onchange();
            }
        } catch (e) {
            this.logger(`Error in findScripts: ${e.stack}`);
        }
    }
    async startTail(scriptId) {
        if (this.selectedProfileId === undefined) return;
        const profile = this.state.profiles[this.selectedProfileId];
        if (profile === undefined) return;
        const { accountId , apiToken  } = profile;
        const tail = await createTail(accountId, scriptId, apiToken);
        this.logger(JSON.stringify(tail, undefined, 2));
        const { logger  } = this;
        const callbacks1 = {
            onOpen (_cn, timeStamp) {
                logger('open', {
                    timeStamp
                });
            },
            onClose (_cn, timeStamp, code, reason, wasClean) {
                logger('close', {
                    timeStamp,
                    code,
                    reason,
                    wasClean
                });
            },
            onError (_cn, timeStamp, errorInfo) {
                logger('error', {
                    timeStamp,
                    errorInfo
                });
            },
            onTailMessage (_cn, _timeStamp, message) {
                dumpMessagePretty(message, logger);
            },
            onUnparsedMessage (_cn, timeStamp, message, parseError) {
                logger('unparsedMessage', {
                    timeStamp,
                    message,
                    parseError
                });
            }
        };
        const _cn = new TailConnection(tail.url, callbacks1);
    }
}
class ProfileFormVM {
    showing = false;
    enabled = false;
    name = '';
    accountId = '';
    apiToken = '';
    deleteVisible = false;
    saveEnabled = false;
    profileId = '';
    title = '';
    progressVisible = false;
    outputMessage = '';
    computeSaveEnabled() {
        this.saveEnabled = this.name.trim().length > 0 && this.apiToken.trim().length > 0 && this.accountId.trim().length > 0;
    }
}
const STATE_KEY = 'state1';
function loadState() {
    try {
        const json = localStorage.getItem(STATE_KEY) || undefined;
        if (json) {
            const rt = JSON.parse(json);
            return parseState(rt);
        }
    } catch (e) {
        console.warn('loadState: Error loading state', e);
    }
    console.log('loadState: returning new state');
    return {
        profiles: {
        }
    };
}
function parseState(parsed) {
    if (typeof parsed !== 'object') throw new Error(`Expected object`);
    const { profiles  } = parsed;
    if (typeof profiles !== 'object') throw new Error(`Expected profiles object`);
    for (const [profileId, profileState] of Object.entries(profiles)){
        if (typeof profileId !== 'string') throw new Error('Profile id must be string');
        parseProfileState(profileState);
    }
    return parsed;
}
function parseProfileState(parsed) {
    if (typeof parsed !== 'object' || parsed === null) throw new Error('Profile state must be object');
    const { name: name4 , accountId , apiToken  } = parsed;
    if (typeof name4 !== 'string' || name4.trim().length === 0) throw new Error(`Profile state name must exist`);
    if (typeof accountId !== 'string' || accountId.trim().length === 0) throw new Error(`Profile state accountId must exist`);
    if (typeof apiToken !== 'string' || apiToken.trim().length === 0) throw new Error(`Profile state apiToken must exist`);
    return parsed;
}
function saveState(state) {
    localStorage.setItem(STATE_KEY, JSON.stringify(state));
}
async function computeCanListTails(accountId, apiToken) {
    try {
        await listTails(accountId, '', apiToken);
        return true;
    } catch (e) {
        if (e instanceof CloudflareApiError && e.status === 404) {
            return true;
        } else {
        }
        return false;
    }
}
const PROFILE_EDITOR_HTML = html`
<form id="profile-form" autocomplete="off">
<fieldset id="profile-fieldset">
  <div id="profile-form-title" class="h6 high-emphasis-text">Profile</div>

  <label for="profile-name">Profile name:</label>
  <input id="profile-name" type="text">

  <label for="account-id">Cloudflare Account ID:</label>
  <input id="profile-account-id" type="text">

  <label for="api-token">Cloudflare API Token:</label>
  <input id="profile-api-token" type="text">

  <details id="profile-form-help-row" class="form-row">
    <summary>Use a <a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege" target="_blank">least privilege</a> token with <code>Account &gt; Workers Tail &gt; Read</code></summary>
    <div>Manage tokens on the Cloudflare dashboard <a href="https://dash.cloudflare.com/profile/api-tokens" target="_blank">API Tokens</a> page.</div>
  </details>  

  <div id="profile-form-output-row" class="form-row">
    <output id="profile-form-output"></output>
    <progress id="profile-form-progress" class="pure-material-progress-circular"></progress>
  </div>

  <div class="form-lhs">
    <button id="profile-delete">Delete</button>
  </div>
  <div id="profile-form-buttons" class="form-rhs">
    <button id="profile-cancel">Cancel</button>
    <button id="profile-save">Save</button>
  </div>
</fieldset>
</form>
`;
const PROFILE_EDITOR_CSS = css`

    #profile-form-buttons {
        justify-self: end;
        display: flex;
        gap: 1rem;
    }

    #profile-form-help-row {
        cursor: pointer;
    }

    #profile-form-help-row summary {
        user-select: none;
    }

    #profile-form-help-row div {
        margin: 1rem;
        cursor: default
    }

    #profile-form-help-row a {
        color: #bb86fc;
        text-underline-offset: 0.25rem;
    }

    #profile-form-output-row {
        display: flex;
        align-items: center;
        gap: 1rem;
        min-height: 2.5rem;
    }

    #profile-form-output-row output {
        flex-grow: 1;
    }

    #profile-form-progress {
        font-size: 0.5rem; /* default 3em => 1.5rem */
    }

`;
function initProfileEditor(document, vm) {
    const profileForm = document.getElementById('profile-form');
    const profileFormTitleDiv = document.getElementById('profile-form-title');
    const profileFieldset = document.getElementById('profile-fieldset');
    const profileNameInput = document.getElementById('profile-name');
    const profileAccountIdInput = document.getElementById('profile-account-id');
    const profileApiTokenInput = document.getElementById('profile-api-token');
    const profileDeleteButton = document.getElementById('profile-delete');
    const profileCancelButton = document.getElementById('profile-cancel');
    const profileSaveButton = document.getElementById('profile-save');
    const profileFormProgress = document.getElementById('profile-form-progress');
    const profileFormOutput = document.getElementById('profile-form-output');
    const profileFormHelpDetails = document.getElementById('profile-form-help-row');
    profileCancelButton.onclick = (e)=>{
        e.preventDefault();
        vm.cancelProfile();
    };
    profileNameInput.oninput = ()=>{
        vm.setProfileName(profileNameInput.value);
    };
    profileAccountIdInput.oninput = ()=>{
        vm.setProfileAccountId(profileAccountIdInput.value);
    };
    profileApiTokenInput.oninput = ()=>{
        vm.setProfileApiToken(profileApiTokenInput.value);
    };
    profileSaveButton.onclick = (e)=>{
        e.preventDefault();
        vm.saveProfile();
    };
    profileDeleteButton.onclick = (e)=>{
        e.preventDefault();
        vm.deleteProfile(vm.profileForm.profileId);
    };
    return ()=>{
        const wasHidden = profileForm.style.display === 'none';
        profileForm.style.display = vm.profileForm.showing ? 'grid' : 'none';
        if (wasHidden && vm.profileForm.showing) {
            profileFormHelpDetails.open = false;
        }
        profileFieldset.disabled = !vm.profileForm.enabled;
        profileFormTitleDiv.textContent = vm.profileForm.title;
        profileNameInput.value = vm.profileForm.name;
        profileAccountIdInput.value = vm.profileForm.accountId;
        profileApiTokenInput.value = vm.profileForm.apiToken;
        profileDeleteButton.style.display = vm.profileForm.deleteVisible ? 'inline-block' : 'none';
        profileSaveButton.disabled = !vm.profileForm.saveEnabled;
        profileFormProgress.style.display = vm.profileForm.progressVisible ? 'block' : 'none';
        profileFormOutput.textContent = vm.profileForm.outputMessage;
    };
}
const MODAL_HTML = html`
<div id="modal" class="modal">
    <div class="modal-content">
    ${PROFILE_EDITOR_HTML}
    </div>
</div>
`;
const MODAL_CSS = css`
.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    margin: 15% auto;
    width: 80%;
    max-width: 40rem;
    background-color: #121212;
}
`;
function initModal(document, vm) {
    const modal = document.getElementById('modal');
    const updateProfileEditor = initProfileEditor(document, vm);
    const closeModal = ()=>{
        if (!vm.profileForm.showing) return;
        if (vm.profileForm.progressVisible) return;
        vm.profileForm.showing = false;
        vm.onchange();
    };
    window.addEventListener('click', (event)=>{
        if (event.target == modal) {
            closeModal();
        }
    });
    document.addEventListener('keydown', (event)=>{
        event = event || window.event;
        if (event.key === 'Escape') {
            closeModal();
        }
    });
    return ()=>{
        updateProfileEditor();
        modal.style.display = vm.profileForm.showing ? 'block' : 'none';
    };
}
const CIRCULAR_PROGRESS_CSS = css`
.pure-material-progress-circular {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    box-sizing: border-box;
    border: none;
    border-radius: 50%;
    padding: 0.25em;
    width: 3em;
    height: 3em;
    color: var(--pure-material-primary-rgb, rgb(33, 150, 243));
    background-color: transparent;
    font-size: 16px;
    overflow: hidden;
}

.pure-material-progress-circular::-webkit-progress-bar {
    background-color: transparent;
}

/* Indeterminate */
.pure-material-progress-circular:indeterminate {
    -webkit-mask-image: linear-gradient(transparent 50%, black 50%), linear-gradient(to right, transparent 50%, black 50%);
    mask-image: linear-gradient(transparent 50%, black 50%), linear-gradient(to right, transparent 50%, black 50%);
    animation: pure-material-progress-circular 6s infinite cubic-bezier(0.3, 0.6, 1, 1);
}

:-ms-lang(x), .pure-material-progress-circular:indeterminate {
    animation: none;
}

.pure-material-progress-circular:indeterminate::before,
.pure-material-progress-circular:indeterminate::-webkit-progress-value {
    content: "";
    display: block;
    box-sizing: border-box;
    margin-bottom: 0.25em;
    border: solid 0.25em transparent;
    border-top-color: currentColor;
    border-radius: 50%;
    width: 100% !important;
    height: 100%;
    background-color: transparent;
    animation: pure-material-progress-circular-pseudo 0.75s infinite linear alternate;
}

.pure-material-progress-circular:indeterminate::-moz-progress-bar {
    box-sizing: border-box;
    border: solid 0.25em transparent;
    border-top-color: currentColor;
    border-radius: 50%;
    width: 100%;
    height: 100%;
    background-color: transparent;
    animation: pure-material-progress-circular-pseudo 0.75s infinite linear alternate;
}

.pure-material-progress-circular:indeterminate::-ms-fill {
    animation-name: -ms-ring;
}

@keyframes pure-material-progress-circular {
    0% {
        transform: rotate(0deg);
    }
    12.5% {
        transform: rotate(180deg);
        animation-timing-function: linear;
    }
    25% {
        transform: rotate(630deg);
    }
    37.5% {
        transform: rotate(810deg);
        animation-timing-function: linear;
    }
    50% {
        transform: rotate(1260deg);
    }
    62.5% {
        transform: rotate(1440deg);
        animation-timing-function: linear;
    }
    75% {
        transform: rotate(1890deg);
    }
    87.5% {
        transform: rotate(2070deg);
        animation-timing-function: linear;
    }
    100% {
        transform: rotate(2520deg);
    }
}

@keyframes pure-material-progress-circular-pseudo {
    0% {
        transform: rotate(-30deg);
    }
    29.4% {
        border-left-color: transparent;
    }
    29.41% {
        border-left-color: currentColor;
    }
    64.7% {
        border-bottom-color: transparent;
    }
    64.71% {
        border-bottom-color: currentColor;
    }
    100% {
        border-left-color: currentColor;
        border-bottom-color: currentColor;
        transform: rotate(225deg);
    }
}
`;
const CONSOLE_HTML = html`
<div id="console">
    <div id="console-settings"></div>
    <div id="console-last-line" class="line">spacer</div>
</div>

`;
const CONSOLE_CSS = css`

#console {
    font-family: monospace;
    color: var(--high-emphasis-text-color);
    height: 100vh;
    width: 100%;
    background-color: #121212;
    overflow-y: scroll;
    overflow-x: hidden;
}

#console::-webkit-scrollbar {
    width: 1rem;
    height: 3rem;
    background-color: #121212;
}

#console::-webkit-scrollbar-thumb {
    background-color: var(--medium-emphasis-text-color);
}

#console-settings {
    position: sticky;
    top: 0;
    height: 5rem;
    background-color: #121212;
}

#console .line {
    padding: 0.1rem 0;
}

#console-last-line {
    visibility: hidden;
}

`;
function initConsole(document, vm) {
    const consoleDiv = document.getElementById('console');
    const consoleLastLineDiv = document.getElementById('console-last-line');
    vm.logger = (...data)=>{
        const lineDiv = document.createElement('div');
        lineDiv.className = 'line';
        const msg = data[0];
        const tokens = msg.split('%c');
        for(let i1 = 0; i1 < tokens.length; i1++){
            const span = document.createElement('SPAN');
            const style = data[i1];
            span.setAttribute('style', style);
            span.textContent = tokens[i1];
            lineDiv.appendChild(span);
        }
        consoleDiv.insertBefore(lineDiv, consoleLastLineDiv);
        consoleLastLineDiv.scrollIntoView(false);
    };
    return ()=>{
    };
}
const appCss = css`

main {
    display: flex;
    gap: 0.5rem;
}

:root {
    --pure-material-primary-rgb: rgb(187, 134, 252);
}
`;
const appHtml = html`
<main>
${SIDEBAR_HTML}
${CONSOLE_HTML}
${MODAL_HTML}
</main>`;
function appendStylesheets(cssTexts) {
    const styleSheet = document.createElement('style');
    styleSheet.type = 'text/css';
    styleSheet.textContent = cssTexts.join('\n\n');
    document.head.appendChild(styleSheet);
}
appendStylesheets([
    MATERIAL_CSS.cssText,
    appCss.cssText,
    HEADER_CSS.cssText,
    SIDEBAR_CSS.cssText,
    CONSOLE_CSS.cssText,
    MODAL_CSS.cssText,
    PROFILE_EDITOR_CSS.cssText,
    CIRCULAR_PROGRESS_CSS.cssText, 
]);
LitElement.render(appHtml, document.body);
const vm = new TailwebAppVM();
const updateSidebar = initSidebar(document, vm);
const updateConsole = initConsole(document, vm);
const updateModal = initModal(document, vm);
vm.onchange = ()=>{
    updateSidebar();
    updateConsole();
    updateModal();
};
CloudflareApi.URL_TRANSFORMER = (v)=>`/fetch/${v.substring('https://'.length)}`
;
vm.start();
';