export const TAILWEB_APP_DATA = 'data:text/javascript;base64,YXN5bmMgZnVuY3Rpb24gY3JlYXRlVGFpbChhY2NvdW50SWQsIHNjcmlwdE5hbWUsIGFwaVRva2VuKSB7CiAgICBjb25zdCB1cmwgPSBgJHtjb21wdXRlQWNjb3VudEJhc2VVcmwoYWNjb3VudElkKX0vd29ya2Vycy9zY3JpcHRzLyR7c2NyaXB0TmFtZX0vdGFpbHNgOwogICAgcmV0dXJuIChhd2FpdCBleGVjdXRlKCdjcmVhdGVUYWlsJywgJ1BPU1QnLCB1cmwsIGFwaVRva2VuKSkucmVzdWx0Owp9CmNsYXNzIENsb3VkZmxhcmVBcGkgewogICAgc3RhdGljIERFQlVHID0gZmFsc2U7CiAgICBzdGF0aWMgVVJMX1RSQU5TRk9STUVSID0gKHYpPT52CiAgICA7Cn0KY29uc3QgQVBQTElDQVRJT05fSlNPTiA9ICdhcHBsaWNhdGlvbi9qc29uJzsKY29uc3QgQVBQTElDQVRJT05fSlNPTl9VVEY4ID0gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnOwpjb25zdCBBUFBMSUNBVElPTl9PQ1RFVF9TVFJFQU0gPSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJzsKZnVuY3Rpb24gY29tcHV0ZUFjY291bnRCYXNlVXJsKGFjY291bnRJZCkgewogICAgcmV0dXJuIENsb3VkZmxhcmVBcGkuVVJMX1RSQU5TRk9STUVSKGBodHRwczovL2FwaS5jbG91ZGZsYXJlLmNvbS9jbGllbnQvdjQvYWNjb3VudHMvJHthY2NvdW50SWR9YCk7Cn0KYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZShvcCwgbWV0aG9kLCB1cmwsIGFwaVRva2VuLCBib2R5LCByZXNwb25zZVR5cGUgPSAnanNvbicpIHsKICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7CiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpVG9rZW59YAogICAgfSk7CiAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIEFQUExJQ0FUSU9OX0pTT05fVVRGOCk7CiAgICAgICAgaWYgKENsb3VkZmxhcmVBcGkuREVCVUcpIGNvbnNvbGUubG9nKGJvZHkpOwogICAgfQogICAgY29uc3QgZmV0Y2hSZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgewogICAgICAgIG1ldGhvZCwKICAgICAgICBoZWFkZXJzLAogICAgICAgIGJvZHkKICAgIH0pOwogICAgY29uc3QgY29udGVudFR5cGUgPSBmZXRjaFJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSB8fCAnJzsKICAgIGlmICgocmVzcG9uc2VUeXBlID09PSAnYnl0ZXMnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2J5dGVzPycpICYmIGNvbnRlbnRUeXBlID09PSBBUFBMSUNBVElPTl9PQ1RFVF9TVFJFQU0pIHsKICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBmZXRjaFJlc3BvbnNlLmFycmF5QnVmZmVyKCk7CiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7CiAgICB9CiAgICBpZiAoIVsKICAgICAgICBBUFBMSUNBVElPTl9KU09OX1VURjgsCiAgICAgICAgQVBQTElDQVRJT05fSlNPTgogICAgXS5pbmNsdWRlcyhjb250ZW50VHlwZSkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgY29udGVudC10eXBlOiAke2NvbnRlbnRUeXBlfSwgIGZldGNoUmVzcG9uc2U9JHtmZXRjaFJlc3BvbnNlfSwgYm9keT0ke2F3YWl0IGZldGNoUmVzcG9uc2UudGV4dCgpfWApOwogICAgfQogICAgY29uc3QgYXBpUmVzcG9uc2UgPSBhd2FpdCBmZXRjaFJlc3BvbnNlLmpzb24oKTsKICAgIGlmIChDbG91ZGZsYXJlQXBpLkRFQlVHKSBjb25zb2xlLmxvZyhhcGlSZXNwb25zZSk7CiAgICBpZiAoIWFwaVJlc3BvbnNlLnN1Y2Nlc3MpIHsKICAgICAgICBpZiAoZmV0Y2hSZXNwb25zZS5zdGF0dXMgPT09IDQwNCAmJiByZXNwb25zZVR5cGUgPT09ICdieXRlcz8nKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvcH0gZmFpbGVkOiBzdGF0dXM9JHtmZXRjaFJlc3BvbnNlLnN0YXR1c30sIGVycm9ycz0ke2FwaVJlc3BvbnNlLmVycm9ycy5tYXAoKHYpPT5gJHt2LmNvZGV9ICR7di5tZXNzYWdlfWAKICAgICAgICApLmpvaW4oJywgJyl9YCk7CiAgICB9CiAgICByZXR1cm4gYXBpUmVzcG9uc2U7Cn0KY29uc3QgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0tFWVMgPSBuZXcgU2V0KFsKICAgICdvdXRjb21lJywKICAgICdzY3JpcHROYW1lJywKICAgICdleGNlcHRpb25zJywKICAgICdsb2dzJywKICAgICdldmVudFRpbWVzdGFtcCcsCiAgICAnZXZlbnQnCl0pOwpjb25zdCBLTk9XTl9PVVRDT01FUyA9IG5ldyBTZXQoWwogICAgJ29rJywKICAgICdleGNlcHRpb24nLAogICAgJ2V4Y2VlZGVkQ3B1JywKICAgICdjYW5jZWxlZCcsCiAgICAndW5rbm93bicKXSk7CmZ1bmN0aW9uIHBhcnNlVGFpbE1lc3NhZ2Uob2JqKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgdGFpbE1lc3NhZ2U6IEV4cGVjdGVkIG9iamVjdCwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgY2hlY2tLZXlzKG9iaiwgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0tFWVMpOwogICAgY29uc3Qgb2JqQXNBbnkgPSBvYmo7CiAgICBjb25zdCB7IG91dGNvbWUgLCBzY3JpcHROYW1lICwgZXZlbnRUaW1lc3RhbXAgIH0gPSBvYmpBc0FueTsKICAgIGlmICghS05PV05fT1VUQ09NRVMuaGFzKG91dGNvbWUpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBvdXRjb21lOiBleHBlY3RlZCBvbmUgb2YgWyR7WwogICAgICAgIC4uLktOT1dOX09VVENPTUVTCiAgICBdLmpvaW4oJywgJyl9XSwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvdXRjb21lKX1gKTsKICAgIGlmIChzY3JpcHROYW1lICE9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBzY3JpcHROYW1lOiBleHBlY3RlZCBudWxsLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHNjcmlwdE5hbWUpfWApOwogICAgY29uc3QgbG9ncyA9IHBhcnNlTG9ncyhvYmpBc0FueS5sb2dzKTsKICAgIGNvbnN0IGV4Y2VwdGlvbnMgPSBwYXJzZUV4Y2VwdGlvbnMob2JqQXNBbnkuZXhjZXB0aW9ucyk7CiAgICBpZiAoISh0eXBlb2YgZXZlbnRUaW1lc3RhbXAgPT09ICdudW1iZXInICYmIGV2ZW50VGltZXN0YW1wID4gMCkpIHRocm93IG5ldyBFcnJvcihgQmFkIGV2ZW50VGltZXN0YW1wOiBleHBlY3RlZCBwb3NpdGl2ZSBudW1iZXIsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoZXZlbnRUaW1lc3RhbXApfWApOwogICAgY29uc3QgZXZlbnQgPSBvYmpBc0FueS5ldmVudCAmJiBvYmpBc0FueS5ldmVudC5yZXF1ZXN0ID8gcGFyc2VUYWlsTWVzc2FnZVJlcXVlc3RFdmVudChvYmpBc0FueS5ldmVudCkgOiBwYXJzZVRhaWxNZXNzYWdlQ3JvbkV2ZW50KG9iakFzQW55LmV2ZW50KTsKICAgIHJldHVybiB7CiAgICAgICAgb3V0Y29tZSwKICAgICAgICBzY3JpcHROYW1lLAogICAgICAgIGV4Y2VwdGlvbnMsCiAgICAgICAgbG9ncywKICAgICAgICBldmVudFRpbWVzdGFtcCwKICAgICAgICBldmVudAogICAgfTsKfQpmdW5jdGlvbiBwYXJzZUxvZ3Mob2JqKSB7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgbG9nczogZXhwZWN0ZWQgYXJyYXksIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIHJldHVybiBbCiAgICAgICAgLi4ub2JqCiAgICBdLm1hcChwYXJzZVRhaWxNZXNzYWdlTG9nKTsKfQpmdW5jdGlvbiBwYXJzZUV4Y2VwdGlvbnMob2JqKSB7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgZXhjZXB0aW9uczogZXhwZWN0ZWQgYXJyYXksIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIHJldHVybiBbCiAgICAgICAgLi4ub2JqCiAgICBdLm1hcChwYXJzZVRhaWxNZXNzYWdlRXhjZXB0aW9uKTsKfQpjb25zdCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfTE9HX0tFWVMgPSBuZXcgU2V0KFsKICAgICdtZXNzYWdlJywKICAgICdsZXZlbCcsCiAgICAndGltZXN0YW1wJwpdKTsKZnVuY3Rpb24gcGFyc2VUYWlsTWVzc2FnZUxvZyhvYmopIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0YWlsTWVzc2FnZUxvZzogRXhwZWN0ZWQgb2JqZWN0LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICBjaGVja0tleXMob2JqLCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfTE9HX0tFWVMpOwogICAgY29uc3Qgb2JqQXNBbnkgPSBvYmo7CiAgICBjb25zdCBtZXNzYWdlID0gcGFyc2VTdHJpbmdBcnJheShvYmpBc0FueS5tZXNzYWdlLCAnbWVzc2FnZScpOwogICAgY29uc3QgeyBsZXZlbCAsIHRpbWVzdGFtcCAgfSA9IG9iakFzQW55OwogICAgaWYgKCEodHlwZW9mIGxldmVsID09PSAnc3RyaW5nJykpIHRocm93IG5ldyBFcnJvcihgQmFkIGxldmVsOiBleHBlY3RlZCBzdHJpbmcsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkobGV2ZWwpfWApOwogICAgaWYgKCEodHlwZW9mIHRpbWVzdGFtcCA9PT0gJ251bWJlcicgJiYgdGltZXN0YW1wID4gMCkpIHRocm93IG5ldyBFcnJvcihgQmFkIHRpbWVzdGFtcDogZXhwZWN0ZWQgcG9zaXRpdmUgbnVtYmVyLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHRpbWVzdGFtcCl9YCk7CiAgICByZXR1cm4gewogICAgICAgIG1lc3NhZ2UsCiAgICAgICAgbGV2ZWwsCiAgICAgICAgdGltZXN0YW1wCiAgICB9Owp9CmNvbnN0IFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9FWENFUFRJT05fS0VZUyA9IG5ldyBTZXQoWwogICAgJ25hbWUnLAogICAgJ21lc3NhZ2UnLAogICAgJ3RpbWVzdGFtcCcKXSk7CmZ1bmN0aW9uIHBhcnNlVGFpbE1lc3NhZ2VFeGNlcHRpb24ob2JqKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgdGFpbE1lc3NhZ2VFeGNlcHRpb246IEV4cGVjdGVkIG9iamVjdCwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgY2hlY2tLZXlzKG9iaiwgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0VYQ0VQVElPTl9LRVlTKTsKICAgIGNvbnN0IG9iakFzQW55ID0gb2JqOwogICAgY29uc3QgeyBuYW1lICwgbWVzc2FnZSAsIHRpbWVzdGFtcCAgfSA9IG9iakFzQW55OwogICAgaWYgKCEodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgbmFtZTogZXhwZWN0ZWQgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApOwogICAgaWYgKCEodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgbWVzc2FnZTogZXhwZWN0ZWQgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UpfWApOwogICAgaWYgKCEodHlwZW9mIHRpbWVzdGFtcCA9PT0gJ251bWJlcicgJiYgdGltZXN0YW1wID4gMCkpIHRocm93IG5ldyBFcnJvcihgQmFkIHRpbWVzdGFtcDogZXhwZWN0ZWQgcG9zaXRpdmUgbnVtYmVyLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHRpbWVzdGFtcCl9YCk7CiAgICByZXR1cm4gewogICAgICAgIG5hbWUsCiAgICAgICAgbWVzc2FnZSwKICAgICAgICB0aW1lc3RhbXAKICAgIH07Cn0KY29uc3QgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0NST05fRVZFTlRfS0VZUyA9IG5ldyBTZXQoWwogICAgJ2Nyb24nLAogICAgJ3NjaGVkdWxlZFRpbWUnCl0pOwpmdW5jdGlvbiBpc1RhaWxNZXNzYWdlQ3JvbkV2ZW50KG9iaikgewogICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG9iaikpIHJldHVybiBmYWxzZTsKICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKG9iaikpOwogICAgcmV0dXJuIHNldEVxdWFsKGtleXMsIFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9DUk9OX0VWRU5UX0tFWVMpOwp9CmZ1bmN0aW9uIHBhcnNlVGFpbE1lc3NhZ2VDcm9uRXZlbnQob2JqKSB7CiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkob2JqKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgdGFpbE1lc3NhZ2VDcm9uRXZlbnQ6IEV4cGVjdGVkIG9iamVjdCwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmopfWApOwogICAgY2hlY2tLZXlzKG9iaiwgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0NST05fRVZFTlRfS0VZUyk7CiAgICBjb25zdCBvYmpBc0FueSA9IG9iajsKICAgIGNvbnN0IHsgY3JvbiAsIHNjaGVkdWxlZFRpbWUgIH0gPSBvYmpBc0FueTsKICAgIGlmICghKHR5cGVvZiBjcm9uID09PSAnc3RyaW5nJykpIHRocm93IG5ldyBFcnJvcihgQmFkIGNyb246IGV4cGVjdGVkIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShjcm9uKX1gKTsKICAgIGlmICghKHR5cGVvZiBzY2hlZHVsZWRUaW1lID09PSAnbnVtYmVyJyAmJiBzY2hlZHVsZWRUaW1lID4gMCkpIHRocm93IG5ldyBFcnJvcihgQmFkIHNjaGVkdWxlZFRpbWU6IGV4cGVjdGVkIHBvc2l0aXZlIG51bWJlciwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShzY2hlZHVsZWRUaW1lKX1gKTsKICAgIHJldHVybiB7CiAgICAgICAgY3JvbiwKICAgICAgICBzY2hlZHVsZWRUaW1lCiAgICB9Owp9CmNvbnN0IFJFUVVJUkVEX1RBSUxfTUVTU0FHRV9SRVFVRVNUX0VWRU5UX0tFWVMgPSBuZXcgU2V0KFsKICAgICdyZXF1ZXN0JwpdKTsKZnVuY3Rpb24gcGFyc2VUYWlsTWVzc2FnZVJlcXVlc3RFdmVudChvYmopIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0YWlsTWVzc2FnZVJlcXVlc3RFdmVudDogRXhwZWN0ZWQgb2JqZWN0LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICBjaGVja0tleXMob2JqLCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfUkVRVUVTVF9FVkVOVF9LRVlTKTsKICAgIGNvbnN0IG9iakFzQW55ID0gb2JqOwogICAgY29uc3QgcmVxdWVzdCA9IHBhcnNlVGFpbE1lc3NhZ2VFdmVudFJlcXVlc3Qob2JqQXNBbnkucmVxdWVzdCk7CiAgICByZXR1cm4gewogICAgICAgIHJlcXVlc3QKICAgIH07Cn0KY29uc3QgUkVRVUlSRURfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUyA9IG5ldyBTZXQoWwogICAgJ3VybCcsCiAgICAnbWV0aG9kJywKICAgICdoZWFkZXJzJwpdKTsKY29uc3QgT1BUSU9OQUxfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUyA9IG5ldyBTZXQoWwogICAgJ2NmJwpdKTsKY29uc3QgQUxMX1RBSUxfTUVTU0FHRV9FVkVOVF9SRVFVRVNUX0tFWVMgPSBzZXRVbmlvbihSRVFVSVJFRF9UQUlMX01FU1NBR0VfRVZFTlRfUkVRVUVTVF9LRVlTLCBPUFRJT05BTF9UQUlMX01FU1NBR0VfRVZFTlRfUkVRVUVTVF9LRVlTKTsKZnVuY3Rpb24gcGFyc2VUYWlsTWVzc2FnZUV2ZW50UmVxdWVzdChvYmopIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB0YWlsTWVzc2FnZUV2ZW50UmVxdWVzdDogRXhwZWN0ZWQgb2JqZWN0LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICBjaGVja0tleXMob2JqLCBSRVFVSVJFRF9UQUlMX01FU1NBR0VfRVZFTlRfUkVRVUVTVF9LRVlTLCBBTExfVEFJTF9NRVNTQUdFX0VWRU5UX1JFUVVFU1RfS0VZUyk7CiAgICBjb25zdCBvYmpBc0FueSA9IG9iajsKICAgIGNvbnN0IHsgdXJsICwgbWV0aG9kICB9ID0gb2JqQXNBbnk7CiAgICBpZiAoISh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykpIHRocm93IG5ldyBFcnJvcihgQmFkIHVybDogZXhwZWN0ZWQgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHVybCl9YCk7CiAgICBpZiAoISh0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykpIHRocm93IG5ldyBFcnJvcihgQmFkIG1ldGhvZDogZXhwZWN0ZWQgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG1ldGhvZCl9YCk7CiAgICBjb25zdCBoZWFkZXJzID0gcGFyc2VTdHJpbmdSZWNvcmQob2JqQXNBbnkuaGVhZGVycywgJ2hlYWRlcnMnKTsKICAgIGNvbnN0IGNmID0gb2JqQXNBbnkuY2YgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHBhcnNlSW5jb21pbmdSZXF1ZXN0Q2ZQcm9wZXJ0aWVzKG9iakFzQW55LmNmKTsKICAgIHJldHVybiB7CiAgICAgICAgdXJsLAogICAgICAgIG1ldGhvZCwKICAgICAgICBoZWFkZXJzLAogICAgICAgIGNmCiAgICB9Owp9CmZ1bmN0aW9uIGNoZWNrS2V5cyhvYmosIHJlcXVpcmVkS2V5cywgYWxsS2V5cykgewogICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoT2JqZWN0LmtleXMob2JqKSk7CiAgICBjb25zdCBtaXNzaW5nS2V5cyA9IHNldFN1YnRyYWN0KHJlcXVpcmVkS2V5cywga2V5cyk7CiAgICBpZiAobWlzc2luZ0tleXMuc2l6ZSA+IDApIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBrZXlzOiAke1sKICAgICAgICAuLi5taXNzaW5nS2V5cwogICAgXS5qb2luKCcsICcpfWApOwogICAgY29uc3QgZXh0cmFLZXlzID0gc2V0U3VidHJhY3Qoa2V5cywgYWxsS2V5cyB8fCByZXF1aXJlZEtleXMpOwogICAgaWYgKGV4dHJhS2V5cy5zaXplID4gMCkgdGhyb3cgbmV3IEVycm9yKGBFeHRyYSBrZXlzOiAke1sKICAgICAgICAuLi5leHRyYUtleXMKICAgIF0uam9pbignLCAnKX1gKTsKfQpmdW5jdGlvbiBwYXJzZVN0cmluZ1JlY29yZChvYmosIG5hbWUpIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCAke25hbWV9OiBFeHBlY3RlZCBzdHJpbmcgcmVjb3JkLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICBmb3IgKGNvbnN0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSl7CiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgQmFkICR7bmFtZX06IEV4cGVjdGVkIHN0cmluZyByZWNvcmQsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIH0KICAgIHJldHVybiBvYmo7Cn0KZnVuY3Rpb24gcGFyc2VTdHJpbmdBcnJheShvYmosIG5hbWUpIHsKICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhQXJyYXkuaXNBcnJheShvYmopKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCAke25hbWV9OiBFeHBlY3RlZCBzdHJpbmcgYXJyYXksIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIGZvciAoY29uc3QgdmFsdWUgb2Ygb2JqKXsKICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBCYWQgJHtuYW1lfTogRXhwZWN0ZWQgc3RyaW5nIGFycmF5LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICB9CiAgICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIHBhcnNlSW5jb21pbmdSZXF1ZXN0Q2ZQcm9wZXJ0aWVzKG9iaikgewogICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG9iaikpIHRocm93IG5ldyBFcnJvcihgQmFkIGNmOiBFeHBlY3RlZCBvYmplY3QsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKICAgIHJldHVybiBvYmo7Cn0KZnVuY3Rpb24gc2V0U3VidHJhY3QobGhzLCByaHMpIHsKICAgIGNvbnN0IHJ0ID0gbmV3IFNldChsaHMpOwogICAgZm9yIChjb25zdCBpdGVtIG9mIHJocyl7CiAgICAgICAgcnQuZGVsZXRlKGl0ZW0pOwogICAgfQogICAgcmV0dXJuIHJ0Owp9CmZ1bmN0aW9uIHNldFVuaW9uKGxocywgcmhzKSB7CiAgICBjb25zdCBydCA9IG5ldyBTZXQobGhzKTsKICAgIGZvciAoY29uc3QgaXRlbSBvZiByaHMpewogICAgICAgIHJ0LmFkZChpdGVtKTsKICAgIH0KICAgIHJldHVybiBydDsKfQpmdW5jdGlvbiBzZXRFcXVhbChsaHMsIHJocykgewogICAgcmV0dXJuIGxocy5zaXplID09PSByaHMuc2l6ZSAmJiBbCiAgICAgICAgLi4ubGhzCiAgICBdLmV2ZXJ5KCh2KT0+cmhzLmhhcyh2KQogICAgKTsKfQpjbGFzcyBUYWlsQ29ubmVjdGlvbiB7CiAgICBzdGF0aWMgVkVSQk9TRSA9IGZhbHNlOwogICAgd3M7CiAgICBjYWxsYmFja3M7CiAgICBvcHRpb25zOwogICAgY29uc3RydWN0b3Iod2ViU29ja2V0VXJsLCBjYWxsYmFja3MpewogICAgICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0KHdlYlNvY2tldFVybCwgJ3RyYWNlLXYxJyk7CiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7CiAgICAgICAgdGhpcy53cy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICB0aGlzLnNlbmRPcHRpb25zSWZPcGVuKCk7CiAgICAgICAgICAgIGlmIChjYWxsYmFja3Mub25PcGVuKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25PcGVuKHRoaXMsIHRpbWVTdGFtcCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLndzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IGNvZGUgLCByZWFzb24gLCB3YXNDbGVhbiAsIHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICBpZiAoY2FsbGJhY2tzLm9uQ2xvc2UpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbkNsb3NlKHRoaXMsIHRpbWVTdGFtcCwgY29kZSwgcmVhc29uLCB3YXNDbGVhbik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLndzLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KT0+ewogICAgICAgICAgICBjb25zdCB7IHRpbWVTdGFtcCAgfSA9IGV2ZW50OwogICAgICAgICAgICBjb25zdCBlcnJvckluZm8gPSBjb21wdXRlRXJyb3JJbmZvKGV2ZW50KTsKICAgICAgICAgICAgaWYgKGNhbGxiYWNrcy5vbkVycm9yKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25FcnJvcih0aGlzLCB0aW1lU3RhbXAsIGVycm9ySW5mbyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLndzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBhc3luYyAoZXZlbnQpPT57CiAgICAgICAgICAgIGNvbnN0IHsgdGltZVN0YW1wICB9ID0gZXZlbnQ7CiAgICAgICAgICAgIGlmIChldmVudC5kYXRhIGluc3RhbmNlb2YgQmxvYikgewogICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IGV2ZW50LmRhdGEudGV4dCgpOwogICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gSlNPTi5wYXJzZSh0ZXh0KTsKICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gcGFyc2VUYWlsTWVzc2FnZShvYmopOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblVucGFyc2VkTWVzc2FnZSh0aGlzLCB0aW1lU3RhbXAsIG9iaiwgZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uVGFpbE1lc3NhZ2UodGhpcywgdGltZVN0YW1wLCBtZXNzYWdlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblVucGFyc2VkTWVzc2FnZSh0aGlzLCB0aW1lU3RhbXAsIGV2ZW50LmRhdGEsIG5ldyBFcnJvcihgRXhwZWN0ZWQgZXZlbnQuZGF0YSB0byBiZSBCbG9iYCkpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CiAgICBzZXRPcHRpb25zKG9wdGlvbnMpIHsKICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwogICAgICAgIHRoaXMuc2VuZE9wdGlvbnNJZk9wZW4oKTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIGNsb3NlKGNvZGUsIHJlYXNvbikgewogICAgICAgIHRoaXMud3MuY2xvc2UoY29kZSwgcmVhc29uKTsKICAgIH0KICAgIHNlbmRPcHRpb25zSWZPcGVuKCkgewogICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy53cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikgewogICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkodGhpcy5vcHRpb25zKTsKICAgICAgICAgICAgaWYgKFRhaWxDb25uZWN0aW9uLlZFUkJPU0UpIGNvbnNvbGUubG9nKGBzZW5kT3B0aW9uc0lmT3Blbjogc2VuZGluZyAke3BheWxvYWR9YCk7CiAgICAgICAgICAgIHRoaXMud3Muc2VuZChwYXlsb2FkKTsKICAgICAgICB9CiAgICB9Cn0KZnVuY3Rpb24gY29tcHV0ZUVycm9ySW5mbyhldmVudCkgewogICAgaWYgKGV2ZW50LnR5cGUgPT09ICdlcnJvcicpIHsKICAgICAgICBjb25zdCB7IG1lc3NhZ2UgLCBmaWxlbmFtZSAsIGxpbmVubyAsIGNvbG5vICwgZXJyb3IgIH0gPSBldmVudDsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBtZXNzYWdlLAogICAgICAgICAgICBmaWxlbmFtZSwKICAgICAgICAgICAgbGluZW5vLAogICAgICAgICAgICBjb2xubywKICAgICAgICAgICAgZXJyb3IKICAgICAgICB9OwogICAgfQogICAgcmV0dXJuIHVuZGVmaW5lZDsKfQpmdW5jdGlvbiBkdW1wTWVzc2FnZVByZXR0eShtZXNzYWdlLCBsb2dnZXIpIHsKICAgIGNvbnN0IHRpbWUgPSBmb3JtYXRMb2NhbFl5eXlNbURkSGhNbVNzKG5ldyBEYXRlKG1lc3NhZ2UuZXZlbnRUaW1lc3RhbXApKTsKICAgIGNvbnN0IG91dGNvbWUgPSBQUkVUVFlfT1VUQ09NRVMuZ2V0KG1lc3NhZ2Uub3V0Y29tZSkgfHwgbWVzc2FnZS5vdXRjb21lOwogICAgY29uc3Qgb3V0Y29tZUNvbG9yID0gbWVzc2FnZS5vdXRjb21lID09PSAnb2snID8gJ2dyZWVuJyA6ICdyZWQnOwogICAgaWYgKGlzVGFpbE1lc3NhZ2VDcm9uRXZlbnQobWVzc2FnZS5ldmVudCkpIHsKICAgICAgICBsb2dnZXIoYFslYyR7dGltZX0lY10gWyVjJD8/PyVjXSBbJWMke291dGNvbWV9JWNdICVjJHttZXNzYWdlLmV2ZW50LmNyb259YCwgJ2NvbG9yOiBncmF5JywgJycsICdjb2xvcjogZ3JheScsICcnLCBgY29sb3I6ICR7b3V0Y29tZUNvbG9yfWAsICcnLCAnY29sb3I6IHJlZDsgZm9udC1zdHlsZTogYm9sZDsnKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgeyBtZXRob2QgLCB1cmwgLCBjZiAgfSA9IG1lc3NhZ2UuZXZlbnQucmVxdWVzdDsKICAgICAgICBjb25zdCBjb2xvID0gY2Y/LmNvbG8gfHwgJz8/Pyc7CiAgICAgICAgbG9nZ2VyKGBbJWMke3RpbWV9JWNdIFslYyR7Y29sb30lY10gWyVjJHtvdXRjb21lfSVjXSAke21ldGhvZH0gJWMke3VybH1gLCAnY29sb3I6IGdyYXknLCAnJywgJ2NvbG9yOiBncmF5JywgJycsIGBjb2xvcjogJHtvdXRjb21lQ29sb3J9YCwgJycsICdjb2xvcjogcmVkOyBmb250LXN0eWxlOiBib2xkOycpOwogICAgfQogICAgZm9yIChjb25zdCB7IGxldmVsICwgbWVzc2FnZTogbG9nTWVzc2FnZSAgfSBvZiBtZXNzYWdlLmxvZ3MpewogICAgICAgIGNvbnN0IGxldmVsQ29sb3IgPSBMT0dfTEVWRUxfQ09MT1JTLmdldChsZXZlbCkgfHwgJ2dyYXknOwogICAgICAgIGxvZ2dlcihgICVjfCVjIFslYyR7bGV2ZWx9JWNdICR7bG9nTWVzc2FnZX1gLCAnY29sb3I6IGdyYXknLCAnJywgYGNvbG9yOiAke2xldmVsQ29sb3J9YCwgJycpOwogICAgfQogICAgZm9yIChjb25zdCB7IG5hbWUgLCBtZXNzYWdlOiBleGNlcHRpb25NZXNzYWdlICB9IG9mIG1lc3NhZ2UuZXhjZXB0aW9ucyl7CiAgICAgICAgbG9nZ2VyKGAgJWN8JWMgWyVjJHtuYW1lfSVjXSAlYyR7ZXhjZXB0aW9uTWVzc2FnZX1gLCAnY29sb3I6IGdyYXknLCAnJywgYGNvbG9yOiByZWQ7IGZvbnQtc3R5bGU6IGJvbGRgLCAnJywgJ2NvbG9yOiByZWQnKTsKICAgIH0KfQpmdW5jdGlvbiBwYWQyKG51bSkgewogICAgcmV0dXJuIG51bS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7Cn0KZnVuY3Rpb24gZm9ybWF0TG9jYWxZeXl5TW1EZEhoTW1TcyhkYXRlKSB7CiAgICByZXR1cm4gWwogICAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSwKICAgICAgICAnLScsCiAgICAgICAgcGFkMihkYXRlLmdldE1vbnRoKCkgKyAxKSwKICAgICAgICAnLScsCiAgICAgICAgcGFkMihkYXRlLmdldERhdGUoKSksCiAgICAgICAgJyAnLAogICAgICAgIHBhZDIoZGF0ZS5nZXRIb3VycygpKSwKICAgICAgICAnOicsCiAgICAgICAgcGFkMihkYXRlLmdldE1pbnV0ZXMoKSksCiAgICAgICAgJzonLAogICAgICAgIHBhZDIoZGF0ZS5nZXRTZWNvbmRzKCkpCiAgICBdLmpvaW4oJycpOwp9CmNvbnN0IFBSRVRUWV9PVVRDT01FUyA9IG5ldyBNYXAoWwogICAgWwogICAgICAgICdvaycsCiAgICAgICAgJ09rJwogICAgXSwKICAgIFsKICAgICAgICAnZXhjZXB0aW9uJywKICAgICAgICAnRXJyb3InCiAgICBdLAogICAgWwogICAgICAgICdleGNlZWRlZENwdScsCiAgICAgICAgJ0V4Y2VlZGVkIExpbWl0JwogICAgXSwKICAgIFsKICAgICAgICAnY2FuY2VsZWQnLAogICAgICAgICdDYW5jZWxlZCcKICAgIF0sCiAgICBbCiAgICAgICAgJ3Vua25vd24nLAogICAgICAgICdVbmtub3duJwogICAgXSwgCl0pOwpjb25zdCBMT0dfTEVWRUxfQ09MT1JTID0gbmV3IE1hcChbCiAgICBbCiAgICAgICAgJ3RyYWNlJywKICAgICAgICAnZ3JheScKICAgIF0sCiAgICBbCiAgICAgICAgJ2RlYnVnJywKICAgICAgICAncHVycGxlJwogICAgXSwKICAgIFsKICAgICAgICAnbG9nJywKICAgICAgICAnZ3JheScKICAgIF0sCiAgICBbCiAgICAgICAgJ2luZm8nLAogICAgICAgICdncmF5JwogICAgXSwKICAgIFsKICAgICAgICAnd2FybicsCiAgICAgICAgJ3JlZCcKICAgIF0sCiAgICBbCiAgICAgICAgJ2Vycm9yJywKICAgICAgICAncmVkJwogICAgXSwgCl0pOwpmdW5jdGlvbiB1cGRhdGVTaWRlYmFyVmlldyhkaXYsIHZtKSB7CiAgICB3aGlsZShkaXYuZmlyc3RDaGlsZClkaXYucmVtb3ZlQ2hpbGQoZGl2LmZpcnN0Q2hpbGQpOwogICAgZm9yIChjb25zdCBwcm9maWxlIG9mIHZtLnByb2ZpbGVzKXsKICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoY3JlYXRlQnV0dG9uKHByb2ZpbGUsIHZtKSk7CiAgICB9CiAgICBkaXYuYXBwZW5kQ2hpbGQoY3JlYXRlTmV3UHJvZmlsZUJ1dHRvbih2bSkpOwp9CmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbihwcm9maWxlLCB2bSkgewogICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgICBpZiAocHJvZmlsZS5pZCA9PT0gdm0uc2VsZWN0ZWRQcm9maWxlSWQpIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpOwogICAgYnV0dG9uLnRleHRDb250ZW50ID0gcHJvZmlsZS50ZXh0OwogICAgYnV0dG9uLmRhdGFzZXRbJ2lkJ10gPSBwcm9maWxlLmlkOwogICAgYnV0dG9uLm9uY2xpY2sgPSAoZSk9PnsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdm0uZWRpdFByb2ZpbGUocHJvZmlsZS5pZCk7CiAgICB9OwogICAgcmV0dXJuIGJ1dHRvbjsKfQpmdW5jdGlvbiBjcmVhdGVOZXdQcm9maWxlQnV0dG9uKHZtKSB7CiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICdOZXcgcHJvZmlsZS4uLic7CiAgICBidXR0b24ub25jbGljayA9IChlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2bS5uZXdQcm9maWxlKCk7CiAgICB9OwogICAgcmV0dXJuIGJ1dHRvbjsKfQpmdW5jdGlvbiBnZW5lcmF0ZVV1aWQoKSB7CiAgICBjb25zdCBjcnlwdG9Bc0FueSA9IGNyeXB0bzsKICAgIGlmICh0eXBlb2YgY3J5cHRvQXNBbnkucmFuZG9tVVVJRCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHJldHVybiBjcnlwdG9Bc0FueS5yYW5kb21VVUlEKCk7CiAgICB9CiAgICBjb25zdCBybmRzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxNikpOwogICAgcm5kc1s2XSA9IHJuZHNbNl0gJiAxNSB8IDY0OwogICAgcm5kc1s4XSA9IHJuZHNbOF0gJiA2MyB8IDEyODsKICAgIHJldHVybiBieXRlc1RvVXVpZChybmRzKTsKfQpmdW5jdGlvbiBieXRlc1RvVXVpZChieXRlcykgewogICAgY29uc3QgYml0cyA9IFsKICAgICAgICAuLi5ieXRlcwogICAgXS5tYXAoKGJpdCk9PnsKICAgICAgICBjb25zdCBzID0gYml0LnRvU3RyaW5nKDE2KTsKICAgICAgICByZXR1cm4gYml0IDwgMTYgPyAiMCIgKyBzIDogczsKICAgIH0pOwogICAgcmV0dXJuIFsKICAgICAgICAuLi5iaXRzLnNsaWNlKDAsIDQpLAogICAgICAgICItIiwKICAgICAgICAuLi5iaXRzLnNsaWNlKDQsIDYpLAogICAgICAgICItIiwKICAgICAgICAuLi5iaXRzLnNsaWNlKDYsIDgpLAogICAgICAgICItIiwKICAgICAgICAuLi5iaXRzLnNsaWNlKDgsIDEwKSwKICAgICAgICAiLSIsCiAgICAgICAgLi4uYml0cy5zbGljZSgxMCwgMTYpLCAKICAgIF0uam9pbigiIik7Cn0KY2xhc3MgVGFpbHdlYkFwcFZNIHsKICAgIHByb2ZpbGVzID0gW107CiAgICBzZWxlY3RlZFByb2ZpbGVJZDsKICAgIHByb2ZpbGVGb3JtID0gbmV3IFByb2ZpbGVGb3JtVk0oKTsKICAgIG1lc3NhZ2UgPSAnJzsKICAgIHN0YXRlID0gbG9hZFN0YXRlKCk7CiAgICBvbmNoYW5nZSA9ICgpPT57CiAgICB9OwogICAgY29uc3RydWN0b3IoKXsKICAgIH0KICAgIHN0YXJ0KCkgewogICAgICAgIHRoaXMucmVsb2FkUHJvZmlsZXMoKTsKICAgICAgICBpZiAodGhpcy5wcm9maWxlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRQcm9maWxlSWQgPSB0aGlzLnByb2ZpbGVzWzBdLmlkOwogICAgICAgIH0KICAgICAgICB0aGlzLm9uY2hhbmdlKCk7CiAgICB9CiAgICBuZXdQcm9maWxlKCkgewogICAgICAgIHRoaXMucHJvZmlsZUZvcm0ucHJvZmlsZUlkID0gZ2VuZXJhdGVVdWlkKCk7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5zaG93aW5nID0gdHJ1ZTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLm5hbWUgPSB0aGlzLnByb2ZpbGVzLmxlbmd0aCA9PT0gMCA/ICdkZWZhdWx0JyA6IGBwcm9maWxlJHt0aGlzLnByb2ZpbGVzLmxlbmd0aCArIDF9YDsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmFjY291bnRJZCA9ICcnOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uYXBpVG9rZW4gPSAnJzsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmRlbGV0ZVZpc2libGUgPSBmYWxzZTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmVuYWJsZWQgPSB0cnVlOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uY29tcHV0ZVNhdmVFbmFibGVkKCk7CiAgICAgICAgdGhpcy5vbmNoYW5nZSgpOwogICAgfQogICAgZWRpdFByb2ZpbGUocHJvZmlsZUlkKSB7CiAgICAgICAgY29uc3QgcHJvZmlsZSA9IHRoaXMuc3RhdGUucHJvZmlsZXNbcHJvZmlsZUlkXTsKICAgICAgICBpZiAoIXByb2ZpbGVJZCkgdGhyb3cgbmV3IEVycm9yKGBQcm9maWxlICR7cHJvZmlsZUlkfSBub3QgZm91bmRgKTsKICAgICAgICB0aGlzLnNlbGVjdGVkUHJvZmlsZUlkID0gcHJvZmlsZUlkOwogICAgICAgIGNvbnN0IHsgbmFtZSAsIGFjY291bnRJZCAsIGFwaVRva2VuICB9ID0gcHJvZmlsZTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLnByb2ZpbGVJZCA9IHByb2ZpbGVJZDsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLnNob3dpbmcgPSB0cnVlOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0ubmFtZSA9IG5hbWU7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5hY2NvdW50SWQgPSBhY2NvdW50SWQ7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5hcGlUb2tlbiA9IGFwaVRva2VuOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uZGVsZXRlVmlzaWJsZSA9IHRydWU7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5lbmFibGVkID0gdHJ1ZTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLmNvbXB1dGVTYXZlRW5hYmxlZCgpOwogICAgICAgIHRoaXMub25jaGFuZ2UoKTsKICAgIH0KICAgIGNhbmNlbFByb2ZpbGUoKSB7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5zaG93aW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy5vbmNoYW5nZSgpOwogICAgfQogICAgc2V0UHJvZmlsZU5hbWUobmFtZSkgewogICAgICAgIHRoaXMucHJvZmlsZUZvcm0ubmFtZSA9IG5hbWU7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5jb21wdXRlU2F2ZUVuYWJsZWQoKTsKICAgICAgICB0aGlzLm9uY2hhbmdlKCk7CiAgICB9CiAgICBzZXRQcm9maWxlQWNjb3VudElkKGFjY291bnRJZCkgewogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uYWNjb3VudElkID0gYWNjb3VudElkOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uY29tcHV0ZVNhdmVFbmFibGVkKCk7CiAgICAgICAgdGhpcy5vbmNoYW5nZSgpOwogICAgfQogICAgc2V0UHJvZmlsZUFwaVRva2VuKGFwaVRva2VuKSB7CiAgICAgICAgdGhpcy5wcm9maWxlRm9ybS5hcGlUb2tlbiA9IGFwaVRva2VuOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uY29tcHV0ZVNhdmVFbmFibGVkKCk7CiAgICAgICAgdGhpcy5vbmNoYW5nZSgpOwogICAgfQogICAgc2F2ZVByb2ZpbGUoKSB7CiAgICAgICAgY29uc3QgeyBwcm9maWxlSWQgIH0gPSB0aGlzLnByb2ZpbGVGb3JtOwogICAgICAgIHRoaXMuc3RhdGUucHJvZmlsZXNbcHJvZmlsZUlkXSA9IHsKICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9maWxlRm9ybS5uYW1lLnRyaW0oKSwKICAgICAgICAgICAgYWNjb3VudElkOiB0aGlzLnByb2ZpbGVGb3JtLmFjY291bnRJZC50cmltKCksCiAgICAgICAgICAgIGFwaVRva2VuOiB0aGlzLnByb2ZpbGVGb3JtLmFwaVRva2VuLnRyaW0oKQogICAgICAgIH07CiAgICAgICAgc2F2ZVN0YXRlKHRoaXMuc3RhdGUpOwogICAgICAgIHRoaXMucHJvZmlsZUZvcm0uc2hvd2luZyA9IGZhbHNlOwogICAgICAgIHRoaXMucmVsb2FkUHJvZmlsZXMoKTsKICAgICAgICB0aGlzLm9uY2hhbmdlKCk7CiAgICB9CiAgICBkZWxldGVQcm9maWxlKCkgewogICAgICAgIGNvbnN0IHsgcHJvZmlsZUlkICB9ID0gdGhpcy5wcm9maWxlRm9ybTsKICAgICAgICBkZWxldGUgdGhpcy5zdGF0ZS5wcm9maWxlc1twcm9maWxlSWRdOwogICAgICAgIHNhdmVTdGF0ZSh0aGlzLnN0YXRlKTsKICAgICAgICB0aGlzLnByb2ZpbGVGb3JtLnNob3dpbmcgPSBmYWxzZTsKICAgICAgICB0aGlzLnJlbG9hZFByb2ZpbGVzKCk7CiAgICAgICAgdGhpcy5vbmNoYW5nZSgpOwogICAgfQogICAgcmVsb2FkUHJvZmlsZXMoKSB7CiAgICAgICAgY29uc3QgeyBzdGF0ZSAgfSA9IHRoaXM7CiAgICAgICAgdGhpcy5wcm9maWxlcy5zcGxpY2UoMCk7CiAgICAgICAgZm9yIChjb25zdCBbcHJvZmlsZUlkLCBwcm9maWxlXSBvZiBPYmplY3QuZW50cmllcyhzdGF0ZS5wcm9maWxlcykpewogICAgICAgICAgICBjb25zdCBuYW1lID0gcHJvZmlsZS5uYW1lIHx8ICcodW5uYW1lZCknOwogICAgICAgICAgICB0aGlzLnByb2ZpbGVzLnB1c2goewogICAgICAgICAgICAgICAgaWQ6IHByb2ZpbGVJZCwKICAgICAgICAgICAgICAgIHRleHQ6IG5hbWUKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQp9CmNsYXNzIFByb2ZpbGVGb3JtVk0gewogICAgc2hvd2luZyA9IGZhbHNlOwogICAgZW5hYmxlZCA9IGZhbHNlOwogICAgbmFtZSA9ICcnOwogICAgYWNjb3VudElkID0gJyc7CiAgICBhcGlUb2tlbiA9ICcnOwogICAgZGVsZXRlVmlzaWJsZSA9IGZhbHNlOwogICAgc2F2ZUVuYWJsZWQgPSBmYWxzZTsKICAgIHByb2ZpbGVJZCA9ICcnOwogICAgY29tcHV0ZVNhdmVFbmFibGVkKCkgewogICAgICAgIHRoaXMuc2F2ZUVuYWJsZWQgPSB0aGlzLm5hbWUudHJpbSgpLmxlbmd0aCA+IDAgJiYgdGhpcy5hcGlUb2tlbi50cmltKCkubGVuZ3RoID4gMCAmJiB0aGlzLmFjY291bnRJZC50cmltKCkubGVuZ3RoID4gMDsKICAgIH0KfQpjb25zdCBTVEFURV9LRVkgPSAnc3RhdGUxJzsKZnVuY3Rpb24gbG9hZFN0YXRlKCkgewogICAgdHJ5IHsKICAgICAgICBjb25zdCBqc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU1RBVEVfS0VZKSB8fCB1bmRlZmluZWQ7CiAgICAgICAgaWYgKGpzb24pIHsKICAgICAgICAgICAgY29uc3QgcnQgPSBKU09OLnBhcnNlKGpzb24pOwogICAgICAgICAgICByZXR1cm4gcGFyc2VTdGF0ZShydCk7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybignbG9hZFN0YXRlOiBFcnJvciBsb2FkaW5nIHN0YXRlJywgZSk7CiAgICB9CiAgICBjb25zb2xlLmxvZygnbG9hZFN0YXRlOiByZXR1cm5pbmcgbmV3IHN0YXRlJyk7CiAgICByZXR1cm4gewogICAgICAgIHByb2ZpbGVzOiB7CiAgICAgICAgfQogICAgfTsKfQpmdW5jdGlvbiBwYXJzZVN0YXRlKHBhcnNlZCkgewogICAgaWYgKHR5cGVvZiBwYXJzZWQgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG9iamVjdGApOwogICAgY29uc3QgeyBwcm9maWxlcyAgfSA9IHBhcnNlZDsKICAgIGlmICh0eXBlb2YgcHJvZmlsZXMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHByb2ZpbGVzIG9iamVjdGApOwogICAgZm9yIChjb25zdCBbcHJvZmlsZUlkLCBwcm9maWxlU3RhdGVdIG9mIE9iamVjdC5lbnRyaWVzKHByb2ZpbGVzKSl7CiAgICAgICAgaWYgKHR5cGVvZiBwcm9maWxlSWQgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb2ZpbGUgaWQgbXVzdCBiZSBzdHJpbmcnKTsKICAgICAgICBwYXJzZVByb2ZpbGVTdGF0ZShwcm9maWxlU3RhdGUpOwogICAgfQogICAgcmV0dXJuIHBhcnNlZDsKfQpmdW5jdGlvbiBwYXJzZVByb2ZpbGVTdGF0ZShwYXJzZWQpIHsKICAgIGlmICh0eXBlb2YgcGFyc2VkICE9PSAnb2JqZWN0JyB8fCBwYXJzZWQgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignUHJvZmlsZSBzdGF0ZSBtdXN0IGJlIG9iamVjdCcpOwogICAgY29uc3QgeyBuYW1lICwgYWNjb3VudElkICwgYXBpVG9rZW4gIH0gPSBwYXJzZWQ7CiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUudHJpbSgpLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKGBQcm9maWxlIHN0YXRlIG5hbWUgbXVzdCBleGlzdGApOwogICAgaWYgKHR5cGVvZiBhY2NvdW50SWQgIT09ICdzdHJpbmcnIHx8IGFjY291bnRJZC50cmltKCkubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoYFByb2ZpbGUgc3RhdGUgYWNjb3VudElkIG11c3QgZXhpc3RgKTsKICAgIGlmICh0eXBlb2YgYXBpVG9rZW4gIT09ICdzdHJpbmcnIHx8IGFwaVRva2VuLnRyaW0oKS5sZW5ndGggPT09IDApIHRocm93IG5ldyBFcnJvcihgUHJvZmlsZSBzdGF0ZSBhcGlUb2tlbiBtdXN0IGV4aXN0YCk7CiAgICByZXR1cm4gcGFyc2VkOwp9CmZ1bmN0aW9uIHNhdmVTdGF0ZShzdGF0ZSkgewogICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RBVEVfS0VZLCBKU09OLnN0cmluZ2lmeShzdGF0ZSkpOwp9CmNvbnN0IGRpcmVjdGl2ZXMgPSBuZXcgV2Vha01hcCgpOwpjb25zdCBkaXJlY3RpdmUgPSAoZik9PiguLi5hcmdzKT0+ewogICAgICAgIGNvbnN0IGQgPSBmKC4uLmFyZ3MpOwogICAgICAgIGRpcmVjdGl2ZXMuc2V0KGQsIHRydWUpOwogICAgICAgIHJldHVybiBkOwogICAgfQo7CmNvbnN0IGlzRGlyZWN0aXZlID0gKG8pPT57CiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICJmdW5jdGlvbiIgJiYgZGlyZWN0aXZlcy5oYXMobyk7Cn07CmNvbnN0IGlzQ0VQb2x5ZmlsbCA9IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiICYmIHdpbmRvdy5jdXN0b21FbGVtZW50cyAhPSBudWxsICYmIHdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrICE9PSB2b2lkIDA7CmNvbnN0IHJlcGFyZW50Tm9kZXMgPSAoY29udGFpbmVyLCBzdGFydCwgZW5kID0gbnVsbCwgYmVmb3JlID0gbnVsbCk9PnsKICAgIHdoaWxlKHN0YXJ0ICE9PSBlbmQpewogICAgICAgIGNvbnN0IG4gPSBzdGFydC5uZXh0U2libGluZzsKICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHN0YXJ0LCBiZWZvcmUpOwogICAgICAgIHN0YXJ0ID0gbjsKICAgIH0KfTsKY29uc3QgcmVtb3ZlTm9kZXMgPSAoY29udGFpbmVyLCBzdGFydCwgZW5kID0gbnVsbCk9PnsKICAgIHdoaWxlKHN0YXJ0ICE9PSBlbmQpewogICAgICAgIGNvbnN0IG4gPSBzdGFydC5uZXh0U2libGluZzsKICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoc3RhcnQpOwogICAgICAgIHN0YXJ0ID0gbjsKICAgIH0KfTsKY29uc3Qgbm9DaGFuZ2UgPSB7Cn07CmNvbnN0IG5vdGhpbmcgPSB7Cn07CmNvbnN0IG1hcmtlciA9IGB7e2xpdC0ke1N0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKX19fWA7CmNvbnN0IG5vZGVNYXJrZXIgPSBgPCEtLSR7bWFya2VyfS0tPmA7CmNvbnN0IG1hcmtlclJlZ2V4ID0gbmV3IFJlZ0V4cChgJHttYXJrZXJ9fCR7bm9kZU1hcmtlcn1gKTsKY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAiJGxpdCQiOwpjbGFzcyBUZW1wbGF0ZSB7CiAgICBjb25zdHJ1Y3RvcihyZXN1bHQsIGVsZW1lbnQ1KXsKICAgICAgICB0aGlzLnBhcnRzID0gW107CiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDU7CiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdOwogICAgICAgIGNvbnN0IHN0YWNrID0gW107CiAgICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50NS5jb250ZW50LCAxMzMsIG51bGwsIGZhbHNlKTsKICAgICAgICBsZXQgbGFzdFBhcnRJbmRleCA9IDA7CiAgICAgICAgbGV0IGluZGV4ID0gLTE7CiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7CiAgICAgICAgY29uc3QgeyBzdHJpbmdzOiBzdHJpbmdzNSAsIHZhbHVlczogeyBsZW5ndGggIH0gIH0gPSByZXN1bHQ7CiAgICAgICAgd2hpbGUocGFydEluZGV4IDwgbGVuZ3RoKXsKICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpOwogICAgICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gc3RhY2sucG9wKCk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbmRleCsrOwogICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkgewogICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlczsKICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxlbmd0aDogbGVuZ3RoMiAgfSA9IGF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZHNXaXRoKGF0dHJpYnV0ZXNbaV0ubmFtZSwgYm91bmRBdHRyaWJ1dGVTdWZmaXgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHdoaWxlKGNvdW50LS0gPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nRm9yUGFydCA9IHN0cmluZ3M1W3BhcnRJbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMoc3RyaW5nRm9yUGFydClbMl07CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZUxvb2t1cE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkgKyBib3VuZEF0dHJpYnV0ZVN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRpY3MgPSBhdHRyaWJ1dGVWYWx1ZS5zcGxpdChtYXJrZXJSZWdleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXR0cmlidXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3M6IHN0YXRpY3MKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBzdGF0aWNzLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gIlRFTVBMQVRFIikgewogICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gbm9kZS5jb250ZW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzMiA9IGRhdGEuc3BsaXQobWFya2VyUmVnZXgpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0cmluZ3MyLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc2VydDsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSBzdHJpbmdzMltpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBjcmVhdGVNYXJrZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIGVuZHNXaXRoKG1hdGNoWzJdLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gcy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyBtYXRjaFsxXSArIG1hdGNoWzJdLnNsaWNlKDAsIC1ib3VuZEF0dHJpYnV0ZVN1ZmZpeC5sZW5ndGgpICsgbWF0Y2hbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGluc2VydCwgbm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibm9kZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogKytpbmRleAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3MyW2xhc3RJbmRleF0gPT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gc3RyaW5nczJbbGFzdEluZGV4XTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IGxhc3RJbmRleDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSA4KSB7CiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSBtYXJrZXIpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsIHx8IGluZGV4ID09PSBsYXN0UGFydEluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsYXN0UGFydEluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIm5vZGUiLAogICAgICAgICAgICAgICAgICAgICAgICBpbmRleAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9ICIiOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGxldCBpID0gLTE7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUoKGkgPSBub2RlLmRhdGEuaW5kZXhPZihtYXJrZXIsIGkgKyAxKSkgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJub2RlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAtMQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAoY29uc3QgbiBvZiBub2Rlc1RvUmVtb3ZlKXsKICAgICAgICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pOwogICAgICAgIH0KICAgIH0KfQpjb25zdCBlbmRzV2l0aCA9IChzdHIsIHN1ZmZpeCk9PnsKICAgIGNvbnN0IGluZGV4MSA9IHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoOwogICAgcmV0dXJuIGluZGV4MSA+PSAwICYmIHN0ci5zbGljZShpbmRleDEpID09PSBzdWZmaXg7Cn07CmNvbnN0IGlzVGVtcGxhdGVQYXJ0QWN0aXZlID0gKHBhcnQpPT5wYXJ0LmluZGV4ICE9PSAtMQo7CmNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpPT5kb2N1bWVudC5jcmVhdGVDb21tZW50KCIiKQo7CmNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPSAvKFsgXHgwOVx4MGFceDBjXHgwZF0pKFteXDAtXHgxRlx4N0YtXHg5RiAiJz49L10rKShbIFx4MDlceDBhXHgwY1x4MGRdKj1bIFx4MDlceDBhXHgwY1x4MGRdKig/OlteIFx4MDlceDBhXHgwY1x4MGQiJ2A8Pj1dKnwiW14iXSp8J1teJ10qKSkkLzsKY2xhc3MgVGVtcGxhdGVJbnN0YW5jZSB7CiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgcHJvY2Vzc29yLCBvcHRpb25zMil7CiAgICAgICAgdGhpcy5fX3BhcnRzID0gW107CiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlOwogICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yOwogICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMyOwogICAgfQogICAgdXBkYXRlKHZhbHVlcykgewogICAgICAgIGxldCBpID0gMDsKICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKXsKICAgICAgICAgICAgaWYgKHBhcnQgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgcGFydC5zZXRWYWx1ZSh2YWx1ZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkrKzsKICAgICAgICB9CiAgICAgICAgZm9yIChjb25zdCBwYXJ0MSBvZiB0aGlzLl9fcGFydHMpewogICAgICAgICAgICBpZiAocGFydDEgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgcGFydDEuY29tbWl0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBfY2xvbmUoKSB7CiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpc0NFUG9seWZpbGwgPyB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgOiBkb2N1bWVudC5pbXBvcnROb2RlKHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LCB0cnVlKTsKICAgICAgICBjb25zdCBzdGFjazEgPSBbXTsKICAgICAgICBjb25zdCBwYXJ0czIgPSB0aGlzLnRlbXBsYXRlLnBhcnRzOwogICAgICAgIGNvbnN0IHdhbGtlcjEgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGZyYWdtZW50LCAxMzMsIG51bGwsIGZhbHNlKTsKICAgICAgICBsZXQgcGFydEluZGV4MSA9IDA7CiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7CiAgICAgICAgbGV0IHBhcnQ7CiAgICAgICAgbGV0IG5vZGUgPSB3YWxrZXIxLm5leHROb2RlKCk7CiAgICAgICAgd2hpbGUocGFydEluZGV4MSA8IHBhcnRzMi5sZW5ndGgpewogICAgICAgICAgICBwYXJ0ID0gcGFydHMyW3BhcnRJbmRleDFdOwogICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaCh2b2lkIDApOwogICAgICAgICAgICAgICAgcGFydEluZGV4MSsrOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUobm9kZUluZGV4IDwgcGFydC5pbmRleCl7CiAgICAgICAgICAgICAgICBub2RlSW5kZXgrKzsKICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAiVEVNUExBVEUiKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhY2sxLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyMS5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgobm9kZSA9IHdhbGtlcjEubmV4dE5vZGUoKSkgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICB3YWxrZXIxLmN1cnJlbnROb2RlID0gc3RhY2sxLnBvcCgpOwogICAgICAgICAgICAgICAgICAgIG5vZGUgPSB3YWxrZXIxLm5leHROb2RlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gIm5vZGUiKSB7CiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0MiA9IHRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7CiAgICAgICAgICAgICAgICBwYXJ0Mi5pbnNlcnRBZnRlck5vZGUobm9kZS5wcmV2aW91c1NpYmxpbmcpOwogICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2gocGFydDIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMobm9kZSwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcnRJbmRleDErKzsKICAgICAgICB9CiAgICAgICAgaWYgKGlzQ0VQb2x5ZmlsbCkgewogICAgICAgICAgICBkb2N1bWVudC5hZG9wdE5vZGUoZnJhZ21lbnQpOwogICAgICAgICAgICBjdXN0b21FbGVtZW50cy51cGdyYWRlKGZyYWdtZW50KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZyYWdtZW50OwogICAgfQp9CmNvbnN0IHBvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMgJiYgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgibGl0LWh0bWwiLCB7CiAgICBjcmVhdGVIVE1MOiAocyk9PnMKfSk7CmNvbnN0IGNvbW1lbnRNYXJrZXIgPSBgICR7bWFya2VyfSBgOwpjbGFzcyBUZW1wbGF0ZVJlc3VsdCB7CiAgICBjb25zdHJ1Y3RvcihzdHJpbmdzMSwgdmFsdWVzLCB0eXBlMSwgcHJvY2Vzc29yMSl7CiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5nczE7CiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7CiAgICAgICAgdGhpcy50eXBlID0gdHlwZTE7CiAgICAgICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3IxOwogICAgfQogICAgZ2V0SFRNTCgpIHsKICAgICAgICBjb25zdCBsID0gdGhpcy5zdHJpbmdzLmxlbmd0aCAtIDE7CiAgICAgICAgbGV0IGh0bWwyID0gIiI7CiAgICAgICAgbGV0IGlzQ29tbWVudEJpbmRpbmcgPSBmYWxzZTsKICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuc3RyaW5nc1tpXTsKICAgICAgICAgICAgY29uc3QgY29tbWVudE9wZW4gPSBzLmxhc3RJbmRleE9mKCI8IS0tIik7CiAgICAgICAgICAgIGlzQ29tbWVudEJpbmRpbmcgPSAoY29tbWVudE9wZW4gPiAtMSB8fCBpc0NvbW1lbnRCaW5kaW5nKSAmJiBzLmluZGV4T2YoIi0tPiIsIGNvbW1lbnRPcGVuICsgMSkgPT09IC0xOwogICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVNYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTsKICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU1hdGNoID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICBodG1sMiArPSBzICsgKGlzQ29tbWVudEJpbmRpbmcgPyBjb21tZW50TWFya2VyIDogbm9kZU1hcmtlcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBodG1sMiArPSBzLnN1YnN0cigwLCBhdHRyaWJ1dGVNYXRjaC5pbmRleCkgKyBhdHRyaWJ1dGVNYXRjaFsxXSArIGF0dHJpYnV0ZU1hdGNoWzJdICsgYm91bmRBdHRyaWJ1dGVTdWZmaXggKyBhdHRyaWJ1dGVNYXRjaFszXSArIG1hcmtlcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBodG1sMiArPSB0aGlzLnN0cmluZ3NbbF07CiAgICAgICAgcmV0dXJuIGh0bWwyOwogICAgfQogICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkgewogICAgICAgIGNvbnN0IHRlbXBsYXRlMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIik7CiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRIVE1MKCk7CiAgICAgICAgaWYgKHBvbGljeSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHZhbHVlID0gcG9saWN5LmNyZWF0ZUhUTUwodmFsdWUpOwogICAgICAgIH0KICAgICAgICB0ZW1wbGF0ZTEuaW5uZXJIVE1MID0gdmFsdWU7CiAgICAgICAgcmV0dXJuIHRlbXBsYXRlMTsKICAgIH0KfQpjbGFzcyBTVkdUZW1wbGF0ZVJlc3VsdCBleHRlbmRzIFRlbXBsYXRlUmVzdWx0IHsKICAgIGdldEhUTUwoKSB7CiAgICAgICAgcmV0dXJuIGA8c3ZnPiR7c3VwZXIuZ2V0SFRNTCgpfTwvc3ZnPmA7CiAgICB9CiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7CiAgICAgICAgY29uc3QgdGVtcGxhdGUxID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7CiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlMS5jb250ZW50OwogICAgICAgIGNvbnN0IHN2Z0VsZW1lbnQgPSBjb250ZW50LmZpcnN0Q2hpbGQ7CiAgICAgICAgY29udGVudC5yZW1vdmVDaGlsZChzdmdFbGVtZW50KTsKICAgICAgICByZXBhcmVudE5vZGVzKGNvbnRlbnQsIHN2Z0VsZW1lbnQuZmlyc3RDaGlsZCk7CiAgICAgICAgcmV0dXJuIHRlbXBsYXRlMTsKICAgIH0KfQpjb25zdCBpc1ByaW1pdGl2ZSA9ICh2YWx1ZSk9PnsKICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAhKHR5cGVvZiB2YWx1ZSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iKTsKfTsKY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZSk9PnsKICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCAhISh2YWx1ZSAmJiB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKTsKfTsKY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHsKICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQxLCBuYW1lMywgc3RyaW5nczIpewogICAgICAgIHRoaXMuZGlydHkgPSB0cnVlOwogICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQxOwogICAgICAgIHRoaXMubmFtZSA9IG5hbWUzOwogICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3MyOwogICAgICAgIHRoaXMucGFydHMgPSBbXTsKICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc3RyaW5nczIubGVuZ3RoIC0gMTsgaSsrKXsKICAgICAgICAgICAgdGhpcy5wYXJ0c1tpXSA9IHRoaXMuX2NyZWF0ZVBhcnQoKTsKICAgICAgICB9CiAgICB9CiAgICBfY3JlYXRlUGFydCgpIHsKICAgICAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZVBhcnQodGhpcyk7CiAgICB9CiAgICBfZ2V0VmFsdWUoKSB7CiAgICAgICAgY29uc3Qgc3RyaW5nczMgPSB0aGlzLnN0cmluZ3M7CiAgICAgICAgY29uc3QgbCA9IHN0cmluZ3MzLmxlbmd0aCAtIDE7CiAgICAgICAgY29uc3QgcGFydHMyID0gdGhpcy5wYXJ0czsKICAgICAgICBpZiAobCA9PT0gMSAmJiBzdHJpbmdzM1swXSA9PT0gIiIgJiYgc3RyaW5nczNbMV0gPT09ICIiKSB7CiAgICAgICAgICAgIGNvbnN0IHYgPSBwYXJ0czJbMF0udmFsdWU7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gInN5bWJvbCIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAic3RyaW5nIiB8fCAhaXNJdGVyYWJsZSh2KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHY7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHRleHQgPSAiIjsKICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBsOyBpMSsrKXsKICAgICAgICAgICAgdGV4dCArPSBzdHJpbmdzM1tpMV07CiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0czJbaTFdOwogICAgICAgICAgICBpZiAocGFydCAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBjb25zdCB2ID0gcGFydC52YWx1ZTsKICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2KSB8fCAhaXNJdGVyYWJsZSh2KSkgewogICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHYgPT09ICJzdHJpbmciID8gdiA6IFN0cmluZyh2KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHYpewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB0ID09PSAic3RyaW5nIiA/IHQgOiBTdHJpbmcodCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRleHQgKz0gc3RyaW5nczNbbF07CiAgICAgICAgcmV0dXJuIHRleHQ7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHsKICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy5fZ2V0VmFsdWUoKSk7CiAgICAgICAgfQogICAgfQp9CmNsYXNzIEF0dHJpYnV0ZVBhcnQgewogICAgY29uc3RydWN0b3IoY29tbWl0dGVyKXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuY29tbWl0dGVyID0gY29tbWl0dGVyOwogICAgfQogICAgc2V0VmFsdWUodmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUgIT09IG5vQ2hhbmdlICYmICghaXNQcmltaXRpdmUodmFsdWUpIHx8IHZhbHVlICE9PSB0aGlzLnZhbHVlKSkgewogICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbW1pdHRlci5kaXJ0eSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgd2hpbGUoaXNEaXJlY3RpdmUodGhpcy52YWx1ZSkpewogICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUyID0gdGhpcy52YWx1ZTsKICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlOwogICAgICAgICAgICBkaXJlY3RpdmUyKHRoaXMpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLmNvbW1pdHRlci5jb21taXQoKTsKICAgIH0KfQpjbGFzcyBOb2RlUGFydCB7CiAgICBjb25zdHJ1Y3RvcihvcHRpb25zMSl7CiAgICAgICAgdGhpcy52YWx1ZSA9IHZvaWQgMDsKICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMxOwogICAgfQogICAgYXBwZW5kSW50byhjb250YWluZXIpIHsKICAgICAgICB0aGlzLnN0YXJ0Tm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7CiAgICAgICAgdGhpcy5lbmROb2RlID0gY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU1hcmtlcigpKTsKICAgIH0KICAgIGluc2VydEFmdGVyTm9kZShyZWYpIHsKICAgICAgICB0aGlzLnN0YXJ0Tm9kZSA9IHJlZjsKICAgICAgICB0aGlzLmVuZE5vZGUgPSByZWYubmV4dFNpYmxpbmc7CiAgICB9CiAgICBhcHBlbmRJbnRvUGFydChwYXJ0KSB7CiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTsKICAgICAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuZW5kTm9kZSA9IGNyZWF0ZU1hcmtlcigpKTsKICAgIH0KICAgIGluc2VydEFmdGVyUGFydChyZWYpIHsKICAgICAgICByZWYuX19pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7CiAgICAgICAgdGhpcy5lbmROb2RlID0gcmVmLmVuZE5vZGU7CiAgICAgICAgcmVmLmVuZE5vZGUgPSB0aGlzLnN0YXJ0Tm9kZTsKICAgIH0KICAgIHNldFZhbHVlKHZhbHVlKSB7CiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlOwogICAgfQogICAgY29tbWl0KCkgewogICAgICAgIGlmICh0aGlzLnN0YXJ0Tm9kZS5wYXJlbnROb2RlID09PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgd2hpbGUoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpewogICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTsKICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlOwogICAgICAgICAgICBkaXJlY3RpdmUyKHRoaXMpOwogICAgICAgIH0KICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgaWYgKHZhbHVlID09PSBub0NoYW5nZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHsKICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZXN1bHQpIHsKICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZSkgewogICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZSh2YWx1ZSk7CiAgICAgICAgfSBlbHNlIGlmIChpc0l0ZXJhYmxlKHZhbHVlKSkgewogICAgICAgICAgICB0aGlzLl9fY29tbWl0SXRlcmFibGUodmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IG5vdGhpbmcpIHsKICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vdGhpbmc7CiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgX19pbnNlcnQobm9kZSkgewogICAgICAgIHRoaXMuZW5kTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpOwogICAgfQogICAgX19jb21taXROb2RlKHZhbHVlKSB7CiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGhpcy5jbGVhcigpOwogICAgICAgIHRoaXMuX19pbnNlcnQodmFsdWUpOwogICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTsKICAgIH0KICAgIF9fY29tbWl0VGV4dCh2YWx1ZSkgewogICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZS5uZXh0U2libGluZzsKICAgICAgICB2YWx1ZSA9IHZhbHVlID09IG51bGwgPyAiIiA6IHZhbHVlOwogICAgICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpOwogICAgICAgIGlmIChub2RlID09PSB0aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nICYmIG5vZGUubm9kZVR5cGUgPT09IDMpIHsKICAgICAgICAgICAgbm9kZS5kYXRhID0gdmFsdWVBc1N0cmluZzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZUFzU3RyaW5nKSk7CiAgICAgICAgfQogICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTsKICAgIH0KICAgIF9fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUpIHsKICAgICAgICBjb25zdCB0ZW1wbGF0ZTEgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGVGYWN0b3J5KHZhbHVlKTsKICAgICAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgJiYgdGhpcy52YWx1ZS50ZW1wbGF0ZSA9PT0gdGVtcGxhdGUxKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUudXBkYXRlKHZhbHVlLnZhbHVlcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGVJbnN0YW5jZSh0ZW1wbGF0ZTEsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy5vcHRpb25zKTsKICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpbnN0YW5jZS5fY2xvbmUoKTsKICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKHZhbHVlLnZhbHVlcyk7CiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKGZyYWdtZW50KTsKICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGluc3RhbmNlOwogICAgICAgIH0KICAgIH0KICAgIF9fY29tbWl0SXRlcmFibGUodmFsdWUpIHsKICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHsKICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdOwogICAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMudmFsdWU7CiAgICAgICAgbGV0IHBhcnRJbmRleDEgPSAwOwogICAgICAgIGxldCBpdGVtUGFydDsKICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpewogICAgICAgICAgICBpdGVtUGFydCA9IGl0ZW1QYXJ0c1twYXJ0SW5kZXgxXTsKICAgICAgICAgICAgaWYgKGl0ZW1QYXJ0ID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMub3B0aW9ucyk7CiAgICAgICAgICAgICAgICBpdGVtUGFydHMucHVzaChpdGVtUGFydCk7CiAgICAgICAgICAgICAgICBpZiAocGFydEluZGV4MSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGl0ZW1QYXJ0LmFwcGVuZEludG9QYXJ0KHRoaXMpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5pbnNlcnRBZnRlclBhcnQoaXRlbVBhcnRzW3BhcnRJbmRleDEgLSAxXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaXRlbVBhcnQuc2V0VmFsdWUoaXRlbSk7CiAgICAgICAgICAgIGl0ZW1QYXJ0LmNvbW1pdCgpOwogICAgICAgICAgICBwYXJ0SW5kZXgxKys7CiAgICAgICAgfQogICAgICAgIGlmIChwYXJ0SW5kZXgxIDwgaXRlbVBhcnRzLmxlbmd0aCkgewogICAgICAgICAgICBpdGVtUGFydHMubGVuZ3RoID0gcGFydEluZGV4MTsKICAgICAgICAgICAgdGhpcy5jbGVhcihpdGVtUGFydCAmJiBpdGVtUGFydC5lbmROb2RlKTsKICAgICAgICB9CiAgICB9CiAgICBjbGVhcihzdGFydE5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSkgewogICAgICAgIHJlbW92ZU5vZGVzKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUsIHN0YXJ0Tm9kZS5uZXh0U2libGluZywgdGhpcy5lbmROb2RlKTsKICAgIH0KfQpjbGFzcyBCb29sZWFuQXR0cmlidXRlUGFydCB7CiAgICBjb25zdHJ1Y3RvcihlbGVtZW50MiwgbmFtZTEsIHN0cmluZ3MzKXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgaWYgKHN0cmluZ3MzLmxlbmd0aCAhPT0gMiB8fCBzdHJpbmdzM1swXSAhPT0gIiIgfHwgc3RyaW5nczNbMV0gIT09ICIiKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQm9vbGVhbiBhdHRyaWJ1dGVzIGNhbiBvbmx5IGNvbnRhaW4gYSBzaW5nbGUgZXhwcmVzc2lvbiIpOwogICAgICAgIH0KICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50MjsKICAgICAgICB0aGlzLm5hbWUgPSBuYW1lMTsKICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzMzsKICAgIH0KICAgIHNldFZhbHVlKHZhbHVlKSB7CiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlOwogICAgfQogICAgY29tbWl0KCkgewogICAgICAgIHdoaWxlKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKXsKICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlMiA9IHRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgICAgICAgICAgZGlyZWN0aXZlMih0aGlzKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdmFsdWUgPSAhIXRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsICIiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICAgICAgfQogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgIH0KfQpjbGFzcyBQcm9wZXJ0eUNvbW1pdHRlciBleHRlbmRzIEF0dHJpYnV0ZUNvbW1pdHRlciB7CiAgICBjb25zdHJ1Y3RvcihlbGVtZW50MywgbmFtZTIsIHN0cmluZ3M0KXsKICAgICAgICBzdXBlcihlbGVtZW50MywgbmFtZTIsIHN0cmluZ3M0KTsKICAgICAgICB0aGlzLnNpbmdsZSA9IHN0cmluZ3M0Lmxlbmd0aCA9PT0gMiAmJiBzdHJpbmdzNFswXSA9PT0gIiIgJiYgc3RyaW5nczRbMV0gPT09ICIiOwogICAgfQogICAgX2NyZWF0ZVBhcnQoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVBhcnQodGhpcyk7CiAgICB9CiAgICBfZ2V0VmFsdWUoKSB7CiAgICAgICAgaWYgKHRoaXMuc2luZ2xlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VwZXIuX2dldFZhbHVlKCk7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHsKICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXSA9IHRoaXMuX2dldFZhbHVlKCk7CiAgICAgICAgfQogICAgfQp9CmNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQgewp9CmxldCBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTsKKCgpPT57CiAgICB0cnkgewogICAgICAgIGNvbnN0IG9wdGlvbnMyID0gewogICAgICAgICAgICBnZXQgY2FwdHVyZSAoKSB7CiAgICAgICAgICAgICAgICBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigidGVzdCIsIG9wdGlvbnMyLCBvcHRpb25zMik7CiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoInRlc3QiLCBvcHRpb25zMiwgb3B0aW9uczIpOwogICAgfSBjYXRjaCAoX2UpIHsKICAgIH0KfSkoKTsKY2xhc3MgRXZlbnRQYXJ0IHsKICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ0LCBldmVudE5hbWUsIGV2ZW50Q29udGV4dCl7CiAgICAgICAgdGhpcy52YWx1ZSA9IHZvaWQgMDsKICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ0OwogICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lOwogICAgICAgIHRoaXMuZXZlbnRDb250ZXh0ID0gZXZlbnRDb250ZXh0OwogICAgICAgIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50ID0gKGUpPT50aGlzLmhhbmRsZUV2ZW50KGUpCiAgICAgICAgOwogICAgfQogICAgc2V0VmFsdWUodmFsdWUpIHsKICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgd2hpbGUoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpewogICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTsKICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlOwogICAgICAgICAgICBkaXJlY3RpdmUyKHRoaXMpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdMaXN0ZW5lciA9IHRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgY29uc3Qgb2xkTGlzdGVuZXIgPSB0aGlzLnZhbHVlOwogICAgICAgIGNvbnN0IHNob3VsZFJlbW92ZUxpc3RlbmVyID0gbmV3TGlzdGVuZXIgPT0gbnVsbCB8fCBvbGRMaXN0ZW5lciAhPSBudWxsICYmIChuZXdMaXN0ZW5lci5jYXB0dXJlICE9PSBvbGRMaXN0ZW5lci5jYXB0dXJlIHx8IG5ld0xpc3RlbmVyLm9uY2UgIT09IG9sZExpc3RlbmVyLm9uY2UgfHwgbmV3TGlzdGVuZXIucGFzc2l2ZSAhPT0gb2xkTGlzdGVuZXIucGFzc2l2ZSk7CiAgICAgICAgY29uc3Qgc2hvdWxkQWRkTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciAhPSBudWxsICYmIChvbGRMaXN0ZW5lciA9PSBudWxsIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTsKICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlTGlzdGVuZXIpIHsKICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50LCB0aGlzLl9fb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIGlmIChzaG91bGRBZGRMaXN0ZW5lcikgewogICAgICAgICAgICB0aGlzLl9fb3B0aW9ucyA9IGdldE9wdGlvbnMobmV3TGlzdGVuZXIpOwogICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTsKICAgICAgICB9CiAgICAgICAgdGhpcy52YWx1ZSA9IG5ld0xpc3RlbmVyOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgIH0KICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7CiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUuY2FsbCh0aGlzLmV2ZW50Q29udGV4dCB8fCB0aGlzLmVsZW1lbnQsIGV2ZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnZhbHVlLmhhbmRsZUV2ZW50KGV2ZW50KTsKICAgICAgICB9CiAgICB9Cn0KY29uc3QgZ2V0T3B0aW9ucyA9IChvKT0+byAmJiAoZXZlbnRPcHRpb25zU3VwcG9ydGVkID8gewogICAgICAgIGNhcHR1cmU6IG8uY2FwdHVyZSwKICAgICAgICBwYXNzaXZlOiBvLnBhc3NpdmUsCiAgICAgICAgb25jZTogby5vbmNlCiAgICB9IDogby5jYXB0dXJlKQo7CmNsYXNzIERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB7CiAgICBoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhlbGVtZW50LCBuYW1lLCBzdHJpbmdzLCBvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcHJlZml4ID0gbmFtZVswXTsKICAgICAgICBpZiAocHJlZml4ID09PSAiLiIpIHsKICAgICAgICAgICAgY29uc3QgY29tbWl0dGVyMiA9IG5ldyBQcm9wZXJ0eUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKTsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdHRlcjIucGFydHM7CiAgICAgICAgfQogICAgICAgIGlmIChwcmVmaXggPT09ICJAIikgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgbmV3IEV2ZW50UGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBvcHRpb25zLmV2ZW50Q29udGV4dCkKICAgICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgaWYgKHByZWZpeCA9PT0gIj8iKSB7CiAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICBuZXcgQm9vbGVhbkF0dHJpYnV0ZVBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgc3RyaW5ncykKICAgICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29tbWl0dGVyMSA9IG5ldyBBdHRyaWJ1dGVDb21taXR0ZXIoZWxlbWVudCwgbmFtZSwgc3RyaW5ncyk7CiAgICAgICAgcmV0dXJuIGNvbW1pdHRlcjEucGFydHM7CiAgICB9CiAgICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zKSB7CiAgICAgICAgcmV0dXJuIG5ldyBOb2RlUGFydChvcHRpb25zKTsKICAgIH0KfQpjb25zdCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IgPSBuZXcgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKCk7CmZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQxKSB7CiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQxLnR5cGUpOwogICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHZvaWQgMCkgewogICAgICAgIHRlbXBsYXRlQ2FjaGUgPSB7CiAgICAgICAgICAgIHN0cmluZ3NBcnJheTogbmV3IFdlYWtNYXAoKSwKICAgICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwKCkKICAgICAgICB9OwogICAgICAgIHRlbXBsYXRlQ2FjaGVzLnNldChyZXN1bHQxLnR5cGUsIHRlbXBsYXRlQ2FjaGUpOwogICAgfQogICAgbGV0IHRlbXBsYXRlMSA9IHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LmdldChyZXN1bHQxLnN0cmluZ3MpOwogICAgaWYgKHRlbXBsYXRlMSAhPT0gdm9pZCAwKSB7CiAgICAgICAgcmV0dXJuIHRlbXBsYXRlMTsKICAgIH0KICAgIGNvbnN0IGtleSA9IHJlc3VsdDEuc3RyaW5ncy5qb2luKG1hcmtlcik7CiAgICB0ZW1wbGF0ZTEgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTsKICAgIGlmICh0ZW1wbGF0ZTEgPT09IHZvaWQgMCkgewogICAgICAgIHRlbXBsYXRlMSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQxLCByZXN1bHQxLmdldFRlbXBsYXRlRWxlbWVudCgpKTsKICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZTEpOwogICAgfQogICAgdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuc2V0KHJlc3VsdDEuc3RyaW5ncywgdGVtcGxhdGUxKTsKICAgIHJldHVybiB0ZW1wbGF0ZTE7Cn0KY29uc3QgdGVtcGxhdGVDYWNoZXMgPSBuZXcgTWFwKCk7CmNvbnN0IHBhcnRzID0gbmV3IFdlYWtNYXAoKTsKY29uc3QgcmVuZGVyID0gKHJlc3VsdDEsIGNvbnRhaW5lciwgb3B0aW9uczMpPT57CiAgICBsZXQgcGFydCA9IHBhcnRzLmdldChjb250YWluZXIpOwogICAgaWYgKHBhcnQgPT09IHZvaWQgMCkgewogICAgICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpOwogICAgICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQgPSBuZXcgTm9kZVBhcnQoT2JqZWN0LmFzc2lnbih7CiAgICAgICAgICAgIHRlbXBsYXRlRmFjdG9yeQogICAgICAgIH0sIG9wdGlvbnMzKSkpOwogICAgICAgIHBhcnQuYXBwZW5kSW50byhjb250YWluZXIpOwogICAgfQogICAgcGFydC5zZXRWYWx1ZShyZXN1bHQxKTsKICAgIHBhcnQuY29tbWl0KCk7Cn07CmlmICh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIikgewogICAgKHdpbmRvd1sibGl0SHRtbFZlcnNpb25zIl0gfHwgKHdpbmRvd1sibGl0SHRtbFZlcnNpb25zIl0gPSBbXSkpLnB1c2goIjEuNC4xIik7Cn0KY29uc3QgaHRtbCA9IChzdHJpbmdzNiwgLi4udmFsdWVzMSk9Pm5ldyBUZW1wbGF0ZVJlc3VsdChzdHJpbmdzNiwgdmFsdWVzMSwgImh0bWwiLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpCjsKY29uc3Qgc3ZnID0gKHN0cmluZ3M2LCAuLi52YWx1ZXMxKT0+bmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3M2LCB2YWx1ZXMxLCAic3ZnIiwgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKQo7CnZhciBfYTsKd2luZG93LkpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkgPSAocHJvcCwgX29iaik9PnByb3AKOwpjb25zdCBkZWZhdWx0Q29udmVydGVyID0gewogICAgdG9BdHRyaWJ1dGUgKHZhbHVlLCB0eXBlKSB7CiAgICAgICAgc3dpdGNoKHR5cGUpewogICAgICAgICAgICBjYXNlIEJvb2xlYW46CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPyAiIiA6IG51bGw7CiAgICAgICAgICAgIGNhc2UgT2JqZWN0OgogICAgICAgICAgICBjYXNlIEFycmF5OgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSwKICAgIGZyb21BdHRyaWJ1dGUgKHZhbHVlLCB0eXBlKSB7CiAgICAgICAgc3dpdGNoKHR5cGUpewogICAgICAgICAgICBjYXNlIEJvb2xlYW46CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGw7CiAgICAgICAgICAgIGNhc2UgTnVtYmVyOgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gbnVsbCA6IE51bWJlcih2YWx1ZSk7CiAgICAgICAgICAgIGNhc2UgT2JqZWN0OgogICAgICAgICAgICBjYXNlIEFycmF5OgogICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICB9Cn07CmNvbnN0IG5vdEVxdWFsID0gKHZhbHVlLCBvbGQpPT57CiAgICByZXR1cm4gb2xkICE9PSB2YWx1ZSAmJiAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKTsKfTsKY29uc3QgZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb24gPSB7CiAgICBhdHRyaWJ1dGU6IHRydWUsCiAgICB0eXBlOiBTdHJpbmcsCiAgICBjb252ZXJ0ZXI6IGRlZmF1bHRDb252ZXJ0ZXIsCiAgICByZWZsZWN0OiBmYWxzZSwKICAgIGhhc0NoYW5nZWQ6IG5vdEVxdWFsCn07CmNvbnN0IFNUQVRFX0hBU19VUERBVEVEID0gMTsKY29uc3QgU1RBVEVfVVBEQVRFX1JFUVVFU1RFRCA9IDEgPDwgMjsKY29uc3QgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUgPSAxIDw8IDM7CmNvbnN0IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFkgPSAxIDw8IDQ7CmNvbnN0IGZpbmFsaXplZCA9ICJmaW5hbGl6ZWQiOwpjbGFzcyBVcGRhdGluZ0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7CiAgICBjb25zdHJ1Y3RvcigpewogICAgICAgIHN1cGVyKCk7CiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7CiAgICB9CiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsKICAgICAgICB0aGlzLmZpbmFsaXplKCk7CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IFtdOwogICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcy5mb3JFYWNoKCh2LCBwKT0+ewogICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHAsIHYpOwogICAgICAgICAgICBpZiAoYXR0ciAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwLnNldChhdHRyLCBwKTsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBhdHRyaWJ1dGVzOwogICAgfQogICAgc3RhdGljIF9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKSB7CiAgICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoIl9jbGFzc1Byb3BlcnRpZXMiLCB0aGlzKSkpIHsKICAgICAgICAgICAgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICBjb25zdCBzdXBlclByb3BlcnRpZXMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2NsYXNzUHJvcGVydGllczsKICAgICAgICAgICAgaWYgKHN1cGVyUHJvcGVydGllcyAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBzdXBlclByb3BlcnRpZXMuZm9yRWFjaCgodiwgayk9PnRoaXMuX2NsYXNzUHJvcGVydGllcy5zZXQoaywgdikKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucyA9IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uKSB7CiAgICAgICAgdGhpcy5fZW5zdXJlQ2xhc3NQcm9wZXJ0aWVzKCk7CiAgICAgICAgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldChuYW1lLCBvcHRpb25zKTsKICAgICAgICBpZiAob3B0aW9ucy5ub0FjY2Vzc29yIHx8IHRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3Qga2V5ID0gdHlwZW9mIG5hbWUgPT09ICJzeW1ib2wiID8gU3ltYm9sKCkgOiBgX18ke25hbWV9YDsKICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKTsKICAgICAgICBpZiAoZGVzY3JpcHRvciAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZGVzY3JpcHRvcik7CiAgICAgICAgfQogICAgfQogICAgc3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIG9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBnZXQgKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNba2V5XTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0ICh2YWx1ZSkgewogICAgICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzW25hbWVdOwogICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGVJbnRlcm5hbChuYW1lLCBvbGRWYWx1ZSwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZQogICAgICAgIH07CiAgICB9CiAgICBzdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKG5hbWUpIHsKICAgICAgICByZXR1cm4gdGhpcy5fY2xhc3NQcm9wZXJ0aWVzICYmIHRoaXMuX2NsYXNzUHJvcGVydGllcy5nZXQobmFtZSkgfHwgZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb247CiAgICB9CiAgICBzdGF0aWMgZmluYWxpemUoKSB7CiAgICAgICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpOwogICAgICAgIGlmICghc3VwZXJDdG9yLmhhc093blByb3BlcnR5KGZpbmFsaXplZCkpIHsKICAgICAgICAgICAgc3VwZXJDdG9yLmZpbmFsaXplKCk7CiAgICAgICAgfQogICAgICAgIHRoaXNbZmluYWxpemVkXSA9IHRydWU7CiAgICAgICAgdGhpcy5fZW5zdXJlQ2xhc3NQcm9wZXJ0aWVzKCk7CiAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcCA9IG5ldyBNYXAoKTsKICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCJwcm9wZXJ0aWVzIiwgdGhpcykpKSB7CiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wZXJ0aWVzOwogICAgICAgICAgICBjb25zdCBwcm9wS2V5cyA9IFsKICAgICAgICAgICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKSwKICAgICAgICAgICAgICAgIC4uLnR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAiZnVuY3Rpb24iID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhwcm9wcykgOiBbXQogICAgICAgICAgICBdOwogICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcHJvcEtleXMpewogICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVQcm9wZXJ0eShwLCBwcm9wc1twXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBzdGF0aWMgX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShuYW1lLCBvcHRpb25zKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gb3B0aW9ucy5hdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZSA9PT0gZmFsc2UgPyB2b2lkIDAgOiB0eXBlb2YgYXR0cmlidXRlID09PSAic3RyaW5nIiA/IGF0dHJpYnV0ZSA6IHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiA/IG5hbWUudG9Mb3dlckNhc2UoKSA6IHZvaWQgMDsKICAgIH0KICAgIHN0YXRpYyBfdmFsdWVIYXNDaGFuZ2VkKHZhbHVlLCBvbGQsIGhhc0NoYW5nZWQgPSBub3RFcXVhbCkgewogICAgICAgIHJldHVybiBoYXNDaGFuZ2VkKHZhbHVlLCBvbGQpOwogICAgfQogICAgc3RhdGljIF9wcm9wZXJ0eVZhbHVlRnJvbUF0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucykgewogICAgICAgIGNvbnN0IHR5cGUyID0gb3B0aW9ucy50eXBlOwogICAgICAgIGNvbnN0IGNvbnZlcnRlciA9IG9wdGlvbnMuY29udmVydGVyIHx8IGRlZmF1bHRDb252ZXJ0ZXI7CiAgICAgICAgY29uc3QgZnJvbUF0dHJpYnV0ZSA9IHR5cGVvZiBjb252ZXJ0ZXIgPT09ICJmdW5jdGlvbiIgPyBjb252ZXJ0ZXIgOiBjb252ZXJ0ZXIuZnJvbUF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gZnJvbUF0dHJpYnV0ZSA/IGZyb21BdHRyaWJ1dGUodmFsdWUsIHR5cGUyKSA6IHZhbHVlOwogICAgfQogICAgc3RhdGljIF9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpIHsKICAgICAgICBpZiAob3B0aW9ucy5yZWZsZWN0ID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCB0eXBlMiA9IG9wdGlvbnMudHlwZTsKICAgICAgICBjb25zdCBjb252ZXJ0ZXIgPSBvcHRpb25zLmNvbnZlcnRlcjsKICAgICAgICBjb25zdCB0b0F0dHJpYnV0ZSA9IGNvbnZlcnRlciAmJiBjb252ZXJ0ZXIudG9BdHRyaWJ1dGUgfHwgZGVmYXVsdENvbnZlcnRlci50b0F0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gdG9BdHRyaWJ1dGUodmFsdWUsIHR5cGUyKTsKICAgIH0KICAgIGluaXRpYWxpemUoKSB7CiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSAwOwogICAgICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzKT0+dGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHJlcwogICAgICAgICk7CiAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICAgICAgdGhpcy5fc2F2ZUluc3RhbmNlUHJvcGVydGllcygpOwogICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZUludGVybmFsKCk7CiAgICB9CiAgICBfc2F2ZUluc3RhbmNlUHJvcGVydGllcygpIHsKICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgoX3YsIHApPT57CiAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHApKSB7CiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbcF07CiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1twXTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzLnNldChwLCB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIF9hcHBseUluc3RhbmNlUHJvcGVydGllcygpIHsKICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMuZm9yRWFjaCgodiwgcCk9PnRoaXNbcF0gPSB2CiAgICAgICAgKTsKICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMgPSB2b2lkIDA7CiAgICB9CiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHsKICAgICAgICB0aGlzLmVuYWJsZVVwZGF0aW5nKCk7CiAgICB9CiAgICBlbmFibGVVcGRhdGluZygpIHsKICAgICAgICBpZiAodGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIoKTsKICAgICAgICAgICAgdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciA9IHZvaWQgMDsKICAgICAgICB9CiAgICB9CiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHsKICAgIH0KICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7CiAgICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHsKICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUobmFtZSwgdmFsdWUsIG9wdGlvbnMgPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikgewogICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0IGF0dHIgPSBjdG9yLl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7CiAgICAgICAgaWYgKGF0dHIgIT09IHZvaWQgMCkgewogICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBjdG9yLl9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoYXR0clZhbHVlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7CiAgICAgICAgICAgIGlmIChhdHRyVmFsdWUgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyVmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7CiAgICAgICAgfQogICAgfQogICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpIHsKICAgICAgICBpZiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0IHByb3BOYW1lID0gY3Rvci5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5nZXQobmFtZSk7CiAgICAgICAgaWYgKHByb3BOYW1lICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgY29uc3Qgb3B0aW9uczMgPSBjdG9yLmdldFByb3BlcnR5T3B0aW9ucyhwcm9wTmFtZSk7CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZOwogICAgICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IGN0b3IuX3Byb3BlcnR5VmFsdWVGcm9tQXR0cmlidXRlKHZhbHVlLCBvcHRpb25zMyk7CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWTsKICAgICAgICB9CiAgICB9CiAgICByZXF1ZXN0VXBkYXRlSW50ZXJuYWwobmFtZSwgb2xkVmFsdWUsIG9wdGlvbnMpIHsKICAgICAgICBsZXQgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IHRydWU7CiAgICAgICAgaWYgKG5hbWUgIT09IHZvaWQgMCkgewogICAgICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgY3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnMobmFtZSk7CiAgICAgICAgICAgIGlmIChjdG9yLl92YWx1ZUhhc0NoYW5nZWQodGhpc1tuYW1lXSwgb2xkVmFsdWUsIG9wdGlvbnMuaGFzQ2hhbmdlZCkpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMuaGFzKG5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMuc2V0KG5hbWUsIG9sZFZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJlZmxlY3QgPT09IHRydWUgJiYgISh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFkpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzLnNldChuYW1lLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNob3VsZFJlcXVlc3RVcGRhdGUgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZSAmJiBzaG91bGRSZXF1ZXN0VXBkYXRlKSB7CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSB0aGlzLl9lbnF1ZXVlVXBkYXRlKCk7CiAgICAgICAgfQogICAgfQogICAgcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSkgewogICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZUludGVybmFsKG5hbWUsIG9sZFZhbHVlKTsKICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVDb21wbGV0ZTsKICAgIH0KICAgIGFzeW5jIF9lbnF1ZXVlVXBkYXRlKCkgewogICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9VUERBVEVfUkVRVUVTVEVEOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZVByb21pc2U7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIH0KICAgICAgICBjb25zdCByZXN1bHQxID0gdGhpcy5wZXJmb3JtVXBkYXRlKCk7CiAgICAgICAgaWYgKHJlc3VsdDEgIT0gbnVsbCkgewogICAgICAgICAgICBhd2FpdCByZXN1bHQxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZTsKICAgIH0KICAgIGdldCBfaGFzUmVxdWVzdGVkVXBkYXRlKCkgewogICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX1VQREFURV9SRVFVRVNURUQ7CiAgICB9CiAgICBnZXQgaGFzVXBkYXRlZCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlU3RhdGUgJiAxOwogICAgfQogICAgcGVyZm9ybVVwZGF0ZSgpIHsKICAgICAgICBpZiAoIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdGhpcy5fYXBwbHlJbnN0YW5jZVByb3BlcnRpZXMoKTsKICAgICAgICB9CiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZSA9IGZhbHNlOwogICAgICAgIGNvbnN0IGNoYW5nZWRQcm9wZXJ0aWVzID0gdGhpcy5fY2hhbmdlZFByb3BlcnRpZXM7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gdGhpcy5zaG91bGRVcGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpOwogICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLl9tYXJrVXBkYXRlZCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBzaG91bGRVcGRhdGUgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTsKICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkgewogICAgICAgICAgICBpZiAoISh0aGlzLl91cGRhdGVTdGF0ZSAmIDEpKSB7CiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSEFTX1VQREFURUQ7CiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTsKICAgICAgICB9CiAgICB9CiAgICBfbWFya1VwZGF0ZWQoKSB7CiAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSAmIH5TVEFURV9VUERBVEVfUkVRVUVTVEVEOwogICAgfQogICAgZ2V0IHVwZGF0ZUNvbXBsZXRlKCkgewogICAgICAgIHJldHVybiB0aGlzLl9nZXRVcGRhdGVDb21wbGV0ZSgpOwogICAgfQogICAgX2dldFVwZGF0ZUNvbXBsZXRlKCkgewogICAgICAgIHJldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCk7CiAgICB9CiAgICBnZXRVcGRhdGVDb21wbGV0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlUHJvbWlzZTsKICAgIH0KICAgIHNob3VsZFVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXMpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXMpIHsKICAgICAgICBpZiAodGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgIT09IHZvaWQgMCAmJiB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zaXplID4gMCkgewogICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5mb3JFYWNoKCh2LCBrKT0+dGhpcy5fcHJvcGVydHlUb0F0dHJpYnV0ZShrLCB0aGlzW2tdLCB2KQogICAgICAgICAgICApOwogICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9IHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTsKICAgIH0KICAgIHVwZGF0ZWQoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICB9CiAgICBmaXJzdFVwZGF0ZWQoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICB9Cn0KX2EgPSBmaW5hbGl6ZWQ7ClVwZGF0aW5nRWxlbWVudFtfYV0gPSB0cnVlOwpjb25zdCBsZWdhY3lDdXN0b21FbGVtZW50ID0gKHRhZ05hbWUsIGNsYXp6KT0+ewogICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBjbGF6eik7CiAgICByZXR1cm4gY2xheno7Cn07CmNvbnN0IHN0YW5kYXJkQ3VzdG9tRWxlbWVudCA9ICh0YWdOYW1lLCBkZXNjcmlwdG9yKT0+ewogICAgY29uc3QgeyBraW5kICwgZWxlbWVudHMgIH0gPSBkZXNjcmlwdG9yOwogICAgcmV0dXJuIHsKICAgICAgICBraW5kLAogICAgICAgIGVsZW1lbnRzLAogICAgICAgIGZpbmlzaGVyIChjbGF6eikgewogICAgICAgICAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHRhZ05hbWUsIGNsYXp6KTsKICAgICAgICB9CiAgICB9Owp9Owpjb25zdCBzdGFuZGFyZFByb3BlcnR5ID0gKG9wdGlvbnMzLCBlbGVtZW50Nik9PnsKICAgIGlmIChlbGVtZW50Ni5raW5kID09PSAibWV0aG9kIiAmJiBlbGVtZW50Ni5kZXNjcmlwdG9yICYmICEoInZhbHVlIiBpbiBlbGVtZW50Ni5kZXNjcmlwdG9yKSkgewogICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oewogICAgICAgIH0sIGVsZW1lbnQ2KSwgewogICAgICAgICAgICBmaW5pc2hlciAoY2xhenopIHsKICAgICAgICAgICAgICAgIGNsYXp6LmNyZWF0ZVByb3BlcnR5KGVsZW1lbnQ2LmtleSwgb3B0aW9uczMpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGtpbmQ6ICJmaWVsZCIsCiAgICAgICAgICAgIGtleTogU3ltYm9sKCksCiAgICAgICAgICAgIHBsYWNlbWVudDogIm93biIsCiAgICAgICAgICAgIGRlc2NyaXB0b3I6IHsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW5pdGlhbGl6ZXIgKCkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50Ni5pbml0aWFsaXplciA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgICAgIHRoaXNbZWxlbWVudDYua2V5XSA9IGVsZW1lbnQ2LmluaXRpYWxpemVyLmNhbGwodGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpbmlzaGVyIChjbGF6eikgewogICAgICAgICAgICAgICAgY2xhenouY3JlYXRlUHJvcGVydHkoZWxlbWVudDYua2V5LCBvcHRpb25zMyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQp9Owpjb25zdCBsZWdhY3lQcm9wZXJ0eSA9IChvcHRpb25zMywgcHJvdG8sIG5hbWU0KT0+ewogICAgcHJvdG8uY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobmFtZTQsIG9wdGlvbnMzKTsKfTsKY29uc3QgbGVnYWN5UXVlcnkgPSAoZGVzY3JpcHRvciwgcHJvdG8sIG5hbWU0KT0+ewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lNCwgZGVzY3JpcHRvcik7Cn07CmNvbnN0IHN0YW5kYXJkRXZlbnRPcHRpb25zID0gKG9wdGlvbnMzLCBlbGVtZW50Nik9PnsKICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oewogICAgfSwgZWxlbWVudDYpLCB7CiAgICAgICAgZmluaXNoZXIgKGNsYXp6KSB7CiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY2xhenoucHJvdG90eXBlW2VsZW1lbnQ2LmtleV0sIG9wdGlvbnMzKTsKICAgICAgICB9CiAgICB9KTsKfTsKY29uc3QgbGVnYWN5RXZlbnRPcHRpb25zID0gKG9wdGlvbnMzLCBwcm90bywgbmFtZTQpPT57CiAgICBPYmplY3QuYXNzaWduKHByb3RvW25hbWU0XSwgb3B0aW9uczMpOwp9Owpjb25zdCBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMgPSB3aW5kb3cuU2hhZG93Um9vdCAmJiAod2luZG93LlNoYWR5Q1NTID09PSB2b2lkIDAgfHwgd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykgJiYgImFkb3B0ZWRTdHlsZVNoZWV0cyIgaW4gRG9jdW1lbnQucHJvdG90eXBlICYmICJyZXBsYWNlIiBpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZTsKY29uc3QgY29uc3RydWN0aW9uVG9rZW4gPSBTeW1ib2woKTsKY2xhc3MgQ1NTUmVzdWx0IHsKICAgIGNvbnN0cnVjdG9yKGNzc1RleHQsIHNhZmVUb2tlbil7CiAgICAgICAgaWYgKHNhZmVUb2tlbiAhPT0gY29uc3RydWN0aW9uVG9rZW4pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLiIpOwogICAgICAgIH0KICAgICAgICB0aGlzLmNzc1RleHQgPSBjc3NUZXh0OwogICAgfQogICAgZ2V0IHN0eWxlU2hlZXQoKSB7CiAgICAgICAgaWYgKHRoaXMuX3N0eWxlU2hlZXQgPT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZVNoZWV0ID0gbmV3IENTU1N0eWxlU2hlZXQoKTsKICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl9zdHlsZVNoZWV0OwogICAgfQogICAgdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3NzVGV4dDsKICAgIH0KfQpjb25zdCB1bnNhZmVDU1MgPSAodmFsdWUpPT57CiAgICByZXR1cm4gbmV3IENTU1Jlc3VsdChTdHJpbmcodmFsdWUpLCBjb25zdHJ1Y3Rpb25Ub2tlbik7Cn07CmNvbnN0IHRleHRGcm9tQ1NTUmVzdWx0ID0gKHZhbHVlKT0+ewogICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQ1NTUmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHZhbHVlLmNzc1RleHQ7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gIm51bWJlciIpIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6ICR7dmFsdWV9LiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dAogICAgICAgICAgICB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuYCk7CiAgICB9Cn07CmNvbnN0IGNzcyA9IChzdHJpbmdzNiwgLi4udmFsdWVzMSk9PnsKICAgIGNvbnN0IGNzc1RleHQxID0gdmFsdWVzMS5yZWR1Y2UoKGFjYywgdiwgaWR4KT0+YWNjICsgdGV4dEZyb21DU1NSZXN1bHQodikgKyBzdHJpbmdzNltpZHggKyAxXQogICAgLCBzdHJpbmdzNlswXSk7CiAgICByZXR1cm4gbmV3IENTU1Jlc3VsdChjc3NUZXh0MSwgY29uc3RydWN0aW9uVG9rZW4pOwp9Owood2luZG93WyJsaXRFbGVtZW50VmVyc2lvbnMiXSB8fCAod2luZG93WyJsaXRFbGVtZW50VmVyc2lvbnMiXSA9IFtdKSkucHVzaCgiMi41LjEiKTsKY29uc3QgcmVuZGVyTm90SW1wbGVtZW50ZWQgPSB7Cn07CmNsYXNzIExpdEVsZW1lbnQgZXh0ZW5kcyBVcGRhdGluZ0VsZW1lbnQgewogICAgc3RhdGljIGdldFN0eWxlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy5zdHlsZXM7CiAgICB9CiAgICBzdGF0aWMgX2dldFVuaXF1ZVN0eWxlcygpIHsKICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCJfc3R5bGVzIiwgdGhpcykpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdXNlclN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodXNlclN0eWxlcykpIHsKICAgICAgICAgICAgY29uc3QgYWRkU3R5bGVzID0gKHN0eWxlczIsIHNldDIpPT5zdHlsZXMyLnJlZHVjZVJpZ2h0KChzZXQzLCBzKT0+QXJyYXkuaXNBcnJheShzKSA/IGFkZFN0eWxlcyhzLCBzZXQzKSA6IChzZXQzLmFkZChzKSwgc2V0MykKICAgICAgICAgICAgICAgICwgc2V0MikKICAgICAgICAgICAgOwogICAgICAgICAgICBjb25zdCBzZXQgPSBhZGRTdHlsZXModXNlclN0eWxlcywgbmV3IFNldCgpKTsKICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gW107CiAgICAgICAgICAgIHNldC5mb3JFYWNoKCh2KT0+c3R5bGVzLnVuc2hpZnQodikKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0gc3R5bGVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3N0eWxlcyA9IHVzZXJTdHlsZXMgPT09IHZvaWQgMCA/IFtdIDogWwogICAgICAgICAgICAgICAgdXNlclN0eWxlcwogICAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgICB0aGlzLl9zdHlsZXMgPSB0aGlzLl9zdHlsZXMubWFwKChzKT0+ewogICAgICAgICAgICBpZiAocyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgJiYgIXN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cykgewogICAgICAgICAgICAgICAgY29uc3QgY3NzVGV4dDEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzLmNzc1J1bGVzKS5yZWR1Y2UoKGNzczIsIHJ1bGUpPT5jc3MyICsgcnVsZS5jc3NUZXh0CiAgICAgICAgICAgICAgICAsICIiKTsKICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVDU1MoY3NzVGV4dDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgIH0pOwogICAgfQogICAgaW5pdGlhbGl6ZSgpIHsKICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7CiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0VW5pcXVlU3R5bGVzKCk7CiAgICAgICAgdGhpcy5yZW5kZXJSb290ID0gdGhpcy5jcmVhdGVSZW5kZXJSb290KCk7CiAgICAgICAgaWYgKHdpbmRvdy5TaGFkb3dSb290ICYmIHRoaXMucmVuZGVyUm9vdCBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290KSB7CiAgICAgICAgICAgIHRoaXMuYWRvcHRTdHlsZXMoKTsKICAgICAgICB9CiAgICB9CiAgICBjcmVhdGVSZW5kZXJSb290KCkgewogICAgICAgIHJldHVybiB0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTsKICAgIH0KICAgIGFkb3B0U3R5bGVzKCkgewogICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuY29uc3RydWN0b3IuX3N0eWxlczsKICAgICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgIT09IHZvaWQgMCAmJiAhd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykgewogICAgICAgICAgICB3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0ucHJlcGFyZUFkb3B0ZWRDc3NUZXh0KHN0eWxlcy5tYXAoKHMpPT5zLmNzc1RleHQKICAgICAgICAgICAgKSwgdGhpcy5sb2NhbE5hbWUpOwogICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyUm9vdC5hZG9wdGVkU3R5bGVTaGVldHMgPSBzdHlsZXMubWFwKChzKT0+cyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgPyBzIDogcy5zdHlsZVNoZWV0CiAgICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHsKICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpOwogICAgICAgIGlmICh0aGlzLmhhc1VwZGF0ZWQgJiYgd2luZG93LlNoYWR5Q1NTICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTsKICAgICAgICB9CiAgICB9CiAgICB1cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpIHsKICAgICAgICBjb25zdCB0ZW1wbGF0ZVJlc3VsdCA9IHRoaXMucmVuZGVyKCk7CiAgICAgICAgc3VwZXIudXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTsKICAgICAgICBpZiAodGVtcGxhdGVSZXN1bHQgIT09IHJlbmRlck5vdEltcGxlbWVudGVkKSB7CiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IucmVuZGVyKHRlbXBsYXRlUmVzdWx0LCB0aGlzLnJlbmRlclJvb3QsIHsKICAgICAgICAgICAgICAgIHNjb3BlTmFtZTogdGhpcy5sb2NhbE5hbWUsCiAgICAgICAgICAgICAgICBldmVudENvbnRleHQ6IHRoaXMKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHMpIHsKICAgICAgICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuX3N0eWxlcy5mb3JFYWNoKChzKT0+ewogICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzLmNzc1RleHQ7CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CiAgICByZW5kZXIoKSB7CiAgICAgICAgcmV0dXJuIHJlbmRlck5vdEltcGxlbWVudGVkOwogICAgfQp9CkxpdEVsZW1lbnRbImZpbmFsaXplZCJdID0gdHJ1ZTsKTGl0RWxlbWVudC5yZW5kZXIgPSByZW5kZXI7CkxpdEVsZW1lbnQuc2hhZG93Um9vdE9wdGlvbnMgPSB7CiAgICBtb2RlOiAib3BlbiIKfTsKY29uc3QgYXBwQ3NzID0gY3NzYApoZWFkZXIgewogICAgcG9zaXRpb246IHN0aWNreTsKICAgIGRpc3BsYXk6IGZsZXg7Cn0KCmZpZWxkc2V0IHsKICAgIGRpc3BsYXk6IGdyaWQ7Cn0KCmxhYmVsLCAuZm9ybS1saHMgewogICAgZ3JpZC1jb2x1bW46IDE7Cn0KCmlucHV0LCAuZm9ybS1yaHMgewogICAgZ3JpZC1jb2x1bW46IDI7Cn0KCmhlYWRlciB7CiAgICBwYWRkaW5nOiAxcmVtOwp9CgptYWluIHsKICAgIGRpc3BsYXk6IGZsZXg7Cn0KCiNzaWRlYmFyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwp9CgpidXR0b24gewogICAgYm9yZGVyOiBzb2xpZCAxcHggd2hpdGU7CiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgIGNvbG9yOiAgcmdiYSgyNTUsMjU1LDI1NSwwLjkpOwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0OwogICAgbWluLXdpZHRoOiA4cmVtOwp9CgpidXR0b246aG92ZXIgewogICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjUpOwogICAgY29sb3I6ICNmZmY7Cn0KCmJ1dHRvbi5zZWxlY3RlZCB7CiAgICBiYWNrZ3JvdW5kOiBibHVlOwp9CgpidXR0b246ZGlzYWJsZWQgewogICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7CiAgICBjb2xvcjogIHJnYmEoMjU1LDI1NSwyNTUsMC41KTsKfQoKYnV0dG9uOmRpc2FibGVkOmhvdmVyIHsKICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7CiAgICBjdXJzb3I6IGRlZmF1bHQ7Cn0KYDsKY29uc3QgYXBwSHRtbCA9IGh0bWxgPGhlYWRlcj4KPGRpdiBzdHlsZT0iZmxleC1ncm93OiAxOyI+RGVub2ZsYXJlIFRhaWw8L2Rpdj4KPGRpdiBpZD0ibWVzc2FnZSI+U2F2aW5nIHByb2ZpbGUuLi48L2Rpdj4KPC9oZWFkZXI+CjxtYWluPgo8ZGl2IGlkPSJzaWRlYmFyIj4KPC9kaXY+CjxkaXYgaWQ9ImNvbnRlbnQiPgo8Zm9ybSBpZD0icHJvZmlsZS1mb3JtIiBhdXRvY29tcGxldGU9Im9mZiI+CjxmaWVsZHNldCBpZD0icHJvZmlsZS1maWVsZHNldCI+CiAgPGgzPlByb2ZpbGU8L2gzPgogIDxsYWJlbCBmb3I9InByb2ZpbGUtbmFtZSI+UHJvZmlsZSBuYW1lOjwvbGFiZWw+CiAgPGlucHV0IGlkPSJwcm9maWxlLW5hbWUiIHR5cGU9InRleHQiPgoKICA8bGFiZWwgZm9yPSJhY2NvdW50LWlkIj5DbG91ZGZsYXJlIEFjY291bnQgSUQ6PC9sYWJlbD4KICA8aW5wdXQgaWQ9InByb2ZpbGUtYWNjb3VudC1pZCIgdHlwZT0idGV4dCI+CgogIDxsYWJlbCBmb3I9ImFwaS10b2tlbiI+Q2xvdWRmbGFyZSBBUEkgVG9rZW46PC9sYWJlbD4KICA8aW5wdXQgaWQ9InByb2ZpbGUtYXBpLXRva2VuIiB0eXBlPSJ0ZXh0Ij4KCiAgPGRpdiBjbGFzcz0iZm9ybS1saHMiPgogICAgICA8YnV0dG9uIGlkPSJwcm9maWxlLWRlbGV0ZSI+RGVsZXRlPC9idXR0b24+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZm9ybS1yaHMiPgogICAgICA8YnV0dG9uIGlkPSJwcm9maWxlLWNhbmNlbCI+Q2FuY2VsPC9idXR0b24+CiAgICAgIDxidXR0b24gaWQ9InByb2ZpbGUtc2F2ZSI+U2F2ZTwvYnV0dG9uPgogIDwvZGl2Pgo8L2ZpZWxkc2V0Pgo8L2Zvcm0+CjwvZGl2Pgo8L21haW4+YDsKY29uc3Qgc3R5bGVTaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CnN0eWxlU2hlZXQudHlwZSA9ICd0ZXh0L2Nzcyc7CnN0eWxlU2hlZXQuaW5uZXJUZXh0ID0gYXBwQ3NzLmNzc1RleHQ7CmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7CmRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gYXBwSHRtbC5nZXRIVE1MKCk7CmNvbnN0IHNpZGViYXJEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZWJhcicpOwpjb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLWZvcm0nKTsKY29uc3QgcHJvZmlsZUZpZWxkc2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtZmllbGRzZXQnKTsKY29uc3QgcHJvZmlsZU5hbWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLW5hbWUnKTsKY29uc3QgcHJvZmlsZUFjY291bnRJZElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtYWNjb3VudC1pZCcpOwpjb25zdCBwcm9maWxlQXBpVG9rZW5JbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLWFwaS10b2tlbicpOwpjb25zdCBwcm9maWxlRGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGUtZGVsZXRlJyk7CmNvbnN0IHByb2ZpbGVDYW5jZWxCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZS1jYW5jZWwnKTsKY29uc3QgcHJvZmlsZVNhdmVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZS1zYXZlJyk7CmNvbnN0IG1lc3NhZ2VEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZScpOwpjb25zdCB2bSA9IG5ldyBUYWlsd2ViQXBwVk0oKTsKdm0ub25jaGFuZ2UgPSAoKT0+ewogICAgdXBkYXRlU2lkZWJhclZpZXcoc2lkZWJhckRpdiwgdm0pOwogICAgcHJvZmlsZUZvcm0uc3R5bGUuZGlzcGxheSA9IHZtLnByb2ZpbGVGb3JtLnNob3dpbmcgPyAnZ3JpZCcgOiAnbm9uZSc7CiAgICBwcm9maWxlRmllbGRzZXQuZGlzYWJsZWQgPSAhdm0ucHJvZmlsZUZvcm0uZW5hYmxlZDsKICAgIHByb2ZpbGVOYW1lSW5wdXQudmFsdWUgPSB2bS5wcm9maWxlRm9ybS5uYW1lOwogICAgcHJvZmlsZUFjY291bnRJZElucHV0LnZhbHVlID0gdm0ucHJvZmlsZUZvcm0uYWNjb3VudElkOwogICAgcHJvZmlsZUFwaVRva2VuSW5wdXQudmFsdWUgPSB2bS5wcm9maWxlRm9ybS5hcGlUb2tlbjsKICAgIHByb2ZpbGVEZWxldGVCdXR0b24uc3R5bGUuZGlzcGxheSA9IHZtLnByb2ZpbGVGb3JtLmRlbGV0ZVZpc2libGUgPyAnaW5saW5lLWJsb2NrJyA6ICdub25lJzsKICAgIHByb2ZpbGVTYXZlQnV0dG9uLmRpc2FibGVkID0gIXZtLnByb2ZpbGVGb3JtLnNhdmVFbmFibGVkOwogICAgbWVzc2FnZURpdi50ZXh0Q29udGVudCA9IHZtLm1lc3NhZ2U7Cn07CnByb2ZpbGVDYW5jZWxCdXR0b24ub25jbGljayA9ICgpPT57CiAgICB2bS5jYW5jZWxQcm9maWxlKCk7Cn07CnByb2ZpbGVOYW1lSW5wdXQub25pbnB1dCA9ICgpPT57CiAgICB2bS5zZXRQcm9maWxlTmFtZShwcm9maWxlTmFtZUlucHV0LnZhbHVlKTsKfTsKcHJvZmlsZUFjY291bnRJZElucHV0Lm9uaW5wdXQgPSAoKT0+ewogICAgdm0uc2V0UHJvZmlsZUFjY291bnRJZChwcm9maWxlQWNjb3VudElkSW5wdXQudmFsdWUpOwp9Owpwcm9maWxlQXBpVG9rZW5JbnB1dC5vbmlucHV0ID0gKCk9PnsKICAgIHZtLnNldFByb2ZpbGVBcGlUb2tlbihwcm9maWxlQXBpVG9rZW5JbnB1dC52YWx1ZSk7Cn07CnByb2ZpbGVTYXZlQnV0dG9uLm9uY2xpY2sgPSAoKT0+ewogICAgdm0uc2F2ZVByb2ZpbGUoKTsKfTsKcHJvZmlsZURlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gKCk9PnsKICAgIHZtLmRlbGV0ZVByb2ZpbGUoKTsKfTsKdm0uc3RhcnQoKTsKaWYgKGZhbHNlKSB7CiAgICBjb25zdCBhY2NvdW50SWQgPSAnJzsKICAgIGNvbnN0IGFwaVRva2VuID0gJyc7CiAgICBjb25zdCBzY3JpcHROYW1lID0gJyc7CiAgICB0cnkgewogICAgICAgIENsb3VkZmxhcmVBcGkuVVJMX1RSQU5TRk9STUVSID0gKHYpPT5gL2ZldGNoLyR7di5zdWJzdHJpbmcoJ2h0dHBzOi8vJy5sZW5ndGgpfWAKICAgICAgICA7CiAgICAgICAgY29uc3QgdGFpbCA9IGF3YWl0IGNyZWF0ZVRhaWwoYWNjb3VudElkLCBzY3JpcHROYW1lLCBhcGlUb2tlbik7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShKU09OLnN0cmluZ2lmeSh0YWlsLCB1bmRlZmluZWQsIDIpKSk7CiAgICAgICAgY29uc3QgbG9nZ2VyID0gKC4uLmRhdGEpPT57CiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpOwogICAgICAgICAgICBjb25zdCBtc2cgPSBkYXRhWzBdOwogICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBtc2cuc3BsaXQoJyVjJyk7CiAgICAgICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IHRva2Vucy5sZW5ndGg7IGkxKyspewogICAgICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTsKICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZGF0YVtpMV07CiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZSk7CiAgICAgICAgICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gdG9rZW5zW2kxXTsKICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChzcGFuKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7CiAgICAgICAgfTsKICAgICAgICBjb25zdCBjYWxsYmFja3MxID0gewogICAgICAgICAgICBvbk9wZW4gKF9jbiwgdGltZVN0YW1wKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb3BlbicsIHsKICAgICAgICAgICAgICAgICAgICB0aW1lU3RhbXAKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbkNsb3NlIChfY24sIHRpbWVTdGFtcCwgY29kZSwgcmVhc29uLCB3YXNDbGVhbikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Nsb3NlJywgewogICAgICAgICAgICAgICAgICAgIHRpbWVTdGFtcCwKICAgICAgICAgICAgICAgICAgICBjb2RlLAogICAgICAgICAgICAgICAgICAgIHJlYXNvbiwKICAgICAgICAgICAgICAgICAgICB3YXNDbGVhbgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uRXJyb3IgKF9jbiwgdGltZVN0YW1wLCBlcnJvckluZm8pIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIHsKICAgICAgICAgICAgICAgICAgICB0aW1lU3RhbXAsCiAgICAgICAgICAgICAgICAgICAgZXJyb3JJbmZvCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25UYWlsTWVzc2FnZSAoX2NuLCB0aW1lU3RhbXAsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0YWlsTWVzc2FnZScsIHsKICAgICAgICAgICAgICAgICAgICB0aW1lU3RhbXAsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBkdW1wTWVzc2FnZVByZXR0eShtZXNzYWdlLCBsb2dnZXIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvblVucGFyc2VkTWVzc2FnZSAoX2NuLCB0aW1lU3RhbXAsIG1lc3NhZ2UsIHBhcnNlRXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1bnBhcnNlZE1lc3NhZ2UnLCB7CiAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wLAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgcGFyc2VFcnJvcgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IF9jbiA9IG5ldyBUYWlsQ29ubmVjdGlvbih0YWlsLnVybCwgY2FsbGJhY2tzMSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlLnN0YWNrKSk7CiAgICB9Cn0K';